{"contract": "etherpot_lotto", "sourceLanguage": "Solidity", "analysis": {"89": [{"level": "error", "tool": ["slither"], "fullDescription": "Lotto.cash (/data/demo_analysis_2/source_code/etherpot_lotto.sol#89-113) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.send(subpot) (/data/demo_analysis_2/source_code/etherpot_lotto.sol#109)\n", "name": "AccessControlVulnerability"}], "109": [{"level": "error", "tool": ["slither"], "snippet": {"text": "winner.send(subpot)"}, "fullDescription": "Lotto.cash (/data/demo_analysis_2/source_code/etherpot_lotto.sol#89-113) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.send(subpot) (/data/demo_analysis_2/source_code/etherpot_lotto.sol#109)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability"}], "141": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "msg.sender.send(msg.value-value)"}, "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability"}], "119": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "function getBuyers(uint roundIndex,address buyer) constant returns (address[]){\n         return rounds[roundIndex].buyers;\n     }"}, "fullDescription": "A possible integer overflow exists in the function `getBuyers(uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "120": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "return rounds[roundIndex].buyers"}, "fullDescription": "A possible integer overflow exists in the function `getBuyers(uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "57": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "decisionBlockHash%rounds[roundIndex].ticketsCount"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability"}], "73": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "roundIndex+1"}, "fullDescription": "A possible integer overflow exists in the function `getBuyers(uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "124": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "77": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "79": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "43": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "128": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}]}, "listLine": [89, 109, 141, 119, 120, 57, 73, 124, 77, 79, 43, 128], "rules": [{"id": "AccessControl_19", "fullDescription": {"text": "Lotto.cash (/data/demo_analysis_2/source_code/etherpot_lotto.sol#89-113) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.send(subpot) (/data/demo_analysis_2/source_code/etherpot_lotto.sol#109)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `getBuyers(uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}]}