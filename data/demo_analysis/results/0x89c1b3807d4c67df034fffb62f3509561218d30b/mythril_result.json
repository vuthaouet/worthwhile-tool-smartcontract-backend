{
  "contract": "0x89c1b3807d4c67df034fffb62f3509561218d30b",
  "tool": "mythril",
  "start": 1640181192.6420646,
  "end": 1640181260.6107078,
  "duration": 67.96864318847656,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 939,
        "code": "32[] requestData) public payable returns (int) {\n        if (externalCallFlag) {\n            throw;\n        }\n\n        if (killswitch) {\n            externalCallFlag = true;\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return newVersion;\n        }\n\n        if (msg.value < MIN_FEE) {\n            externalCallFlag = true;\n            // If the amount of ether sent by the requester is too little or \n            // too much, refund the requester and discard the request.\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return FAIL_FLAG;\n        } else {\n            // Record the request.\n            uint64 requestId = requestCnt;\n            requestCnt++;\n            unrespondedCnt++;\n\n            bytes32 paramsHash = sha3(requestType, requestData);\n            requests[requestId].requester = msg.sender;\n            requests[requestId].fee = msg.value;\n            requests[requestId].callbackAddr = callbackAddr;\n            requests[requestId].callbackFID = callbackFID;\n            requests[requestId].paramsHash = paramsHash;\n\n            // Log the request for the Town Crier server to process.\n            RequestInfo(requestId, requestType, msg.sender, msg.value, callbackAddr, paramsHash, timestamp, requestData);\n            return requestId;\n        }\n    }\n\n    function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 respData) public {\n        if (msg.sender != SGX_ADDRESS",
        "debug": "calldata_TownCrier_32 + 100: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TownCrier_0: 0x58487bee00000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\n",
        "description": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "request(uint8,address,bytes4,uint256,bytes32[])",
        "lineno": 100,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 951,
        "code": "32[] requestData) public payable returns (int) {\n        if (externalCallFlag) {\n            throw;\n        }\n\n        if (killswitch) {\n            externalCallFlag = true;\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return newVersion;\n        }\n\n        if (msg.value < MIN_FEE) {\n            externalCallFlag = true;\n            // If the amount of ether sent by the requester is too little or \n            // too much, refund the requester and discard the request.\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return FAIL_FLAG;\n        } else {\n            // Record the request.\n            uint64 requestId = requestCnt;\n            requestCnt++;\n            unrespondedCnt++;\n\n            bytes32 paramsHash = sha3(requestType, requestData);\n            requests[requestId].requester = msg.sender;\n            requests[requestId].fee = msg.value;\n            requests[requestId].callbackAddr = callbackAddr;\n            requests[requestId].callbackFID = callbackFID;\n            requests[requestId].paramsHash = paramsHash;\n\n            // Log the request for the Town Crier server to process.\n            RequestInfo(requestId, requestType, msg.sender, msg.value, callbackAddr, paramsHash, timestamp, requestData);\n            return requestId;\n        }\n    }\n\n    function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 respData) public {\n        if (msg.sender != SGX_ADDRESS",
        "debug": "calldata_TownCrier_4 + calldata_TownCrier_32 + 100: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_TownCrier_0: 0x58487bee00000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\n",
        "description": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "request(uint8,address,bytes4,uint256,bytes32[])",
        "lineno": 100,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 954,
        "code": "32[] requestData) public payable returns (int) {\n        if (externalCallFlag) {\n            throw;\n        }\n\n        if (killswitch) {\n            externalCallFlag = true;\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return newVersion;\n        }\n\n        if (msg.value < MIN_FEE) {\n            externalCallFlag = true;\n            // If the amount of ether sent by the requester is too little or \n            // too much, refund the requester and discard the request.\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return FAIL_FLAG;\n        } else {\n            // Record the request.\n            uint64 requestId = requestCnt;\n            requestCnt++;\n            unrespondedCnt++;\n\n            bytes32 paramsHash = sha3(requestType, requestData);\n            requests[requestId].requester = msg.sender;\n            requests[requestId].fee = msg.value;\n            requests[requestId].callbackAddr = callbackAddr;\n            requests[requestId].callbackFID = callbackFID;\n            requests[requestId].paramsHash = paramsHash;\n\n            // Log the request for the Town Crier server to process.\n            RequestInfo(requestId, requestType, msg.sender, msg.value, callbackAddr, paramsHash, timestamp, requestData);\n            return requestId;\n        }\n    }\n\n    function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 respData) public {\n        if (msg.sender != SGX_ADDRESS",
        "debug": "calldata_TownCrier_4 + calldata_TownCrier_32 + 100: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TownCrier_0: 0x58487bee00000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\n",
        "description": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "request(uint8,address,bytes4,uint256,bytes32[])",
        "lineno": 100,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 960,
        "code": "32[] requestData) public payable returns (int) {\n        if (externalCallFlag) {\n            throw;\n        }\n\n        if (killswitch) {\n            externalCallFlag = true;\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return newVersion;\n        }\n\n        if (msg.value < MIN_FEE) {\n            externalCallFlag = true;\n            // If the amount of ether sent by the requester is too little or \n            // too much, refund the requester and discard the request.\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return FAIL_FLAG;\n        } else {\n            // Record the request.\n            uint64 requestId = requestCnt;\n            requestCnt++;\n            unrespondedCnt++;\n\n            bytes32 paramsHash = sha3(requestType, requestData);\n            requests[requestId].requester = msg.sender;\n            requests[requestId].fee = msg.value;\n            requests[requestId].callbackAddr = callbackAddr;\n            requests[requestId].callbackFID = callbackFID;\n            requests[requestId].paramsHash = paramsHash;\n\n            // Log the request for the Town Crier server to process.\n            RequestInfo(requestId, requestType, msg.sender, msg.value, callbackAddr, paramsHash, timestamp, requestData);\n            return requestId;\n        }\n    }\n\n    function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 respData) public {\n        if (msg.sender != SGX_ADDRESS",
        "debug": "calldata_TownCrier_4 + calldata_TownCrier_32 + 100: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_TownCrier_0: 0x58487bee00000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\n",
        "description": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "request(uint8,address,bytes4,uint256,bytes32[])",
        "lineno": 100,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1982,
        "code": "e(newAddr);\n ",
        "debug": "calldata_TownCrier_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\nstorage_4: 0x0\ncaller: 0x0\ncalldata_TownCrier_0: 0x900f01000000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `upgrade(address)`.\nThe subtraction may result in a value < 0.",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "upgrade(address)",
        "lineno": 67,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 2621,
        "code": "    }\n    }\n\n    function request(uint8 requestT",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "withdraw()",
        "lineno": 97,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3101,
        "code": "  requests[requestId].fee = DELIVE",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "deliver(uint64,bytes32,uint64,bytes32)",
        "lineno": 168,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 3186,
        "code": "    // Either no",
        "debug": "storage_3: 0x0\nstorage_0 + 4 + 4*Concat(0, Extract(63, 0, calldata_TownCrier_4)): 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_TownCrier_4: 0xffffffffffffffff\ncaller: 0x18513702ccd928f2a3eb63d900adf03c9cc81593\ncalldata_TownCrier_0: 0x487a6e3200000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\nstorage_1 + 4 + 4*Concat(0, Extract(63, 0, calldata_TownCrier_4)): 0x1\ncalldata_TownCrier_32 + 4: 0x0\nstorage_3 + 4 + 4*Concat(0, Extract(63, 0, calldata_TownCrier_4)): 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `deliver(uint64,bytes32,uint64,bytes32)`.\nThe subtraction may result in a value < 0.",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "deliver(uint64,bytes32,uint64,bytes32)",
        "lineno": 172,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 3309,
        "code": "t for its delive",
        "debug": "storage_1 + 4 + 4*Concat(0, Extract(63, 0, calldata_TownCrier_4)): 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_3: 0x0\nstorage_0 + 4 + 4*Concat(0, Extract(63, 0, calldata_TownCrier_4)): 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_TownCrier_4: 0xffffffffffffffff\ncaller: 0x18513702ccd928f2a3eb63d900adf03c9cc81593\ncalldata_TownCrier_0: 0x487a6e3200000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\ncalldata_TownCrier_32 + 4: 0x0\nstorage_3 + 4 + 4*Concat(0, Extract(63, 0, calldata_TownCrier_4)): 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `deliver(uint64,bytes32,uint64,bytes32)`.\nThe subtraction may result in a value < 0.",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "deliver(uint64,bytes32,uint64,bytes32)",
        "lineno": 173,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 3435,
        "code": "D_LL_CALLS\n          ",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "deliver(uint64,bytes32,uint64,bytes32)",
        "lineno": 179,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 3588,
        "code": "or the callback function\n        DeliverInfo(requestId, f",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "deliver(uint64,bytes32,uint64,bytes32)",
        "lineno": 184,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 4599,
        "code": "questId].fee, 1);\n            return SUCCESS_FL",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "cancel(uint64)",
        "lineno": 215,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4640,
        "code": "ender, requests[requestI",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "cancel(uint64)",
        "lineno": 218,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 5418,
        "code": "false;\n            return newVersi",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "request(uint8,address,bytes4,uint256,bytes32[])",
        "lineno": 110,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5459,
        "code": "      externalCallFlag =",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "request(uint8,address,bytes4,uint256,bytes32[])",
        "lineno": 115,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 5555,
        "code": "        return FAIL_FLAG;\n        ",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "request(uint8,address,bytes4,uint256,bytes32[])",
        "lineno": 122,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5596,
        "code": "uint64 requestId = reque",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "request(uint8,address,bytes4,uint256,bytes32[])",
        "lineno": 125,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 5867,
        "code": "g.value;\n            requests[",
        "debug": "calldata_TownCrier_4 + calldata_TownCrier_32 + 100: 0x800000000000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\nstorage_1: 0x0\nstorage_3: 0x0\ncalldata_TownCrier_0: 0x58487bee00000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\n",
        "description": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "request(uint8,address,bytes4,uint256,bytes32[])",
        "lineno": 131,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6557,
        "code": "Id;\n        }\n    }\n\n    function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 respDa",
        "debug": "calldata_TownCrier_4 + calldata_TownCrier_32 + 100: 0x4000000000000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\nstorage_1: 0x0\nstorage_3: 0x0\ncalldata_TownCrier_0: 0x58487bee00000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\n",
        "description": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "request(uint8,address,bytes4,uint256,bytes32[])",
        "lineno": 138,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6737,
        "code": " public newVersion = 0;\n\n    /",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TownCrier_4: 0x10000000000000000\ncalldata_TownCrier_0: 0x81d12c5800000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol",
        "function": "_function_0x81d12c58",
        "lineno": 43,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}