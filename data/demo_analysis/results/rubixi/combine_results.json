{"contract": "rubixi", "sourceLanguage": "Solidity", "analysis": {"103": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "creator.send(feesToCollect)"}, "fullDescription": "In the function `collectPercentOfFees(uint256)` a non-zero amount of Ether is sent to an address taken from storage slot 5.\nThere is a check on storage index 5. This storage slot can be written to by calling the function `DynamicPyramid()`.\n\nThere is a check on storage index 5. This storage slot can be written to by calling the function `DynamicPyramid()`.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `fallback`.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function collectPercentOfFees(uint256). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability"}], "141": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "participants[payoutOrder]"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability"}], "85": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "creator.send(collectedFees)"}, "fullDescription": "In the function `collectPercentOfFees(uint256)` a non-zero amount of Ether is sent to an address taken from storage slot 5.\nThere is a check on storage index 5. This storage slot can be written to by calling the function `DynamicPyramid()`.\n\nThere is a check on storage index 5. This storage slot can be written to by calling the function `DynamicPyramid()`.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `fallback`.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function collectPercentOfFees(uint256). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability"}], "158": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "participants[orderInPyramid]"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability"}], "90": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "_amt *= 1 ether"}, "fullDescription": "A possible integer overflow exists in the function `collectFeesInEther(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "95": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "creator.send(_amt)"}, "fullDescription": "In the function `collectPercentOfFees(uint256)` a non-zero amount of Ether is sent to an address taken from storage slot 5.\nThere is a check on storage index 5. This storage slot can be written to by calling the function `DynamicPyramid()`.\n\nThere is a check on storage index 5. This storage slot can be written to by calling the function `DynamicPyramid()`.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `fallback`.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function collectPercentOfFees(uint256). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability"}], "74": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "participants[payoutOrder].etherAddress.send(payoutToSend)"}, "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3420\n", "name": "OtherVulnerability"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["slither", "oyente"], "fullDescription": "Rubixi.addPayout has external calls inside a loop:\n\t- participants[payoutOrder].etherAddress.send(payoutToSend) (/data/demo_analysis/source_code/rubixi.sol#74)\n", "name": "DenialServiceVulnerability"}], "59": [{"level": "warning", "tool": ["slither"], "fullDescription": "Rubixi.addPayout has external calls inside a loop:\n\t- participants[payoutOrder].etherAddress.send(payoutToSend) (/data/demo_analysis/source_code/rubixi.sol#74)\n", "name": "DenialServiceVulnerability"}], "135": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "130": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "153": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "125": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "159": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}]}, "listLine": [103, 141, 85, 158, 90, 95, 74, 59, 135, 130, 153, 125, 159], "rules": [{"id": "AccessControl_13", "fullDescription": {"text": "In the function `collectPercentOfFees(uint256)` a non-zero amount of Ether is sent to an address taken from storage slot 5.\nThere is a check on storage index 5. This storage slot can be written to by calling the function `DynamicPyramid()`.\n\nThere is a check on storage index 5. This storage slot can be written to by calling the function `DynamicPyramid()`.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `fallback`."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function collectPercentOfFees(uint256). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `collectFeesInEther(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3420\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "DenialService_3", "fullDescription": {"text": "Rubixi.addPayout has external calls inside a loop:\n\t- participants[payoutOrder].etherAddress.send(payoutToSend) (/data/demo_analysis/source_code/rubixi.sol#74)\n"}, "name": "DenialServiceVulnerability", "shortDescription": {"text": "calls-loop"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}]}