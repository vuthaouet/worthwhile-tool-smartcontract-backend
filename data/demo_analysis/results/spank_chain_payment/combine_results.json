{"contract": "spank_chain_payment", "sourceLanguage": "Solidity", "analysis": {"198": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "balances[_to] += _value"}, "fullDescription": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "189": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "balances[_to] += _value"}, "fullDescription": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "495": [{"level": "error", "tool": ["slither"], "fullDescription": "LedgerChannel.consensusCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#495-546) sends eth to arbitrary user\n\tDangerous calls:\n\t- Channels[_lcID].partyAddresses[0].transfer(_balances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#534)\n\t- Channels[_lcID].partyAddresses[1].transfer(_balances[1]) (/data/demo_analysis/source_code/spank_chain_payment.sol#535)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in LedgerChannel.byzantineCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#756-817):\n\tExternal calls:\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#803-806)\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#807-810)\n\tExternal calls sending eth:\n\t- channel.partyAddresses[0].transfer(ethbalanceA) (/data/demo_analysis/source_code/spank_chain_payment.sol#798)\n\t- channel.partyAddresses[1].transfer(ethbalanceI) (/data/demo_analysis/source_code/spank_chain_payment.sol#799)\n\tState variables written after the call(s):\n\t- numChannels (/data/demo_analysis/source_code/spank_chain_payment.sol#814)\n", "name": "ReentrancyVulnerability"}], "534": [{"level": "error", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].partyAddresses[0].transfer(_balances[0])"}, "fullDescription": "LedgerChannel.consensusCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#495-546) sends eth to arbitrary user\n\tDangerous calls:\n\t- Channels[_lcID].partyAddresses[0].transfer(_balances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#534)\n\t- Channels[_lcID].partyAddresses[1].transfer(_balances[1]) (/data/demo_analysis/source_code/spank_chain_payment.sol#535)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in LedgerChannel.byzantineCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#756-817):\n\tExternal calls:\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#803-806)\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#807-810)\n\tExternal calls sending eth:\n\t- channel.partyAddresses[0].transfer(ethbalanceA) (/data/demo_analysis/source_code/spank_chain_payment.sol#798)\n\t- channel.partyAddresses[1].transfer(ethbalanceI) (/data/demo_analysis/source_code/spank_chain_payment.sol#799)\n\tState variables written after the call(s):\n\t- numChannels (/data/demo_analysis/source_code/spank_chain_payment.sol#814)\n", "name": "ReentrancyVulnerability"}], "535": [{"level": "error", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].partyAddresses[1].transfer(_balances[1])"}, "fullDescription": "LedgerChannel.consensusCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#495-546) sends eth to arbitrary user\n\tDangerous calls:\n\t- Channels[_lcID].partyAddresses[0].transfer(_balances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#534)\n\t- Channels[_lcID].partyAddresses[1].transfer(_balances[1]) (/data/demo_analysis/source_code/spank_chain_payment.sol#535)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in LedgerChannel.byzantineCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#756-817):\n\tExternal calls:\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#803-806)\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#807-810)\n\tExternal calls sending eth:\n\t- channel.partyAddresses[0].transfer(ethbalanceA) (/data/demo_analysis/source_code/spank_chain_payment.sol#798)\n\t- channel.partyAddresses[1].transfer(ethbalanceI) (/data/demo_analysis/source_code/spank_chain_payment.sol#799)\n\tState variables written after the call(s):\n\t- numChannels (/data/demo_analysis/source_code/spank_chain_payment.sol#814)\n", "name": "ReentrancyVulnerability"}], "420": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "430": [{"level": "error", "tool": ["slither"], "snippet": {"text": "require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure)"}, "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability"}], "426": [{"level": "error", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0])"}, "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability"}], "436": [{"level": "error", "tool": ["slither"], "snippet": {"text": "delete Channels[_lcID]"}, "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability"}], "756": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability"}], "803": [{"level": "error", "tool": ["slither"], "snippet": {"text": "require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure)"}, "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability"}], "807": [{"level": "error", "tool": ["slither"], "snippet": {"text": "require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure)"}, "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability"}], "798": [{"level": "error", "tool": ["slither"], "snippet": {"text": "channel.partyAddresses[0].transfer(ethbalanceA)"}, "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability"}], "799": [{"level": "error", "tool": ["slither"], "snippet": {"text": "channel.partyAddresses[1].transfer(ethbalanceI)"}, "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability"}], "813": [{"level": "error", "tool": ["slither"], "snippet": {"text": "channel.isOpen = false"}, "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability"}], "421": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "819": [{"level": "warning", "tool": ["slither"], "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "833": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "cursor == _root"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "725": [{"level": "warning", "tool": ["slither"], "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "737": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "virtualChannels[_vcID].partyA == Channels[_lcID].partyAddresses[0]"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "743": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "virtualChannels[_vcID].partyB == Channels[_lcID].partyAddresses[0]"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "506": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(Channels[_lcID].isOpen == true)"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "509": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(totalEthDeposit == _balances[0] + _balances[1])"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "510": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(totalTokenDeposit == _balances[2] + _balances[3])"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "528": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(Channels[_lcID].partyAddresses[0] == ECTools.recoverSigner(_state,_sigA))"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "529": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(Channels[_lcID].partyAddresses[1] == ECTools.recoverSigner(_state,_sigI))"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "380": [{"level": "warning", "tool": ["slither"], "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability"}], "390": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool,string)(Channels[_lcID].partyAddresses[0] == address(0),Channel has already been created.)"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "465": [{"level": "warning", "tool": ["slither"], "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability"}], "466": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool,string)(Channels[_lcID].isOpen == true,Tried adding funds to a closed channel)"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "467": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(recipient == Channels[_lcID].partyAddresses[0] || recipient == Channels[_lcID].partyAddresses[1])"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "471": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].partyAddresses[0] == recipient"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "481": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].partyAddresses[1] == recipient"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "615": [{"level": "warning", "tool": ["slither"], "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "643": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(_isContained(_initState,_proof,Channels[_lcID].VCrootHash) == true)"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "439": [{"level": "warning", "tool": ["slither"], "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability"}], "441": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(Channels[_lcID].isOpen == false)"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "442": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(msg.sender == Channels[_lcID].partyAddresses[1])"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability"}], "406": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure)"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability"}], "407": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].erc20Balances[0] = _balances[1]"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability"}], "410": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].sequence = 0"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability"}], "414": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].LCopenTimeout = now + _confirmTime"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability"}], "411": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].confirmTime = _confirmTime"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability"}], "415": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].initialDeposit = _balances"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability"}], "473": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balance),deposit: token transfer failure)"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability"}], "487": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].ethBalances[3] += msg.value"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability"}], "474": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].erc20Balances[2] += _balance"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability"}], "483": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balance),deposit: token transfer failure)"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability"}], "484": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].erc20Balances[3] += _balance"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability"}], "449": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),joinChannel: token transfer failure)"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability"}], "456": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].isOpen = true"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability"}], "454": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].initialDeposit[1] += _balances[1]"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability"}], "450": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].erc20Balances[1] = _balances[1]"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability"}], "453": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].initialDeposit[0] += _balances[0]"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability"}], "814": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "numChannels --"}, "fullDescription": "Reentrancy in LedgerChannel.byzantineCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#756-817):\n\tExternal calls:\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#803-806)\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#807-810)\n\tExternal calls sending eth:\n\t- channel.partyAddresses[0].transfer(ethbalanceA) (/data/demo_analysis/source_code/spank_chain_payment.sol#798)\n\t- channel.partyAddresses[1].transfer(ethbalanceI) (/data/demo_analysis/source_code/spank_chain_payment.sol#799)\n\tState variables written after the call(s):\n\t- numChannels (/data/demo_analysis/source_code/spank_chain_payment.sol#814)\n", "name": "ReentrancyVulnerability"}], "539": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],_balances[2]),happyCloseChannel: token transfer failure)"}, "fullDescription": "Reentrancy in LedgerChannel.byzantineCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#756-817):\n\tExternal calls:\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#803-806)\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#807-810)\n\tExternal calls sending eth:\n\t- channel.partyAddresses[0].transfer(ethbalanceA) (/data/demo_analysis/source_code/spank_chain_payment.sol#798)\n\t- channel.partyAddresses[1].transfer(ethbalanceI) (/data/demo_analysis/source_code/spank_chain_payment.sol#799)\n\tState variables written after the call(s):\n\t- numChannels (/data/demo_analysis/source_code/spank_chain_payment.sol#814)\n", "name": "ReentrancyVulnerability"}], "540": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[1],_balances[3]),happyCloseChannel: token transfer failure)"}, "fullDescription": "Reentrancy in LedgerChannel.byzantineCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#756-817):\n\tExternal calls:\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#803-806)\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#807-810)\n\tExternal calls sending eth:\n\t- channel.partyAddresses[0].transfer(ethbalanceA) (/data/demo_analysis/source_code/spank_chain_payment.sol#798)\n\t- channel.partyAddresses[1].transfer(ethbalanceI) (/data/demo_analysis/source_code/spank_chain_payment.sol#799)\n\tState variables written after the call(s):\n\t- numChannels (/data/demo_analysis/source_code/spank_chain_payment.sol#814)\n", "name": "ReentrancyVulnerability"}], "543": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "numChannels --"}, "fullDescription": "Reentrancy in LedgerChannel.byzantineCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#756-817):\n\tExternal calls:\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#803-806)\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#807-810)\n\tExternal calls sending eth:\n\t- channel.partyAddresses[0].transfer(ethbalanceA) (/data/demo_analysis/source_code/spank_chain_payment.sol#798)\n\t- channel.partyAddresses[1].transfer(ethbalanceI) (/data/demo_analysis/source_code/spank_chain_payment.sol#799)\n\tState variables written after the call(s):\n\t- numChannels (/data/demo_analysis/source_code/spank_chain_payment.sol#814)\n", "name": "ReentrancyVulnerability"}], "457": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "numChannels ++"}, "fullDescription": "Reentrancy in LedgerChannel.byzantineCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#756-817):\n\tExternal calls:\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#803-806)\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#807-810)\n\tExternal calls sending eth:\n\t- channel.partyAddresses[0].transfer(ethbalanceA) (/data/demo_analysis/source_code/spank_chain_payment.sol#798)\n\t- channel.partyAddresses[1].transfer(ethbalanceI) (/data/demo_analysis/source_code/spank_chain_payment.sol#799)\n\tState variables written after the call(s):\n\t- numChannels (/data/demo_analysis/source_code/spank_chain_payment.sol#814)\n", "name": "ReentrancyVulnerability"}], "252": [{"level": "note", "tool": ["slither"], "fullDescription": "Low level call in HumanStandardToken.approveAndCall (/data/demo_analysis/source_code/spank_chain_payment.sol#252-261):\n\t-require(bool)(_spender.call(bytes4(bytes32(keccak256()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)) /data/demo_analysis/source_code/spank_chain_payment.sol#259\n", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability"}], "259": [{"level": "note", "tool": ["slither"], "snippet": {"text": "require(bool)(_spender.call(bytes4(bytes32(keccak256()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData))"}, "fullDescription": "Low level call in HumanStandardToken.approveAndCall (/data/demo_analysis/source_code/spank_chain_payment.sol#252-261):\n\t-require(bool)(_spender.call(bytes4(bytes32(keccak256()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)) /data/demo_analysis/source_code/spank_chain_payment.sol#259\n", "name": "UncheckedLowCallsVulnerability"}], "62": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "91": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "116": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "139": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "98": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "167": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "233": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "236": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "235": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}]}, "listLine": [198, 189, 495, 534, 535, 420, 430, 426, 436, 756, 803, 807, 798, 799, 813, 421, 819, 833, 725, 737, 743, 506, 509, 510, 528, 529, 380, 390, 465, 466, 467, 471, 481, 615, 643, 439, 441, 442, 406, 407, 410, 414, 411, 415, 473, 487, 474, 483, 484, 449, 456, 454, 450, 453, 814, 539, 540, 543, 457, 252, 259, 62, 91, 116, 139, 98, 167, 233, 236, 235], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "AccessControl_19", "fullDescription": {"text": "LedgerChannel.consensusCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#495-546) sends eth to arbitrary user\n\tDangerous calls:\n\t- Channels[_lcID].partyAddresses[0].transfer(_balances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#534)\n\t- Channels[_lcID].partyAddresses[1].transfer(_balances[1]) (/data/demo_analysis/source_code/spank_chain_payment.sol#535)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "Other_11", "fullDescription": {"text": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "incorrect-equality"}}, {"id": "Reentrancy_11", "fullDescription": {"text": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-no-eth"}}, {"id": "Reentrancy_9", "fullDescription": {"text": "Reentrancy in LedgerChannel.byzantineCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#756-817):\n\tExternal calls:\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#803-806)\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#807-810)\n\tExternal calls sending eth:\n\t- channel.partyAddresses[0].transfer(ethbalanceA) (/data/demo_analysis/source_code/spank_chain_payment.sol#798)\n\t- channel.partyAddresses[1].transfer(ethbalanceI) (/data/demo_analysis/source_code/spank_chain_payment.sol#799)\n\tState variables written after the call(s):\n\t- numChannels (/data/demo_analysis/source_code/spank_chain_payment.sol#814)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-benign"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in HumanStandardToken.approveAndCall (/data/demo_analysis/source_code/spank_chain_payment.sol#252-261):\n\t-require(bool)(_spender.call(bytes4(bytes32(keccak256()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)) /data/demo_analysis/source_code/spank_chain_payment.sol#259\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}]}