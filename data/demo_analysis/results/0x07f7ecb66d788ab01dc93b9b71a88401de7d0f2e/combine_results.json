{"contract": "0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e", "sourceLanguage": "Solidity", "analysis": {"33": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "\n    modi"}, "fullDescription": "Function wager() retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "name": "AccessControlVulnerability"}], "156": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "  {\n                payout(msg.sender);\n            }\n            else \n            "}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability"}], "297": [{"level": "warning", "tool": ["mythril"], "snippet": {}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}], "222": [{"level": "note", "tool": ["mythril", "slither"], "snippet": {"text": " \n    public \n    view \n    returns (uint256)\n    {\n   "}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "error", "tool": ["slither"], "fullDescription": "PoCGame.payout (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#191-201) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.transfer(ethToTransfer) (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#200)\n", "name": "AccessControlVulnerability"}], "227": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": " address(this).balance"}, "fullDescription": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "name": "ReentrancyVulnerability"}], "208": [{"level": "note", "tool": ["mythril", "slither"], "snippet": {"text": "  */\n    function loseWager(uint256 amount) \n    intern"}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}], "212": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "       // <yes> <repor"}, "fullDescription": "A possible integer overflow exists in the function `donate()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril", "slither"], "fullDescription": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "name": "ReentrancyVulnerability"}], "191": [{"level": "error", "tool": ["slither"], "fullDescription": "PoCGame.payout (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#191-201) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.transfer(ethToTransfer) (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#200)\n", "name": "AccessControlVulnerability"}], "200": [{"level": "error", "tool": ["slither"], "snippet": {"text": "winner.transfer(ethToTransfer)"}, "fullDescription": "PoCGame.payout (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#191-201) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.transfer(ethToTransfer) (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#200)\n", "name": "AccessControlVulnerability"}], "215": [{"level": "error", "tool": ["slither"], "fullDescription": "PoCGame.payout (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#191-201) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.transfer(ethToTransfer) (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#200)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in PoCGame.donateToWhale (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#202-213):\n\tExternal calls:\n\t- whale.call.value(amount)(bytes4(keccak256()(donate()))) (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#208-210)\n\tState variables written after the call(s):\n\t- totalDonated (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#212)\n", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in PoCGame.donateToWhale (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#202-213):\n\t-whale.call.value(amount)(bytes4(keccak256()(donate()))) /data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#208-210\n", "name": "UncheckedLowCallsVulnerability"}], "147": [{"level": "warning", "tool": ["slither"], "fullDescription": "PoCGame.play (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#147-179) uses a dangerous strict equality:\n\t- winningNumber == difficulty / 2\n", "name": "OtherVulnerability"}], "161": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "winningNumber == difficulty / 2"}, "fullDescription": "PoCGame.play (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#147-179) uses a dangerous strict equality:\n\t- winningNumber == difficulty / 2\n", "name": "OtherVulnerability"}], "202": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in PoCGame.donateToWhale (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#202-213):\n\tExternal calls:\n\t- whale.call.value(amount)(bytes4(keccak256()(donate()))) (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#208-210)\n\tState variables written after the call(s):\n\t- totalDonated (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#212)\n", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in PoCGame.donateToWhale (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#202-213):\n\t-whale.call.value(amount)(bytes4(keccak256()(donate()))) /data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#208-210\n", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability"}], "153": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "201": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "DenialServiceVulnerability"}], "213": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "DenialServiceVulnerability"}]}, "listLine": [33, 156, 297, 222, 227, 208, 212, 191, 200, 215, 147, 161, 202, 153, 201, 213], "rules": [{"id": "AccessControl_15", "fullDescription": {"text": "Function wager() retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Use of tx.origin"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Reentrancy_4", "fullDescription": {"text": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "State change after external call"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `donate()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "AccessControl_19", "fullDescription": {"text": "PoCGame.payout (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#191-201) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.transfer(ethToTransfer) (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#200)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "Other_11", "fullDescription": {"text": "PoCGame.play (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#147-179) uses a dangerous strict equality:\n\t- winningNumber == difficulty / 2\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "incorrect-equality"}}, {"id": "Reentrancy_9", "fullDescription": {"text": "Reentrancy in PoCGame.donateToWhale (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#202-213):\n\tExternal calls:\n\t- whale.call.value(amount)(bytes4(keccak256()(donate()))) (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#208-210)\n\tState variables written after the call(s):\n\t- totalDonated (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#212)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-benign"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in PoCGame.donateToWhale (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#202-213):\n\t-whale.call.value(amount)(bytes4(keccak256()(donate()))) /data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#208-210\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}]}