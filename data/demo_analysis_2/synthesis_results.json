{"integer_overflow_benign_1": {"contract": "integer_overflow_benign_1", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 1, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}], "listLine": [17], "analysis": {"17": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 1, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "BECToken": {"contract": "BECToken", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 4, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}], "listLine": [33, 291, 289, 290, 261], "analysis": {"33": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "a + b"}, "fullDescription": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "291": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "289": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "290": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "261": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 5}, "count_leve_vulnerabilities": {"warning": 5, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "etherpot_lotto": {"contract": "etherpot_lotto", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 9, "list_vulnerabilities": ["AccessControlVulnerability", "DenialServiceVulnerability", "UncheckedLowCallsVulnerability", "ArithmeticVulnerability", "OtherVulnerability"], "rules": [{"id": "AccessControl_19", "fullDescription": {"text": "Lotto.cash (/data/demo_analysis_2/source_code/etherpot_lotto.sol#89-113) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.send(subpot) (/data/demo_analysis_2/source_code/etherpot_lotto.sol#109)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `getBuyers(uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [89, 109, 141, 119, 120, 57, 73, 124, 77, 79, 43, 128], "analysis": {"89": [{"level": "error", "tool": ["slither"], "fullDescription": "Lotto.cash (/data/demo_analysis_2/source_code/etherpot_lotto.sol#89-113) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.send(subpot) (/data/demo_analysis_2/source_code/etherpot_lotto.sol#109)\n", "name": "AccessControlVulnerability"}], "109": [{"level": "error", "tool": ["slither"], "snippet": {"text": "winner.send(subpot)"}, "fullDescription": "Lotto.cash (/data/demo_analysis_2/source_code/etherpot_lotto.sol#89-113) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.send(subpot) (/data/demo_analysis_2/source_code/etherpot_lotto.sol#109)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "141": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "msg.sender.send(msg.value-value)"}, "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "119": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "function getBuyers(uint roundIndex,address buyer) constant returns (address[]){\n         return rounds[roundIndex].buyers;\n     }"}, "fullDescription": "A possible integer overflow exists in the function `getBuyers(uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "120": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "return rounds[roundIndex].buyers"}, "fullDescription": "A possible integer overflow exists in the function `getBuyers(uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "57": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "decisionBlockHash%rounds[roundIndex].ticketsCount"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "73": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "roundIndex+1"}, "fullDescription": "A possible integer overflow exists in the function `getBuyers(uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "124": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "77": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "79": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "43": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "128": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 2, "DenialServiceVulnerability": 2, "UncheckedLowCallsVulnerability": 1, "ArithmeticVulnerability": 8, "OtherVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 10, "error": 2, "note": 2, "none": 0}, "false_positives": 0}, "crypto_roulette": {"contract": "crypto_roulette", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 5, "list_vulnerabilities": ["AccessControlVulnerability", "OtherVulnerability", "ArithmeticVulnerability"], "rules": [{"id": "AccessControl_19", "fullDescription": {"text": "CryptoRoulette.play (/data/demo_analysis_2/source_code/crypto_roulette.sol#37-52) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis_2/source_code/crypto_roulette.sol#47)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "Other_15", "fullDescription": {"text": "game in CryptoRoulette.play (/data/demo_analysis_2/source_code/crypto_roulette.sol#40) is a storage variable never initialiazed\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "uninitialized-storage"}}, {"id": "Other_11", "fullDescription": {"text": "CryptoRoulette.play (/data/demo_analysis_2/source_code/crypto_roulette.sol#37-52) uses a dangerous strict equality:\n\t- number == secretNumber\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "incorrect-equality"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `kill()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "Other_20", "name": "OtherVulnerability", "shortDescription": {"text": "uninitialised_struct"}}], "listLine": [37, 47, 40, 45, 25, 55, 2, 41], "analysis": {"37": [{"level": "error", "tool": ["slither"], "fullDescription": "CryptoRoulette.play (/data/demo_analysis_2/source_code/crypto_roulette.sol#37-52) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis_2/source_code/crypto_roulette.sol#47)\n", "name": "AccessControlVulnerability"}, {"level": "error", "tool": ["slither"], "fullDescription": "game in CryptoRoulette.play (/data/demo_analysis_2/source_code/crypto_roulette.sol#40) is a storage variable never initialiazed\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "47": [{"level": "error", "tool": ["slither"], "snippet": {"text": "msg.sender.transfer(this.balance)"}, "fullDescription": "CryptoRoulette.play (/data/demo_analysis_2/source_code/crypto_roulette.sol#37-52) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis_2/source_code/crypto_roulette.sol#47)\n", "name": "AccessControlVulnerability"}], "40": [{"level": "error", "tool": ["slither"], "fullDescription": "game in CryptoRoulette.play (/data/demo_analysis_2/source_code/crypto_roulette.sol#40) is a storage variable never initialiazed\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "45": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "number == secretNumber"}, "fullDescription": "CryptoRoulette.play (/data/demo_analysis_2/source_code/crypto_roulette.sol#37-52) uses a dangerous strict equality:\n\t- number == secretNumber\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "25": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "Game[] public gamesPlayed"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "55": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "lastPlayed + 1 days"}, "fullDescription": "A possible integer overflow exists in the function `kill()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "2": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "github.com/thec00n"}, "fullDescription": "A possible integer overflow exists in the function `kill()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "42": [], "41": [{"level": "warning", "tool": ["honeybadger"], "snippet": {}, "name": "OtherVulnerability"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 2, "OtherVulnerability": 4, "ArithmeticVulnerability": 3}, "count_leve_vulnerabilities": {"warning": 4, "error": 4, "note": 1, "none": 0}, "false_positives": 1}, "lottopollo": {"contract": "lottopollo", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 5, "list_vulnerabilities": ["OtherVulnerability", "UncheckedLowCallsVulnerability", "DenialServiceVulnerability", "AccessControlVulnerability"], "rules": [{"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 417\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "AccessControl_19", "fullDescription": {"text": "lottopollo.payOut (/data/demo_analysis_2/source_code/lottopollo.sol#11-24) sends eth to arbitrary user\n\tDangerous calls:\n\t- leader.send(this.balance) (/data/demo_analysis_2/source_code/lottopollo.sol#17)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [14, 17, 11], "analysis": {"14": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.sender.send( msg.value )"}, "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 417\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "17": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "leader.send( this.balance )"}, "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "error", "tool": ["slither"], "fullDescription": "lottopollo.payOut (/data/demo_analysis_2/source_code/lottopollo.sol#11-24) sends eth to arbitrary user\n\tDangerous calls:\n\t- leader.send(this.balance) (/data/demo_analysis_2/source_code/lottopollo.sol#17)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "11": [{"level": "error", "tool": ["slither"], "fullDescription": "lottopollo.payOut (/data/demo_analysis_2/source_code/lottopollo.sol#11-24) sends eth to arbitrary user\n\tDangerous calls:\n\t- leader.send(this.balance) (/data/demo_analysis_2/source_code/lottopollo.sol#17)\n", "name": "AccessControlVulnerability"}]}, "count_vulnerabilities": {"OtherVulnerability": 1, "UncheckedLowCallsVulnerability": 2, "DenialServiceVulnerability": 2, "AccessControlVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 3, "error": 2, "note": 2, "none": 0}, "false_positives": 0}, "integer_overflow_1": {"contract": "integer_overflow_1", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `add(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}], "listLine": [14], "analysis": {"14": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "sellerBalance += value"}, "fullDescription": "A possible integer overflow exists in the function `add(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 1, "error": 0, "note": 0, "none": 0}, "false_positives": 0}}