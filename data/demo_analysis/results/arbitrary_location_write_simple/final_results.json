{"contract": "arbitrary_location_write_simple", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_5", "fullDescription": {"text": "A possible integer underflow exists in the function `PopBonusCode()`.\nThe subtraction may result in a value < 0."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `PushBonusCode(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}], "listLine": [28, 2, 9], "analysis": {"28": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "bonusCodes.length--"}, "fullDescription": "A possible integer underflow exists in the function `PopBonusCode()`.\nThe subtraction may result in a value < 0.", "name": "ArithmeticVulnerability"}], "2": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "smartcontractsecur"}, "fullDescription": "A possible integer overflow exists in the function `PushBonusCode(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "9": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "contract Wallet {\n     uint[] private bonusCodes;\n     address private owner;\n\n     constructor() public {\n         bonusCodes = new uint[](0);\n         owner = msg.sender;\n     }\n\n     function () public payable {\n     }\n\n     function PushBonusCode(uint c) public {\n         bonusCodes.push(c);\n     }\n\n     function PopBonusCode() public {\n         // <yes> <report> ACCESS_CONTROL\n         require(0 <= bonusCodes.length); // this condition is always true since array lengths are unsigned\n         bonusCodes.length--; // an underflow can be caused here\n     }\n\n     function UpdateBonusCodeAt(uint idx, uint c) public {\n         require(idx < bonusCodes.length);\n         bonusCodes[idx] = c; // write to any index less than bonusCodes.length\n     }\n\n     function Destroy() public {\n         require(msg.sender == owner);\n         selfdestruct(msg.sender);\n     }\n }"}, "fullDescription": "A possible integer overflow exists in the function `PushBonusCode(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `PushBonusCode(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 4}, "count_leve_vulnerabilities": {"warning": 4, "error": 0, "note": 0, "none": 0}, "false_positives": 0}