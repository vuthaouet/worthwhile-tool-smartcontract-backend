{"contract": "0x7a8721a9d64c74da899424c1b52acbf58ddc9782", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 5, "list_vulnerabilities": ["AccessControlVulnerability", "ReentrancyVulnerability", "OtherVulnerability", "UncheckedLowCallsVulnerability", "FrontRunningVulnerability", "ArithmeticVulnerability"], "rules": [{"id": "AccessControl_15", "fullDescription": {"text": "Function setLog(address) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Use of tx.origin"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1142\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function CashOut(uint256). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `Deposit()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in PrivateDeposit.CashOut (/data/honeyswap-farm2/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#49-64):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/honeyswap-farm2/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#54-60)\n\tState variables written after the call(s):\n\t- balances (/data/honeyswap-farm2/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#55)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in PrivateDeposit.CashOut (/data/honeyswap-farm2/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#49-64):\n\t-msg.sender.call.value(_am)() /data/honeyswap-farm2/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#54-60\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Reentrancy_13", "name": "ReentrancyVulnerability", "shortDescription": {"text": "straw_man_contract"}}], "listLine": [19, 54, 56, 43, 49, 75, 79, 52], "analysis": {"19": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": ");\n      "}, "fullDescription": "Function setLog(address) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "name": "AccessControlVulnerability"}], "54": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "         balances[msg.sender"}, "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1142\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in PrivateDeposit.CashOut (/data/honeyswap-farm2/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#49-64):\n\t-msg.sender.call.value(_am)() /data/honeyswap-farm2/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#54-60\n", "name": "UncheckedLowCallsVulnerability"}], "56": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "        }\n        }\n    }\n    \n    function() pu"}, "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function CashOut(uint256). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "43": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "    TransferLog.AddMessage(msg."}, "fullDescription": "A possible integer overflow exists in the function `Deposit()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function CashOut(uint256). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "49": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in PrivateDeposit.CashOut (/data/honeyswap-farm2/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#49-64):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/honeyswap-farm2/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#54-60)\n\tState variables written after the call(s):\n\t- balances (/data/honeyswap-farm2/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#55)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in PrivateDeposit.CashOut (/data/honeyswap-farm2/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#49-64):\n\t-msg.sender.call.value(_am)() /data/honeyswap-farm2/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#54-60\n", "name": "UncheckedLowCallsVulnerability"}], "55": [], "75": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "79": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "52": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ReentrancyVulnerability"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 1, "ReentrancyVulnerability": 5, "OtherVulnerability": 1, "UncheckedLowCallsVulnerability": 2, "FrontRunningVulnerability": 2, "ArithmeticVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 10, "error": 1, "note": 2, "none": 0}, "false_positives": 1}