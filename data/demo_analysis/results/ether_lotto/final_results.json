{"contract": "ether_lotto", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 7, "list_vulnerabilities": ["OtherVulnerability", "ArithmeticVulnerability", "AccessControlVulnerability", "FrontRunningVulnerability", "TimeManipulationVulnerability"], "rules": [{"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `play()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_7", "fullDescription": {"text": "In the function `play()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Dependence on predictable environment variable"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 511\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function play(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "AccessControl_19", "fullDescription": {"text": "EtherLotto.play (/data/demo_analysis/source_code/ether_lotto.sol#33-57) sends eth to arbitrary user\n\tDangerous calls:\n\t- bank.transfer(FEE_AMOUNT) (/data/demo_analysis/source_code/ether_lotto.sol#49)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "Other_11", "fullDescription": {"text": "EtherLotto.play (/data/demo_analysis/source_code/ether_lotto.sol#33-57) uses a dangerous strict equality:\n\t- random == 0\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "incorrect-equality"}}, {"id": "TimeManipulation_4", "fullDescription": {"text": "EtherLotto.play (/data/demo_analysis/source_code/ether_lotto.sol#33-57) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- random == 0 (/data/demo_analysis/source_code/ether_lotto.sol#46-56)\n"}, "name": "TimeManipulationVulnerability", "shortDescription": {"text": "timestamp"}}], "listLine": [36, 39, 49, 52, 33, 46], "analysis": {"36": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "assert(msg.value == TICKET_AMOUNT)"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "39": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "pot += msg.value"}, "fullDescription": "A possible integer overflow exists in the function `play()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "49": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "bank.transfer(FEE_AMOUNT)"}, "fullDescription": "In the function `play()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "error", "tool": ["slither"], "fullDescription": "EtherLotto.play (/data/demo_analysis/source_code/ether_lotto.sol#33-57) sends eth to arbitrary user\n\tDangerous calls:\n\t- bank.transfer(FEE_AMOUNT) (/data/demo_analysis/source_code/ether_lotto.sol#49)\n", "name": "AccessControlVulnerability"}], "52": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.sender.transfer(pot - FEE_AMOUNT)"}, "fullDescription": "A possible transaction order independence vulnerability exists in function play(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "33": [{"level": "error", "tool": ["slither"], "fullDescription": "EtherLotto.play (/data/demo_analysis/source_code/ether_lotto.sol#33-57) sends eth to arbitrary user\n\tDangerous calls:\n\t- bank.transfer(FEE_AMOUNT) (/data/demo_analysis/source_code/ether_lotto.sol#49)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "EtherLotto.play (/data/demo_analysis/source_code/ether_lotto.sol#33-57) uses a dangerous strict equality:\n\t- random == 0\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["slither"], "fullDescription": "EtherLotto.play (/data/demo_analysis/source_code/ether_lotto.sol#33-57) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- random == 0 (/data/demo_analysis/source_code/ether_lotto.sol#46-56)\n", "name": "TimeManipulationVulnerability", "flag": "risk of false positives"}], "46": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "random == 0"}, "fullDescription": "EtherLotto.play (/data/demo_analysis/source_code/ether_lotto.sol#33-57) uses a dangerous strict equality:\n\t- random == 0\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["slither"], "fullDescription": "EtherLotto.play (/data/demo_analysis/source_code/ether_lotto.sol#33-57) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- random == 0 (/data/demo_analysis/source_code/ether_lotto.sol#46-56)\n", "name": "TimeManipulationVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"OtherVulnerability": 4, "ArithmeticVulnerability": 1, "AccessControlVulnerability": 2, "FrontRunningVulnerability": 1, "TimeManipulationVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 7, "error": 2, "note": 1, "none": 0}, "false_positives": 0}