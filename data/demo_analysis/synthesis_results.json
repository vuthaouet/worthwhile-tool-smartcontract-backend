{"reentrance": {"contract": "reentrance", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 2, "list_vulnerabilities": ["ArithmeticVulnerability", "ReentrancyVulnerability", "UncheckedLowCallsVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Reentrancy_4", "fullDescription": {"text": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "State change after external call"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in Reentrance.withdraw (/data/demo_analysis/source_code/reentrance.sol#21-29):\n\tExternal calls:\n\t- msg.sender.call.value(_amount)() (/data/demo_analysis/source_code/reentrance.sol#24-26)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/reentrance.sol#27)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in Reentrance.withdraw (/data/demo_analysis/source_code/reentrance.sol#21-29):\n\t-msg.sender.call.value(_amount)() /data/demo_analysis/source_code/reentrance.sol#24-26\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}], "listLine": [14, 24, 27, 21], "analysis": {"14": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "balances[_to] += msg.value"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "24": [{"level": "warning", "tool": ["mythril", "oyente", "slither"], "snippet": {"text": "msg.sender.call.value(_amount)()"}, "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "27": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "balances[msg.sender] -= _amount"}, "fullDescription": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "name": "ReentrancyVulnerability"}], "21": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in Reentrance.withdraw (/data/demo_analysis/source_code/reentrance.sol#21-29):\n\tExternal calls:\n\t- msg.sender.call.value(_amount)() (/data/demo_analysis/source_code/reentrance.sol#24-26)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/reentrance.sol#27)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Reentrance.withdraw (/data/demo_analysis/source_code/reentrance.sol#21-29):\n\t-msg.sender.call.value(_amount)() /data/demo_analysis/source_code/reentrance.sol#24-26\n", "name": "UncheckedLowCallsVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1, "ReentrancyVulnerability": 3, "UncheckedLowCallsVulnerability": 2, "DenialServiceVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 4, "error": 1, "note": 2, "none": 0}, "false_positives": 0}, "etherbank": {"contract": "etherbank", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 1, "list_vulnerabilities": ["AccessControlVulnerability", "ReentrancyVulnerability", "UncheckedLowCallsVulnerability"], "rules": [{"id": "AccessControl_13", "fullDescription": {"text": "In the function `withdrawBalance()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Reentrancy_4", "fullDescription": {"text": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "State change after external call"}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in EtherBank.withdrawBalance (/data/demo_analysis/source_code/etherbank.sol#18-23):\n\tExternal calls:\n\t- ! (msg.sender.call.value(amountToWithdraw)()) (/data/demo_analysis/source_code/etherbank.sol#21)\n\tState variables written after the call(s):\n\t- userBalances (/data/demo_analysis/source_code/etherbank.sol#22)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in EtherBank.withdrawBalance (/data/demo_analysis/source_code/etherbank.sol#18-23):\n\t-! (msg.sender.call.value(amountToWithdraw)()) /data/demo_analysis/source_code/etherbank.sol#21\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}], "listLine": [21, 22, 18], "analysis": {"21": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.sender.call.value(amountToWithdraw)()"}, "fullDescription": "In the function `withdrawBalance()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril", "oyente", "slither"], "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in EtherBank.withdrawBalance (/data/demo_analysis/source_code/etherbank.sol#18-23):\n\t-! (msg.sender.call.value(amountToWithdraw)()) /data/demo_analysis/source_code/etherbank.sol#21\n", "name": "UncheckedLowCallsVulnerability"}], "22": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "userBalances[msg.sender] = 0"}, "fullDescription": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "name": "ReentrancyVulnerability"}], "18": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in EtherBank.withdrawBalance (/data/demo_analysis/source_code/etherbank.sol#18-23):\n\tExternal calls:\n\t- ! (msg.sender.call.value(amountToWithdraw)()) (/data/demo_analysis/source_code/etherbank.sol#21)\n\tState variables written after the call(s):\n\t- userBalances (/data/demo_analysis/source_code/etherbank.sol#22)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in EtherBank.withdrawBalance (/data/demo_analysis/source_code/etherbank.sol#18-23):\n\t-! (msg.sender.call.value(amountToWithdraw)()) /data/demo_analysis/source_code/etherbank.sol#21\n", "name": "UncheckedLowCallsVulnerability"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 1, "ReentrancyVulnerability": 3, "UncheckedLowCallsVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 3, "error": 1, "note": 2, "none": 0}, "false_positives": 0}, "reentrancy_dao": {"contract": "reentrancy_dao", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 2, "list_vulnerabilities": ["ArithmeticVulnerability", "ReentrancyVulnerability", "UncheckedLowCallsVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "Arithmetic_5", "fullDescription": {"text": "A possible integer underflow exists in the function `withdrawAll()`.\nThe subtraction may result in a value < 0."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Reentrancy_4", "fullDescription": {"text": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "State change after external call"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `deposit()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in ReentrancyDAO.withdrawAll (/data/demo_analysis/source_code/reentrancy_dao.sol#13-22):\n\tExternal calls:\n\t- callResult = msg.sender.call.value(oCredit)() (/data/demo_analysis/source_code/reentrancy_dao.sol#18)\n\tState variables written after the call(s):\n\t- credit (/data/demo_analysis/source_code/reentrancy_dao.sol#20)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in ReentrancyDAO.withdrawAll (/data/demo_analysis/source_code/reentrancy_dao.sol#13-22):\n\t-callResult = msg.sender.call.value(oCredit)() /data/demo_analysis/source_code/reentrancy_dao.sol#18\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}], "listLine": [16, 18, 20, 25, 26, 13], "analysis": {"16": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "balance -= oCredit"}, "fullDescription": "A possible integer underflow exists in the function `withdrawAll()`.\nThe subtraction may result in a value < 0.", "name": "ArithmeticVulnerability"}], "18": [{"level": "warning", "tool": ["mythril", "slither", "oyente"], "snippet": {"text": "msg.sender.call.value(oCredit)()"}, "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in ReentrancyDAO.withdrawAll (/data/demo_analysis/source_code/reentrancy_dao.sol#13-22):\n\t-callResult = msg.sender.call.value(oCredit)() /data/demo_analysis/source_code/reentrancy_dao.sol#18\n", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "20": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "credit[msg.sender] = 0"}, "fullDescription": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "name": "ReentrancyVulnerability"}], "25": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "credit[msg.sender] += msg.value"}, "fullDescription": "A possible integer overflow exists in the function `deposit()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "26": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "balance += msg.value"}, "fullDescription": "A possible integer overflow exists in the function `deposit()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "13": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in ReentrancyDAO.withdrawAll (/data/demo_analysis/source_code/reentrancy_dao.sol#13-22):\n\tExternal calls:\n\t- callResult = msg.sender.call.value(oCredit)() (/data/demo_analysis/source_code/reentrancy_dao.sol#18)\n\tState variables written after the call(s):\n\t- credit (/data/demo_analysis/source_code/reentrancy_dao.sol#20)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in ReentrancyDAO.withdrawAll (/data/demo_analysis/source_code/reentrancy_dao.sol#13-22):\n\t-callResult = msg.sender.call.value(oCredit)() /data/demo_analysis/source_code/reentrancy_dao.sol#18\n", "name": "UncheckedLowCallsVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 3, "ReentrancyVulnerability": 3, "UncheckedLowCallsVulnerability": 2, "DenialServiceVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 6, "error": 1, "note": 2, "none": 0}, "false_positives": 0}, "0x4b71ad9c1a84b9b643aa54fdd66e2dec96e8b152": {"contract": "0x4b71ad9c1a84b9b643aa54fdd66e2dec96e8b152", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 1, "list_vulnerabilities": ["ArithmeticVulnerability", "DenialServiceVulnerability", "UncheckedLowCallsVulnerability", "ReentrancyVulnerability", "OtherVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `transfer(address,address,address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 652\nCall at address: 652\nCall at address: 652\nCall at address: 652\nCall at address: 652\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "DenialService_3", "fullDescription": {"text": "airPort.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v) (/data/demo_analysis/source_code/0x4b71ad9c1a84b9b643aa54fdd66e2dec96e8b152.sol#17-19)\n"}, "name": "DenialServiceVulnerability", "shortDescription": {"text": "calls-loop"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in airPort.transfer (/data/demo_analysis/source_code/0x4b71ad9c1a84b9b643aa54fdd66e2dec96e8b152.sol#12-21):\n\t-caddress.call(id,from,_tos[i],v) /data/demo_analysis/source_code/0x4b71ad9c1a84b9b643aa54fdd66e2dec96e8b152.sol#17-19\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [12, 17], "analysis": {"12": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "ansfer(address from,address caddress,address[] _tos,uint v)public returns (bool){\n        require(_tos.length > 0);\n        bytes4 id=bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for(uint i=0;i<_tos.length;i++){\n            // <yes> <report> UNCHECKED_LL_CALLS\n            caddress.call(id,from,_tos[i],v);\n        }\n        return true;\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `transfer(address,address,address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "airPort.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v) (/data/demo_analysis/source_code/0x4b71ad9c1a84b9b643aa54fdd66e2dec96e8b152.sol#17-19)\n", "name": "DenialServiceVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in airPort.transfer (/data/demo_analysis/source_code/0x4b71ad9c1a84b9b643aa54fdd66e2dec96e8b152.sol#12-21):\n\t-caddress.call(id,from,_tos[i],v) /data/demo_analysis/source_code/0x4b71ad9c1a84b9b643aa54fdd66e2dec96e8b152.sol#17-19\n", "name": "UncheckedLowCallsVulnerability"}], "17": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": ",from,_tos[i],v);\n        }\n    "}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 652\nCall at address: 652\nCall at address: 652\nCall at address: 652\nCall at address: 652\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["slither", "oyente"], "fullDescription": "airPort.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v) (/data/demo_analysis/source_code/0x4b71ad9c1a84b9b643aa54fdd66e2dec96e8b152.sol#17-19)\n", "name": "DenialServiceVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1, "DenialServiceVulnerability": 2, "UncheckedLowCallsVulnerability": 2, "ReentrancyVulnerability": 1, "OtherVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 5, "error": 0, "note": 2, "none": 0}, "false_positives": 0}, "tokensalechallenge": {"contract": "tokensalechallenge", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `buy(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}], "listLine": [25], "analysis": {"25": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "balanceOf[msg.sender] += numTokens"}, "fullDescription": "A possible integer overflow exists in the function `buy(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 1, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "0x663e4229142a27f00bafb5d087e1e730648314c3": {"contract": "0x663e4229142a27f00bafb5d087e1e730648314c3", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 120, "list_vulnerabilities": ["UncheckedLowCallsVulnerability", "ReentrancyVulnerability", "OtherVulnerability", "ArithmeticVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Reentrancy_4", "fullDescription": {"text": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "State change after external call"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in PandaAuction.bidOnSiringAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2228-2251):\n\tExternal calls:\n\t- require(bool)(_canBreedWithViaAuction(_matronId,_sireId)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2237-2238)\n\t- currentPrice = siringAuction.getCurrentPrice(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2240-2241)\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\t- _breedWith(uint32(_matronId),uint32(_sireId),msg.sender) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n\tExternal calls sending eth:\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "Other_11", "fullDescription": {"text": "SaleClockAuction.bid (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1840-1849) uses a dangerous strict equality:\n\t- isGen0 == 1\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "incorrect-equality"}}, {"id": "Reentrancy_11", "fullDescription": {"text": "Reentrancy in PandaBreeding._breedWith (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1025-1046):\n\tExternal calls:\n\t- (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1028-1029)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1031)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-no-eth"}}, {"id": "UncheckedLowCalls_6", "fullDescription": {"text": "SaleClockAuctionERC20.withdrawERC20Balance (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2003-2007) does not use the value returned by external calls:\n\t-ERC20(_erc20Address).transfer(_to,balances[_erc20Address]) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2007)\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "unused-return"}}, {"id": "Reentrancy_9", "fullDescription": {"text": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-benign"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [1536, 1245, 1269, 2228, 2237, 2240, 2247, 1117, 1143, 1167, 1194, 1195, 1840, 1845, 1025, 1028, 1031, 428, 450, 465, 469, 479, 499, 1983, 1991, 1993, 1995, 1054, 1096, 1102, 2003, 2007, 2260, 2263, 1507, 1516, 1517, 2012, 2049, 2054, 2055, 1032, 1040, 1038, 1043, 1044, 515, 486, 1842, 1848, 1847, 1996, 2001, 1551, 1566, 1574, 1688, 1706, 1713, 1771, 1789, 1800, 1929, 1949, 1955, 1958, 1801, 1823, 1828, 1190, 829, 836, 837, 2077, 2084, 2085, 2086, 2100, 2104, 2109, 2115, 2117, 1381, 1326, 1349, 1343, 1350, 1348, 1496, 516, 697, 397, 945, 392, 940, 385, 948, 931, 934, 985, 896, 895, 984, 1152, 907, 2429, 2441, 2439, 2440, 2432, 2436, 2433, 2437, 2438, 2434, 2435, 2467, 1808, 1781, 1235, 1594, 1595, 1596, 1597], "analysis": {"1536": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "pplied.\n    /// @param _token"}, "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}], "1245": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "onditionally.\n    function _cancelAuction(uint256 _token"}, "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}], "1269": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "equire(_bidAmount >= price);\n\n       "}, "fullDescription": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "name": "ReentrancyVulnerability"}], "2228": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in PandaAuction.bidOnSiringAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2228-2251):\n\tExternal calls:\n\t- require(bool)(_canBreedWithViaAuction(_matronId,_sireId)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2237-2238)\n\t- currentPrice = siringAuction.getCurrentPrice(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2240-2241)\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\t- _breedWith(uint32(_matronId),uint32(_sireId),msg.sender) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n\tExternal calls sending eth:\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "2237": [{"level": "error", "tool": ["slither"], "snippet": {"text": "require(bool)(_canBreedWithViaAuction(_matronId,_sireId))"}, "fullDescription": "Reentrancy in PandaAuction.bidOnSiringAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2228-2251):\n\tExternal calls:\n\t- require(bool)(_canBreedWithViaAuction(_matronId,_sireId)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2237-2238)\n\t- currentPrice = siringAuction.getCurrentPrice(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2240-2241)\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\t- _breedWith(uint32(_matronId),uint32(_sireId),msg.sender) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n\tExternal calls sending eth:\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "2240": [{"level": "error", "tool": ["slither"], "snippet": {"text": "currentPrice = siringAuction.getCurrentPrice(_sireId)"}, "fullDescription": "Reentrancy in PandaAuction.bidOnSiringAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2228-2251):\n\tExternal calls:\n\t- require(bool)(_canBreedWithViaAuction(_matronId,_sireId)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2237-2238)\n\t- currentPrice = siringAuction.getCurrentPrice(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2240-2241)\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\t- _breedWith(uint32(_matronId),uint32(_sireId),msg.sender) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n\tExternal calls sending eth:\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "2247": [{"level": "error", "tool": ["slither"], "snippet": {"text": "siringAuction.bid.value(msg.value - autoBirthFee)(_sireId)"}, "fullDescription": "Reentrancy in PandaAuction.bidOnSiringAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2228-2251):\n\tExternal calls:\n\t- require(bool)(_canBreedWithViaAuction(_matronId,_sireId)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2237-2238)\n\t- currentPrice = siringAuction.getCurrentPrice(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2240-2241)\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\t- _breedWith(uint32(_matronId),uint32(_sireId),msg.sender) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n\tExternal calls sending eth:\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1117": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in PandaAuction.bidOnSiringAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2228-2251):\n\tExternal calls:\n\t- require(bool)(_canBreedWithViaAuction(_matronId,_sireId)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2237-2238)\n\t- currentPrice = siringAuction.getCurrentPrice(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2240-2241)\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\t- _breedWith(uint32(_matronId),uint32(_sireId),msg.sender) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n\tExternal calls sending eth:\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1143": [{"level": "error", "tool": ["slither"], "snippet": {"text": "probability = (geneScience.getPureFromGene(matron.genes) + geneScience.getPureFromGene(sire.genes)) / 2 + _factors[0]"}, "fullDescription": "Reentrancy in PandaAuction.bidOnSiringAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2228-2251):\n\tExternal calls:\n\t- require(bool)(_canBreedWithViaAuction(_matronId,_sireId)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2237-2238)\n\t- currentPrice = siringAuction.getCurrentPrice(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2240-2241)\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\t- _breedWith(uint32(_matronId),uint32(_sireId),msg.sender) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n\tExternal calls sending eth:\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1167": [{"level": "error", "tool": ["slither"], "snippet": {"text": "kittenId = _createPanda(_matronId,matron.siringWithId,parentGen + 1,childGenes,owner)"}, "fullDescription": "Reentrancy in PandaAuction.bidOnSiringAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2228-2251):\n\tExternal calls:\n\t- require(bool)(_canBreedWithViaAuction(_matronId,_sireId)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2237-2238)\n\t- currentPrice = siringAuction.getCurrentPrice(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2240-2241)\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\t- _breedWith(uint32(_matronId),uint32(_sireId),msg.sender) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n\tExternal calls sending eth:\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1194": [{"level": "error", "tool": ["slither"], "snippet": {"text": "msg.sender.send(autoBirthFee)"}, "fullDescription": "Reentrancy in PandaAuction.bidOnSiringAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2228-2251):\n\tExternal calls:\n\t- require(bool)(_canBreedWithViaAuction(_matronId,_sireId)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2237-2238)\n\t- currentPrice = siringAuction.getCurrentPrice(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2240-2241)\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\t- _breedWith(uint32(_matronId),uint32(_sireId),msg.sender) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n\tExternal calls sending eth:\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1195": [{"level": "error", "tool": ["slither"], "snippet": {"text": "delete childOwner[_matronId]"}, "fullDescription": "Reentrancy in PandaAuction.bidOnSiringAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2228-2251):\n\tExternal calls:\n\t- require(bool)(_canBreedWithViaAuction(_matronId,_sireId)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2237-2238)\n\t- currentPrice = siringAuction.getCurrentPrice(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2240-2241)\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\t- _breedWith(uint32(_matronId),uint32(_sireId),msg.sender) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n\tExternal calls sending eth:\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2247-2250)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1840": [{"level": "warning", "tool": ["slither"], "fullDescription": "SaleClockAuction.bid (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1840-1849) uses a dangerous strict equality:\n\t- isGen0 == 1\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1845": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "isGen0 == 1"}, "fullDescription": "SaleClockAuction.bid (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1840-1849) uses a dangerous strict equality:\n\t- isGen0 == 1\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1025": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in PandaBreeding._breedWith (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1025-1046):\n\tExternal calls:\n\t- (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1028-1029)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1031)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1028": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "(_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId)"}, "fullDescription": "Reentrancy in PandaBreeding._breedWith (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1025-1046):\n\tExternal calls:\n\t- (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1028-1029)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1031)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1031": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "matron.siringWithId = uint32(_sireId)"}, "fullDescription": "Reentrancy in PandaBreeding._breedWith (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1025-1046):\n\tExternal calls:\n\t- (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1028-1029)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1031)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "428": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in PandaBreeding._breedWith (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1025-1046):\n\tExternal calls:\n\t- (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1028-1029)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1031)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "450": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "pureDegree = uint16(geneScience.getPureFromGene(_genes))"}, "fullDescription": "Reentrancy in PandaBreeding._breedWith (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1025-1046):\n\tExternal calls:\n\t- (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1028-1029)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1031)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "465": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "_tp = geneScience.getWizzType(_genes)"}, "fullDescription": "Reentrancy in PandaBreeding._breedWith (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1025-1046):\n\tExternal calls:\n\t- (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1028-1029)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1031)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "469": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "_genes = geneScience.clearWizzType(_genes)"}, "fullDescription": "Reentrancy in PandaBreeding._breedWith (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1025-1046):\n\tExternal calls:\n\t- (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1028-1029)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1031)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "479": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1"}, "fullDescription": "Reentrancy in PandaBreeding._breedWith (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1025-1046):\n\tExternal calls:\n\t- (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1028-1029)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1031)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "499": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "newKittenId = pandas.push(_panda) - 1"}, "fullDescription": "Reentrancy in PandaBreeding._breedWith (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1025-1046):\n\tExternal calls:\n\t- (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1028-1029)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1031)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1983": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in PandaBreeding._breedWith (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1025-1046):\n\tExternal calls:\n\t- (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1028-1029)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1031)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1991": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "price = _bidERC20(_erc20address,msg.sender,_tokenId,_amount)"}, "fullDescription": "Reentrancy in PandaBreeding._breedWith (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1025-1046):\n\tExternal calls:\n\t- (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1028-1029)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1031)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1993": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "_transfer(msg.sender,_tokenId)"}, "fullDescription": "Reentrancy in PandaBreeding._breedWith (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1025-1046):\n\tExternal calls:\n\t- (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1028-1029)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1031)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1995": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "delete tokenIdToErc20Address[_tokenId]"}, "fullDescription": "Reentrancy in PandaBreeding._breedWith (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1025-1046):\n\tExternal calls:\n\t- (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1028-1029)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1031)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1054": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in PandaBreeding._breedWith (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1025-1046):\n\tExternal calls:\n\t- (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1028-1029)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1031)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1096": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(_isValidMatingPair(matron,_matronId,sire,_sireId))"}, "fullDescription": "Reentrancy in PandaBreeding._breedWith (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1025-1046):\n\tExternal calls:\n\t- (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1028-1029)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1031)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1102": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "_breedWith(_matronId,_sireId,msg.sender)"}, "fullDescription": "Reentrancy in PandaBreeding._breedWith (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1025-1046):\n\tExternal calls:\n\t- (_matronId,_sireId) = _exchangeMatronSireId(_matronId,_sireId) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1028-1029)\n\tState variables written after the call(s):\n\t- pandas (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1031)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "2003": [{"level": "warning", "tool": ["slither"], "fullDescription": "SaleClockAuctionERC20.withdrawERC20Balance (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2003-2007) does not use the value returned by external calls:\n\t-ERC20(_erc20Address).transfer(_to,balances[_erc20Address]) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2007)\n", "name": "UncheckedLowCallsVulnerability"}], "2007": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "ERC20(_erc20Address).transfer(_to,balances[_erc20Address])"}, "fullDescription": "SaleClockAuctionERC20.withdrawERC20Balance (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2003-2007) does not use the value returned by external calls:\n\t-ERC20(_erc20Address).transfer(_to,balances[_erc20Address]) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2007)\n", "name": "UncheckedLowCallsVulnerability"}], "2260": [{"level": "warning", "tool": ["slither"], "fullDescription": "SaleClockAuctionERC20.withdrawERC20Balance (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2003-2007) does not use the value returned by external calls:\n\t-ERC20(_erc20Address).transfer(_to,balances[_erc20Address]) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2007)\n", "name": "UncheckedLowCallsVulnerability"}], "2263": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "saleAuctionERC20.withdrawERC20Balance(_erc20Address,_to)"}, "fullDescription": "SaleClockAuctionERC20.withdrawERC20Balance (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2003-2007) does not use the value returned by external calls:\n\t-ERC20(_erc20Address).transfer(_to,balances[_erc20Address]) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#2007)\n", "name": "UncheckedLowCallsVulnerability"}], "1507": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1516": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721))"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1517": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "nonFungibleContract = candidateContract"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "2012": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "2049": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(ERC20(_erc20Address).transferFrom(_buyerAddress,seller,sellerProceeds))"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "2054": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(ERC20(_erc20Address).transferFrom(_buyerAddress,address(this),auctioneerCut))"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "2055": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "balances[_erc20Address] += auctioneerCut"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1032": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "_triggerCooldown(sire)"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1040": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "delete sireAllowedToAddress[_sireId]"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1038": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "delete sireAllowedToAddress[_matronId]"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1043": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "pregnantPandas ++"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1044": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "childOwner[_matronId] = _owner"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "515": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "_transfer(0,_owner,newKittenId)"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "486": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "gen0CreatedCount ++"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1842": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "price = _bid(_tokenId,msg.value)"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1848": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "gen0SaleCount ++"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1847": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "lastGen0SalePrices[gen0SaleCount % 5] = price"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1996": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "2001": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "_cancelAuction(_tokenId,seller)"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1551": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1566": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(_owns(msg.sender,_tokenId))"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1574": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "_addAuction(_tokenId,auction)"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1688": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1706": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "_escrow(_seller,_tokenId)"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1713": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "_addAuction(_tokenId,auction)"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1771": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1789": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "_escrow(_seller,_tokenId)"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1800": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "_addAuction(_tokenId,auction)"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1929": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1949": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "_escrow(_seller,_tokenId)"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1955": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "_addAuctionERC20(_tokenId,auction,_erc20Address)"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1958": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "tokenIdToErc20Address[_tokenId] = _erc20Address"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1801": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1823": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "_escrow(_seller,_tokenId)"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1828": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "_addAuction(_tokenId,auction)"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1190": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "pregnantPandas --"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "829": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "836": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(candidateContract.isGeneScience())"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "837": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "geneScience = candidateContract"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "2077": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "2084": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(candidateContract.isSaleClockAuction())"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "2085": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "saleAuction = candidateContract"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "2086": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "2100": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(candidateContract.isSaleClockAuctionERC20())"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "2104": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "saleAuctionERC20 = candidateContract"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "2109": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "2115": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(candidateContract.isSiringClockAuction())"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "2117": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "siringAuction = candidateContract"}, "fullDescription": "Reentrancy in ClockAuction.ClockAuction (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1507-1518):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1516-1517)\n\tState variables written after the call(s):\n\t- nonFungibleContract (/data/demo_analysis/source_code/0x663e4229142a27f00bafb5d087e1e730648314c3.sol#1517-1518)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "1381": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "1326": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "1349": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "1343": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "1350": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "1348": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "1496": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "516": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "697": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "397": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "945": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "392": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "940": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "385": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "948": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "931": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "934": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "985": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "896": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "895": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "984": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "1152": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "907": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "2429": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "2441": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "2439": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "2440": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "2432": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "2436": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "2433": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "2437": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "2438": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "2434": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "2435": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "2467": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "1808": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "1781": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "1235": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "1594": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "1595": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "1596": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "1597": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"UncheckedLowCallsVulnerability": 5, "ReentrancyVulnerability": 77, "OtherVulnerability": 2, "ArithmeticVulnerability": 39, "DenialServiceVulnerability": 3}, "count_leve_vulnerabilities": {"warning": 115, "error": 9, "note": 2, "none": 0}, "false_positives": 0}, "0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839": {"contract": "0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 5, "list_vulnerabilities": ["ArithmeticVulnerability", "ReentrancyVulnerability", "UncheckedLowCallsVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Arithmetic_5", "fullDescription": {"text": "A possible integer underflow exists in the function `WithdrawToHolder(address,uint256)`.\nThe subtraction may result in a value < 0."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in TokenBank.WithdrawToHolder (/data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#90-100):\n\tExternal calls:\n\t- _addr.call.value(_wei)() (/data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#97-100)\n\tState variables written after the call(s):\n\t- Holders (/data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in Token.WithdrawToken (/data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#39-50):\n\t-token.call(bytes4(sha3()(transfer(address,uint256))),to,amount) /data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#44-50\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}], "listLine": [76, 44, 98, 100, 90, 97, 96, 39, 72, 94], "analysis": {"76": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "awTokenToHolder(address _to,ad"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "44": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "nt256)\")),to,amount); \n    }\n}\n\ncontract TokenBank is Token\n{\n "}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}], "98": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "       }\n    }\n}"}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}], "100": [{"level": "warning", "tool": ["mythril"], "snippet": {}, "fullDescription": "A possible integer underflow exists in the function `WithdrawToHolder(address,uint256)`.\nThe subtraction may result in a value < 0.", "name": "ArithmeticVulnerability"}], "90": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in TokenBank.WithdrawToHolder (/data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#90-100):\n\tExternal calls:\n\t- _addr.call.value(_wei)() (/data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#97-100)\n\tState variables written after the call(s):\n\t- Holders (/data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Token.WithdrawToken (/data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#39-50):\n\t-token.call(bytes4(sha3()(transfer(address,uint256))),to,amount) /data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#44-50\n", "name": "UncheckedLowCallsVulnerability"}], "97": [{"level": "error", "tool": ["slither"], "snippet": {"text": "_addr.call.value(_wei)()"}, "fullDescription": "Reentrancy in TokenBank.WithdrawToHolder (/data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#90-100):\n\tExternal calls:\n\t- _addr.call.value(_wei)() (/data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#97-100)\n\tState variables written after the call(s):\n\t- Holders (/data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Token.WithdrawToken (/data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#39-50):\n\t-token.call(bytes4(sha3()(transfer(address,uint256))),to,amount) /data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#44-50\n", "name": "UncheckedLowCallsVulnerability"}], "96": [{"level": "error", "tool": ["slither"], "snippet": {"text": "Holders[_addr] -= _wei"}, "fullDescription": "Reentrancy in TokenBank.WithdrawToHolder (/data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#90-100):\n\tExternal calls:\n\t- _addr.call.value(_wei)() (/data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#97-100)\n\tState variables written after the call(s):\n\t- Holders (/data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "39": [{"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Token.WithdrawToken (/data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#39-50):\n\t-token.call(bytes4(sha3()(transfer(address,uint256))),to,amount) /data/demo_analysis/source_code/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#44-50\n", "name": "UncheckedLowCallsVulnerability"}], "72": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "94": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ReentrancyVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 4, "ReentrancyVulnerability": 6, "UncheckedLowCallsVulnerability": 4}, "count_leve_vulnerabilities": {"warning": 7, "error": 3, "note": 4, "none": 0}, "false_positives": 0}, "0x0cbe050f75bc8f8c2d6c0d249fea125fd6e1acc9": {"contract": "0x0cbe050f75bc8f8c2d6c0d249fea125fd6e1acc9", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ReentrancyVulnerability", "UncheckedLowCallsVulnerability"], "rules": [{"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in Caller.callAddress (/data/demo_analysis/source_code/0x0cbe050f75bc8f8c2d6c0d249fea125fd6e1acc9.sol#10-14):\n\t-a.call() /data/demo_analysis/source_code/0x0cbe050f75bc8f8c2d6c0d249fea125fd6e1acc9.sol#13-14\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}], "listLine": [13, 10], "analysis": {"13": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "   }\n}"}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}], "10": [{"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Caller.callAddress (/data/demo_analysis/source_code/0x0cbe050f75bc8f8c2d6c0d249fea125fd6e1acc9.sol#10-14):\n\t-a.call() /data/demo_analysis/source_code/0x0cbe050f75bc8f8c2d6c0d249fea125fd6e1acc9.sol#13-14\n", "name": "UncheckedLowCallsVulnerability"}]}, "count_vulnerabilities": {"ReentrancyVulnerability": 1, "UncheckedLowCallsVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 1, "error": 0, "note": 2, "none": 0}, "false_positives": 0}, "odds_and_evens": {"contract": "odds_and_evens", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 9, "list_vulnerabilities": ["AccessControlVulnerability", "UncheckedLowCallsVulnerability", "OtherVulnerability", "ArithmeticVulnerability", "FrontRunningVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "AccessControl_13", "fullDescription": {"text": "In the function `getProfit()` a non-zero amount of Ether is sent to msg.sender.\n\nThere is a check on storage index 4. This storage slot can be written to by calling the function `play(uint256)`."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `play(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function play(uint256). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "AccessControl_19", "fullDescription": {"text": "OddsAndEvens.andTheWinnerIs (/data/demo_analysis/source_code/odds_and_evens.sol#34-46) sends eth to arbitrary user\n\tDangerous calls:\n\t- res = players[0].addr.send(1800000000000000000) (/data/demo_analysis/source_code/odds_and_evens.sol#38)\n\t- res = players[1].addr.send(1800000000000000000) (/data/demo_analysis/source_code/odds_and_evens.sol#41)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}, {"id": "Other_20", "name": "OtherVulnerability", "shortDescription": {"text": "uninitialised_struct"}}], "listLine": [50, 28, 16, 36, 38, 41, 34], "analysis": {"50": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.sender.send(this.balance)"}, "fullDescription": "In the function `getProfit()` a non-zero amount of Ether is sent to msg.sender.\n\nThere is a check on storage index 4. This storage slot can be written to by calling the function `play(uint256)`.", "name": "AccessControlVulnerability"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}], "28": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "players[tot]"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "16": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "Player[2] public players"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "36": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "players[0].number+players[1].number"}, "fullDescription": "A possible integer overflow exists in the function `play(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "38": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "players[0].addr.send(1800 finney)"}, "fullDescription": "A possible transaction order independence vulnerability exists in function play(uint256). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "error", "tool": ["slither"], "fullDescription": "OddsAndEvens.andTheWinnerIs (/data/demo_analysis/source_code/odds_and_evens.sol#34-46) sends eth to arbitrary user\n\tDangerous calls:\n\t- res = players[0].addr.send(1800000000000000000) (/data/demo_analysis/source_code/odds_and_evens.sol#38)\n\t- res = players[1].addr.send(1800000000000000000) (/data/demo_analysis/source_code/odds_and_evens.sol#41)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "41": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "players[1].addr.send(1800 finney)"}, "fullDescription": "A possible transaction order independence vulnerability exists in function play(uint256). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "error", "tool": ["slither"], "fullDescription": "OddsAndEvens.andTheWinnerIs (/data/demo_analysis/source_code/odds_and_evens.sol#34-46) sends eth to arbitrary user\n\tDangerous calls:\n\t- res = players[0].addr.send(1800000000000000000) (/data/demo_analysis/source_code/odds_and_evens.sol#38)\n\t- res = players[1].addr.send(1800000000000000000) (/data/demo_analysis/source_code/odds_and_evens.sol#41)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "34": [{"level": "error", "tool": ["slither"], "fullDescription": "OddsAndEvens.andTheWinnerIs (/data/demo_analysis/source_code/odds_and_evens.sol#34-46) sends eth to arbitrary user\n\tDangerous calls:\n\t- res = players[0].addr.send(1800000000000000000) (/data/demo_analysis/source_code/odds_and_evens.sol#38)\n\t- res = players[1].addr.send(1800000000000000000) (/data/demo_analysis/source_code/odds_and_evens.sol#41)\n", "name": "AccessControlVulnerability"}], "29": []}, "count_vulnerabilities": {"AccessControlVulnerability": 4, "UncheckedLowCallsVulnerability": 3, "OtherVulnerability": 2, "ArithmeticVulnerability": 1, "FrontRunningVulnerability": 2, "DenialServiceVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 6, "error": 3, "note": 5, "none": 0}, "false_positives": 1}, "rubixi": {"contract": "rubixi", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 20, "list_vulnerabilities": ["AccessControlVulnerability", "FrontRunningVulnerability", "UncheckedLowCallsVulnerability", "DenialServiceVulnerability", "OtherVulnerability", "ArithmeticVulnerability"], "rules": [{"id": "AccessControl_13", "fullDescription": {"text": "In the function `collectPercentOfFees(uint256)` a non-zero amount of Ether is sent to an address taken from storage slot 5.\nThere is a check on storage index 5. This storage slot can be written to by calling the function `DynamicPyramid()`.\n\nThere is a check on storage index 5. This storage slot can be written to by calling the function `DynamicPyramid()`.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `fallback`."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function collectPercentOfFees(uint256). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `collectFeesInEther(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3420\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "DenialService_3", "fullDescription": {"text": "Rubixi.addPayout has external calls inside a loop:\n\t- participants[payoutOrder].etherAddress.send(payoutToSend) (/data/demo_analysis/source_code/rubixi.sol#74)\n"}, "name": "DenialServiceVulnerability", "shortDescription": {"text": "calls-loop"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [103, 141, 85, 158, 90, 95, 74, 59, 135, 130, 153, 125, 159], "analysis": {"103": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "creator.send(feesToCollect)"}, "fullDescription": "In the function `collectPercentOfFees(uint256)` a non-zero amount of Ether is sent to an address taken from storage slot 5.\nThere is a check on storage index 5. This storage slot can be written to by calling the function `DynamicPyramid()`.\n\nThere is a check on storage index 5. This storage slot can be written to by calling the function `DynamicPyramid()`.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `fallback`.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function collectPercentOfFees(uint256). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "141": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "participants[payoutOrder]"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "85": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "creator.send(collectedFees)"}, "fullDescription": "In the function `collectPercentOfFees(uint256)` a non-zero amount of Ether is sent to an address taken from storage slot 5.\nThere is a check on storage index 5. This storage slot can be written to by calling the function `DynamicPyramid()`.\n\nThere is a check on storage index 5. This storage slot can be written to by calling the function `DynamicPyramid()`.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `fallback`.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function collectPercentOfFees(uint256). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "158": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "participants[orderInPyramid]"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "90": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "_amt *= 1 ether"}, "fullDescription": "A possible integer overflow exists in the function `collectFeesInEther(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "95": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "creator.send(_amt)"}, "fullDescription": "In the function `collectPercentOfFees(uint256)` a non-zero amount of Ether is sent to an address taken from storage slot 5.\nThere is a check on storage index 5. This storage slot can be written to by calling the function `DynamicPyramid()`.\n\nThere is a check on storage index 5. This storage slot can be written to by calling the function `DynamicPyramid()`.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `fallback`.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function collectPercentOfFees(uint256). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "74": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "participants[payoutOrder].etherAddress.send(payoutToSend)"}, "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3420\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["slither", "oyente"], "fullDescription": "Rubixi.addPayout has external calls inside a loop:\n\t- participants[payoutOrder].etherAddress.send(payoutToSend) (/data/demo_analysis/source_code/rubixi.sol#74)\n", "name": "DenialServiceVulnerability"}], "59": [{"level": "warning", "tool": ["slither"], "fullDescription": "Rubixi.addPayout has external calls inside a loop:\n\t- participants[payoutOrder].etherAddress.send(payoutToSend) (/data/demo_analysis/source_code/rubixi.sol#74)\n", "name": "DenialServiceVulnerability"}], "135": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "130": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "153": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "125": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "159": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 3, "FrontRunningVulnerability": 3, "UncheckedLowCallsVulnerability": 4, "DenialServiceVulnerability": 5, "OtherVulnerability": 3, "ArithmeticVulnerability": 8}, "count_leve_vulnerabilities": {"warning": 20, "error": 0, "note": 6, "none": 0}, "false_positives": 0}, "0xe82f0742a71a02b9e9ffc142fdcb6eb1ed06fb87": {"contract": "0xe82f0742a71a02b9e9ffc142fdcb6eb1ed06fb87", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 2, "list_vulnerabilities": ["ArithmeticVulnerability", "UncheckedLowCallsVulnerability", "FrontRunningVulnerability", "AccessControlVulnerability", "ReentrancyVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `Command(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 922\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "AccessControl_13", "fullDescription": {"text": "In the function `GetFreebie()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "AccessControl_19", "fullDescription": {"text": "Freebie.GetFreebie (/data/demo_analysis/source_code/0xe82f0742a71a02b9e9ffc142fdcb6eb1ed06fb87.sol#15-25) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/0xe82f0742a71a02b9e9ffc142fdcb6eb1ed06fb87.sol#21-22)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in Freebie.Command (/data/demo_analysis/source_code/0xe82f0742a71a02b9e9ffc142fdcb6eb1ed06fb87.sol#33-41):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0xe82f0742a71a02b9e9ffc142fdcb6eb1ed06fb87.sol#40-41\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}, {"id": "Other_21", "name": "OtherVulnerability", "shortDescription": {"text": "hidden_transfer"}}], "listLine": [33, 30, 20, 21, 40, 15, 39], "analysis": {"33": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "es data)\n    payable\n    public\n    {\n        require(msg.sender == Owner);\n        // <yes> <report> UNCHECKED_LL_CALLS\n        adr.call.value(msg.value)(data);\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `Command(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Freebie.Command (/data/demo_analysis/source_code/0xe82f0742a71a02b9e9ffc142fdcb6eb1ed06fb87.sol#33-41):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0xe82f0742a71a02b9e9ffc142fdcb6eb1ed06fb87.sol#40-41\n", "name": "UncheckedLowCallsVulnerability"}], "30": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "\n    }\n    \n    function Com"}, "fullDescription": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "20": [{"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability"}], "21": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "this.balance);\n        }         "}, "fullDescription": "In the function `GetFreebie()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions.", "name": "AccessControlVulnerability"}], "40": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "\n}"}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}], "15": [{"level": "error", "tool": ["slither"], "fullDescription": "Freebie.GetFreebie (/data/demo_analysis/source_code/0xe82f0742a71a02b9e9ffc142fdcb6eb1ed06fb87.sol#15-25) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/0xe82f0742a71a02b9e9ffc142fdcb6eb1ed06fb87.sol#21-22)\n", "name": "AccessControlVulnerability"}], "39": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "DenialServiceVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1, "UncheckedLowCallsVulnerability": 2, "FrontRunningVulnerability": 1, "AccessControlVulnerability": 2, "ReentrancyVulnerability": 1, "DenialServiceVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 5, "error": 1, "note": 2, "none": 0}, "false_positives": 1}, "0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c": {"contract": "0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 1, "list_vulnerabilities": ["ArithmeticVulnerability", "DenialServiceVulnerability", "UncheckedLowCallsVulnerability", "OtherVulnerability", "ReentrancyVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `_function_0xffc3a769`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1095\nCall at address: 1095\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "DenialService_3", "fullDescription": {"text": "EBU.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v[i] * 1000000000000000000) (/data/demo_analysis/source_code/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol#19-21)\n"}, "name": "DenialServiceVulnerability", "shortDescription": {"text": "calls-loop"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in EBU.transfer (/data/demo_analysis/source_code/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol#13-23):\n\t-caddress.call(id,from,_tos[i],v[i] * 1000000000000000000) /data/demo_analysis/source_code/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol#19-21\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [13, 19], "analysis": {"13": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "nsfer(address[] _tos,uint[] v)public returns (bool){\n        require(msg.sender == 0x9797055B68C5DadDE6b3c7d5D80C9CFE2eecE6c9);\n        require(_tos.length > 0);\n        bytes4 id=bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for(uint i=0;i<_tos.length;i++){\n            // <yes> <report> UNCHECKED_LL_CALLS\n            caddress.call(id,from,_tos[i],v[i]*1000000000000000000);\n        }\n        return true;\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `_function_0xffc3a769`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "EBU.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v[i] * 1000000000000000000) (/data/demo_analysis/source_code/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol#19-21)\n", "name": "DenialServiceVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in EBU.transfer (/data/demo_analysis/source_code/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol#13-23):\n\t-caddress.call(id,from,_tos[i],v[i] * 1000000000000000000) /data/demo_analysis/source_code/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol#19-21\n", "name": "UncheckedLowCallsVulnerability"}], "19": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "0000"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["slither", "oyente"], "fullDescription": "EBU.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v[i] * 1000000000000000000) (/data/demo_analysis/source_code/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol#19-21)\n", "name": "DenialServiceVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1, "DenialServiceVulnerability": 2, "UncheckedLowCallsVulnerability": 2, "OtherVulnerability": 1, "ReentrancyVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 3, "error": 0, "note": 4, "none": 0}, "false_positives": 0}, "0xd2018bfaa266a9ec0a1a84b061640faa009def76": {"contract": "0xd2018bfaa266a9ec0a1a84b061640faa009def76", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 3, "list_vulnerabilities": ["ArithmeticVulnerability", "UncheckedLowCallsVulnerability", "FrontRunningVulnerability", "AccessControlVulnerability", "ReentrancyVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `Command(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 922\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "AccessControl_13", "fullDescription": {"text": "In the function `Get()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "AccessControl_19", "fullDescription": {"text": "Pie.Get (/data/demo_analysis/source_code/0xd2018bfaa266a9ec0a1a84b061640faa009def76.sol#21-30) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/0xd2018bfaa266a9ec0a1a84b061640faa009def76.sol#26-27)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in Pie.Command (/data/demo_analysis/source_code/0xd2018bfaa266a9ec0a1a84b061640faa009def76.sol#38-46):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0xd2018bfaa266a9ec0a1a84b061640faa009def76.sol\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}, {"id": "Other_21", "name": "OtherVulnerability", "shortDescription": {"text": "hidden_transfer"}}], "listLine": [38, 36, 25, 26, 46, 21, 44], "analysis": {"38": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "ta)\n    payable\n    public\n    {\n        require(msg.sender == Owner);\n        // <yes> <report> UNCHECKED_LL_CALLS\n        adr.call.value(msg.value)(data);\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `Command(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Pie.Command (/data/demo_analysis/source_code/0xd2018bfaa266a9ec0a1a84b061640faa009def76.sol#38-46):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0xd2018bfaa266a9ec0a1a84b061640faa009def76.sol\n", "name": "UncheckedLowCallsVulnerability"}], "36": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "}\n    \n    function Command("}, "fullDescription": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "25": [{"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability"}], "26": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "balance);\n        }              "}, "fullDescription": "In the function `Get()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions.", "name": "AccessControlVulnerability"}], "46": [{"level": "warning", "tool": ["mythril"], "snippet": {}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}], "21": [{"level": "error", "tool": ["slither"], "fullDescription": "Pie.Get (/data/demo_analysis/source_code/0xd2018bfaa266a9ec0a1a84b061640faa009def76.sol#21-30) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/0xd2018bfaa266a9ec0a1a84b061640faa009def76.sol#26-27)\n", "name": "AccessControlVulnerability"}], "44": [{"level": "note", "tool": ["slither"], "snippet": {"text": "adr.call.value(msg.value)(data)"}, "fullDescription": "Low level call in Pie.Command (/data/demo_analysis/source_code/0xd2018bfaa266a9ec0a1a84b061640faa009def76.sol#38-46):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0xd2018bfaa266a9ec0a1a84b061640faa009def76.sol\n", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1, "UncheckedLowCallsVulnerability": 3, "FrontRunningVulnerability": 1, "AccessControlVulnerability": 2, "ReentrancyVulnerability": 1, "DenialServiceVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 5, "error": 1, "note": 3, "none": 0}, "false_positives": 1}, "0x2972d548497286d18e92b5fa1f8f9139e5653fd2": {"contract": "0x2972d548497286d18e92b5fa1f8f9139e5653fd2", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 2, "list_vulnerabilities": ["ArithmeticVulnerability", "DenialServiceVulnerability", "UncheckedLowCallsVulnerability", "OtherVulnerability", "ReentrancyVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `_function_0x11be40e0`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 732\nCall at address: 732\nCall at address: 732\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "DenialService_3", "fullDescription": {"text": "demo.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v[i]) (/data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol#14-16)\n"}, "name": "DenialServiceVulnerability", "shortDescription": {"text": "calls-loop"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in demo.transfer (/data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol#9-18):\n\t-caddress.call(id,from,_tos[i],v[i]) /data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol#14-16\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [9, 15, 14], "analysis": {"9": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": " transfer(address from,address caddress,address[] _tos,uint[] v)public returns (bool){\n        require(_tos.length > 0);\n        bytes4 id=bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for(uint i=0;i<_tos.length;i++){\n             // <yes> <report> UNCHECKED_LL_CALLS\n            caddress.call(id,from,_tos[i],v[i]);\n        }\n        return true;\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `_function_0x11be40e0`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "demo.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v[i]) (/data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol#14-16)\n", "name": "DenialServiceVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in demo.transfer (/data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol#9-18):\n\t-caddress.call(id,from,_tos[i],v[i]) /data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol#14-16\n", "name": "UncheckedLowCallsVulnerability"}], "15": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "  }\n"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "14": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "(id,from,_tos[i],v[i]);\n        }\n "}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 732\nCall at address: 732\nCall at address: 732\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["slither", "oyente"], "fullDescription": "demo.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v[i]) (/data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol#14-16)\n", "name": "DenialServiceVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1, "DenialServiceVulnerability": 2, "UncheckedLowCallsVulnerability": 2, "OtherVulnerability": 2, "ReentrancyVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 5, "error": 0, "note": 3, "none": 0}, "false_positives": 0}, "mapping_write": {"contract": "mapping_write", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 4, "list_vulnerabilities": ["ArithmeticVulnerability", "OtherVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `set(uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Other_14", "fullDescription": {"text": "Map.owner (/data/demo_analysis/source_code/mapping_write.sol#12) is never initialized. It is used in:\n\t- withdraw (/data/demo_analysis/source_code/mapping_write.sol#26-29)\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "uninitialized-state"}}], "listLine": [17, 20, 24, 11, 12, 26], "analysis": {"17": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "key + 1"}, "fullDescription": "A possible integer overflow exists in the function `set(uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "20": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "map[key]"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "24": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "map[key]"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "11": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "contract Map {\n     address public owner;\n     uint256[] map;\n\n     function set(uint256 key, uint256 value) public {\n         if (map.length <= key) {\n             map.length = key + 1;\n         }\n        // <yes> <report> ACCESS_CONTROL\n         map[key] = value;\n     }\n\n     function get(uint256 key) public view returns (uint256) {\n         return map[key];\n     }\n     function withdraw() public{\n       require(msg.sender == owner);\n       msg.sender.transfer(address(this).balance);\n     }\n }"}, "fullDescription": "A possible integer overflow exists in the function `set(uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "12": [{"level": "error", "tool": ["slither"], "fullDescription": "Map.owner (/data/demo_analysis/source_code/mapping_write.sol#12) is never initialized. It is used in:\n\t- withdraw (/data/demo_analysis/source_code/mapping_write.sol#26-29)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "26": [{"level": "error", "tool": ["slither"], "fullDescription": "Map.owner (/data/demo_analysis/source_code/mapping_write.sol#12) is never initialized. It is used in:\n\t- withdraw (/data/demo_analysis/source_code/mapping_write.sol#26-29)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 2, "OtherVulnerability": 4}, "count_leve_vulnerabilities": {"warning": 2, "error": 2, "note": 2, "none": 0}, "false_positives": 0}, "reentrancy_cross_function": {"contract": "reentrancy_cross_function", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 2, "list_vulnerabilities": ["AccessControlVulnerability", "ReentrancyVulnerability", "UncheckedLowCallsVulnerability", "DenialServiceVulnerability", "ArithmeticVulnerability"], "rules": [{"id": "AccessControl_13", "fullDescription": {"text": "In the function `withdrawBalance()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Reentrancy_4", "fullDescription": {"text": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "State change after external call"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in Reentrancy_cross_function.withdrawBalance (/data/demo_analysis/source_code/reentrancy_cross_function.sol#21-27):\n\tExternal calls:\n\t- (success) = msg.sender.call.value(amountToWithdraw)() (/data/demo_analysis/source_code/reentrancy_cross_function.sol#24)\n\tState variables written after the call(s):\n\t- userBalances (/data/demo_analysis/source_code/reentrancy_cross_function.sol#26)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in Reentrancy_cross_function.withdrawBalance (/data/demo_analysis/source_code/reentrancy_cross_function.sol#21-27):\n\t-(success) = msg.sender.call.value(amountToWithdraw)() /data/demo_analysis/source_code/reentrancy_cross_function.sol#24\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}], "listLine": [24, 26, 16, 21], "analysis": {"24": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.sender.call.value(amountToWithdraw)(\"\")"}, "fullDescription": "In the function `withdrawBalance()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril", "slither", "oyente"], "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Reentrancy_cross_function.withdrawBalance (/data/demo_analysis/source_code/reentrancy_cross_function.sol#21-27):\n\t-(success) = msg.sender.call.value(amountToWithdraw)() /data/demo_analysis/source_code/reentrancy_cross_function.sol#24\n", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "26": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "userBalances[msg.sender] = 0"}, "fullDescription": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "name": "ReentrancyVulnerability"}], "16": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "userBalances[to] += amount"}, "fullDescription": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "21": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in Reentrancy_cross_function.withdrawBalance (/data/demo_analysis/source_code/reentrancy_cross_function.sol#21-27):\n\tExternal calls:\n\t- (success) = msg.sender.call.value(amountToWithdraw)() (/data/demo_analysis/source_code/reentrancy_cross_function.sol#24)\n\tState variables written after the call(s):\n\t- userBalances (/data/demo_analysis/source_code/reentrancy_cross_function.sol#26)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Reentrancy_cross_function.withdrawBalance (/data/demo_analysis/source_code/reentrancy_cross_function.sol#21-27):\n\t-(success) = msg.sender.call.value(amountToWithdraw)() /data/demo_analysis/source_code/reentrancy_cross_function.sol#24\n", "name": "UncheckedLowCallsVulnerability"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 1, "ReentrancyVulnerability": 3, "UncheckedLowCallsVulnerability": 2, "DenialServiceVulnerability": 1, "ArithmeticVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 5, "error": 1, "note": 2, "none": 0}, "false_positives": 0}, "lottery": {"contract": "lottery", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 3, "list_vulnerabilities": ["ArithmeticVulnerability", "OtherVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `makeBet()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_11", "fullDescription": {"text": "Lottery.makeBet (/data/demo_analysis/source_code/lottery.sol#34-51) uses a dangerous strict equality:\n\t- won = (block.number % 2) == 0\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "incorrect-equality"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}], "listLine": [2, 34, 38, 58], "analysis": {"2": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "/blog.positive.com"}, "fullDescription": "A possible integer overflow exists in the function `makeBet()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "34": [{"level": "warning", "tool": ["slither"], "fullDescription": "Lottery.makeBet (/data/demo_analysis/source_code/lottery.sol#34-51) uses a dangerous strict equality:\n\t- won = (block.number % 2) == 0\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "38": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "won = (block.number % 2) == 0"}, "fullDescription": "Lottery.makeBet (/data/demo_analysis/source_code/lottery.sol#34-51) uses a dangerous strict equality:\n\t- won = (block.number % 2) == 0\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "58": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 2, "OtherVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 4, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "etherpot_lotto": {"contract": "etherpot_lotto", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 9, "list_vulnerabilities": ["UncheckedLowCallsVulnerability", "DenialServiceVulnerability", "ArithmeticVulnerability", "OtherVulnerability", "AccessControlVulnerability"], "rules": [{"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `getBuyers(uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "AccessControl_19", "fullDescription": {"text": "Lotto.cash (/data/demo_analysis/source_code/etherpot_lotto.sol#89-113) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.send(subpot) (/data/demo_analysis/source_code/etherpot_lotto.sol#109)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [141, 119, 120, 57, 73, 89, 109, 124, 77, 79, 43, 128], "analysis": {"141": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "msg.sender.send(msg.value-value)"}, "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "119": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "function getBuyers(uint roundIndex,address buyer) constant returns (address[]){\n         return rounds[roundIndex].buyers;\n     }"}, "fullDescription": "A possible integer overflow exists in the function `getBuyers(uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "120": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "return rounds[roundIndex].buyers"}, "fullDescription": "A possible integer overflow exists in the function `getBuyers(uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `getBuyers(uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "57": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "decisionBlockHash%rounds[roundIndex].ticketsCount"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "73": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "roundIndex+1"}, "fullDescription": "A possible integer overflow exists in the function `getBuyers(uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `getBuyers(uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `getBuyers(uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "89": [{"level": "error", "tool": ["slither"], "fullDescription": "Lotto.cash (/data/demo_analysis/source_code/etherpot_lotto.sol#89-113) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.send(subpot) (/data/demo_analysis/source_code/etherpot_lotto.sol#109)\n", "name": "AccessControlVulnerability"}], "109": [{"level": "error", "tool": ["slither"], "snippet": {"text": "winner.send(subpot)"}, "fullDescription": "Lotto.cash (/data/demo_analysis/source_code/etherpot_lotto.sol#89-113) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.send(subpot) (/data/demo_analysis/source_code/etherpot_lotto.sol#109)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "124": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "77": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "79": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "43": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "128": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"UncheckedLowCallsVulnerability": 1, "DenialServiceVulnerability": 2, "ArithmeticVulnerability": 11, "OtherVulnerability": 1, "AccessControlVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 13, "error": 2, "note": 2, "none": 0}, "false_positives": 0}, "king_of_the_ether_throne": {"contract": "king_of_the_ether_throne", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 15, "list_vulnerabilities": ["UncheckedLowCallsVulnerability", "OtherVulnerability", "DenialServiceVulnerability", "FrontRunningVulnerability", "ArithmeticVulnerability", "TimeManipulationVulnerability"], "rules": [{"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1337\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "TimeManipulation_4", "fullDescription": {"text": "KingOfTheEtherThrone.claimThrone (/data/demo_analysis/source_code/king_of_the_ether_throne.sol#103-169) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- currentMonarch.etherAddress != wizardAddress (/data/demo_analysis/source_code/king_of_the_ether_throne.sol#130-135)\n"}, "name": "TimeManipulationVulnerability", "shortDescription": {"text": "timestamp"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [110, 118, 132, 2, 139, 174, 69, 26, 103, 130, 66], "analysis": {"110": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "msg.sender.send(valuePaid)"}, "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}], "118": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.sender.send(excessPaid)"}, "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1337\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "132": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "currentMonarch.etherAddress.send(compensation)"}, "fullDescription": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "2": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "github.com/kierane"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "139": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "currentMonarch = Monarch(\n            msg.sender,\n            name,\n            valuePaid,\n            block.timestamp\n        )"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "174": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "wizardAddress.send(amount)"}, "fullDescription": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}], "69": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "Monarch[] public pastMonarchs"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "26": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "contract KingOfTheEtherThrone {\n\n    struct Monarch {\n        // Address to which their compensation will be sent.\n        address etherAddress;\n        // A name by which they wish to be known.\n        // NB: Unfortunately \"string\" seems to expose some bugs in web3.\n        string name;\n        // How much did they pay to become monarch?\n        uint claimPrice;\n        // When did their rule start (based on block.timestamp)?\n        uint coronationTimestamp;\n    }\n\n    // The wizard is the hidden power behind the throne; they\n    // occupy the throne during gaps in succession and collect fees.\n    address wizardAddress;\n\n    // Used to ensure only the wizard can do some things.\n    modifier onlywizard { if (msg.sender == wizardAddress) _; }\n\n    // How much must the first monarch pay?\n    uint constant startingClaimPrice = 100 finney;\n\n    // The next claimPrice is calculated from the previous claimFee\n    // by multiplying by claimFeeAdjustNum and dividing by claimFeeAdjustDen -\n    // for example, num=3 and den=2 would cause a 50% increase.\n    uint constant claimPriceAdjustNum = 3;\n    uint constant claimPriceAdjustDen = 2;\n\n    // How much of each claimFee goes to the wizard (expressed as a fraction)?\n    // e.g. num=1 and den=100 would deduct 1% for the wizard, leaving 99% as\n    // the compensation fee for the usurped monarch.\n    uint constant wizardCommissionFractionNum = 1;\n    uint constant wizardCommissionFractionDen = 100;\n\n    // How much must an agent pay now to become the monarch?\n    uint public currentClaimPrice;\n\n    // The King (or Queen) of the Ether.\n    Monarch public currentMonarch;\n\n    // Earliest-first list of previous throne holders.\n    Monarch[] public pastMonarchs;\n\n    // Create a new throne, with the creator as wizard and first ruler.\n    // Sets up some hopefully sensible defaults.\n    function KingOfTheEtherThrone() {\n        wizardAddress = msg.sender;\n        currentClaimPrice = startingClaimPrice;\n        currentMonarch = Monarch(\n            wizardAddress,\n            \"[Vacant]\",\n            0,\n            block.timestamp\n        );\n    }\n\n    function numberOfMonarchs() constant returns (uint n) {\n        return pastMonarchs.length;\n    }\n\n    // Fired when the throne is claimed.\n    // In theory can be used to help build a front-end.\n    event ThroneClaimed(\n        address usurperEtherAddress,\n        string usurperName,\n        uint newClaimPrice\n    );\n\n    // Fallback function - simple transactions trigger this.\n    // Assume the message data is their desired name.\n    function() {\n        claimThrone(string(msg.data));\n    }\n\n    // Claim the throne for the given name by paying the currentClaimFee.\n    function claimThrone(string name) {\n\n        uint valuePaid = msg.value;\n\n        // If they paid too little, reject claim and refund their money.\n        if (valuePaid < currentClaimPrice) {\n            // <yes> <report> UNCHECKED_LL_CALLS\n            msg.sender.send(valuePaid);\n            return;\n        }\n\n        // If they paid too much, continue with claim but refund the excess.\n        if (valuePaid > currentClaimPrice) {\n            uint excessPaid = valuePaid - currentClaimPrice;\n            // <yes> <report> UNCHECKED_LL_CALLS\n            msg.sender.send(excessPaid);\n            valuePaid = valuePaid - excessPaid;\n        }\n\n        // The claim price payment goes to the current monarch as compensation\n        // (with a commission held back for the wizard). We let the wizard's\n        // payments accumulate to avoid wasting gas sending small fees.\n\n        uint wizardCommission = (valuePaid * wizardCommissionFractionNum) / wizardCommissionFractionDen;\n\n        uint compensation = valuePaid - wizardCommission;\n\n        if (currentMonarch.etherAddress != wizardAddress) {\n            // <yes> <report> UNCHECKED_LL_CALLS\n            currentMonarch.etherAddress.send(compensation);\n        } else {\n            // When the throne is vacant, the fee accumulates for the wizard.\n        }\n\n        // Usurp the current monarch, replacing them with the new one.\n        pastMonarchs.push(currentMonarch);\n        currentMonarch = Monarch(\n            msg.sender,\n            name,\n            valuePaid,\n            block.timestamp\n        );\n\n        // Increase the claim fee for next time.\n        // Stop number of trailing decimals getting silly - we round it a bit.\n        uint rawNewClaimPrice = currentClaimPrice * claimPriceAdjustNum / claimPriceAdjustDen;\n        if (rawNewClaimPrice < 10 finney) {\n            currentClaimPrice = rawNewClaimPrice;\n        } else if (rawNewClaimPrice < 100 finney) {\n            currentClaimPrice = 100 szabo * (rawNewClaimPrice / 100 szabo);\n        } else if (rawNewClaimPrice < 1 ether) {\n            currentClaimPrice = 1 finney * (rawNewClaimPrice / 1 finney);\n        } else if (rawNewClaimPrice < 10 ether) {\n            currentClaimPrice = 10 finney * (rawNewClaimPrice / 10 finney);\n        } else if (rawNewClaimPrice < 100 ether) {\n            currentClaimPrice = 100 finney * (rawNewClaimPrice / 100 finney);\n        } else if (rawNewClaimPrice < 1000 ether) {\n            currentClaimPrice = 1 ether * (rawNewClaimPrice / 1 ether);\n        } else if (rawNewClaimPrice < 10000 ether) {\n            currentClaimPrice = 10 ether * (rawNewClaimPrice / 10 ether);\n        } else {\n            currentClaimPrice = rawNewClaimPrice;\n        }\n\n        // Hail the new monarch!\n        ThroneClaimed(currentMonarch.etherAddress, currentMonarch.name, currentClaimPrice);\n    }\n\n    // Used only by the wizard to collect his commission.\n    function sweepCommission(uint amount) onlywizard {\n        // <yes> <report> UNCHECKED_LL_CALLS\n        wizardAddress.send(amount);\n    }\n\n    // Used only by the wizard to collect his commission.\n    function transferOwnership(address newOwner) onlywizard {\n        wizardAddress = newOwner;\n    }\n\n}"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "103": [{"level": "warning", "tool": ["slither"], "fullDescription": "KingOfTheEtherThrone.claimThrone (/data/demo_analysis/source_code/king_of_the_ether_throne.sol#103-169) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- currentMonarch.etherAddress != wizardAddress (/data/demo_analysis/source_code/king_of_the_ether_throne.sol#130-135)\n", "name": "TimeManipulationVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "130": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "currentMonarch.etherAddress != wizardAddress"}, "fullDescription": "KingOfTheEtherThrone.claimThrone (/data/demo_analysis/source_code/king_of_the_ether_throne.sol#103-169) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- currentMonarch.etherAddress != wizardAddress (/data/demo_analysis/source_code/king_of_the_ether_throne.sol#130-135)\n", "name": "TimeManipulationVulnerability", "flag": "risk of false positives"}], "66": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"UncheckedLowCallsVulnerability": 4, "OtherVulnerability": 2, "DenialServiceVulnerability": 2, "FrontRunningVulnerability": 2, "ArithmeticVulnerability": 9, "TimeManipulationVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 16, "error": 0, "note": 5, "none": 0}, "false_positives": 0}, "overflow_single_tx": {"contract": "overflow_single_tx", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 1, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_5", "fullDescription": {"text": "A possible integer underflow exists in the function `underflowtostate(uint256)`.\nThe subtraction may result in a value < 0."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `overflowmultostate(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}], "listLine": [30, 24, 18, 36], "analysis": {"30": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "count -= input"}, "fullDescription": "A possible integer underflow exists in the function `underflowtostate(uint256)`.\nThe subtraction may result in a value < 0.", "name": "ArithmeticVulnerability"}], "24": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "count *= input"}, "fullDescription": "A possible integer overflow exists in the function `overflowmultostate(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "18": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "count += input"}, "fullDescription": "A possible integer overflow exists in the function `overflowmultostate(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "36": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 4}, "count_leve_vulnerabilities": {"warning": 4, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "0xf29ebe930a539a60279ace72c707cba851a57707": {"contract": "0xf29ebe930a539a60279ace72c707cba851a57707", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 1, "list_vulnerabilities": ["ReentrancyVulnerability", "OtherVulnerability", "UncheckedLowCallsVulnerability"], "rules": [{"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 349\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in B.go (/data/demo_analysis/source_code/0xf29ebe930a539a60279ace72c707cba851a57707.sol#13-20):\n\t-target.call.value(msg.value)() /data/demo_analysis/source_code/0xf29ebe930a539a60279ace72c707cba851a57707.sol#16-17\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}], "listLine": [16, 13], "analysis": {"16": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "ue(msg.value)();\n        owner"}, "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 349\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}], "13": [{"level": "note", "tool": ["slither"], "fullDescription": "Low level call in B.go (/data/demo_analysis/source_code/0xf29ebe930a539a60279ace72c707cba851a57707.sol#13-20):\n\t-target.call.value(msg.value)() /data/demo_analysis/source_code/0xf29ebe930a539a60279ace72c707cba851a57707.sol#16-17\n", "name": "UncheckedLowCallsVulnerability"}]}, "count_vulnerabilities": {"ReentrancyVulnerability": 1, "OtherVulnerability": 1, "UncheckedLowCallsVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 1, "error": 0, "note": 3, "none": 0}, "false_positives": 0}, "integer_overflow_mapping_sym_1": {"contract": "integer_overflow_mapping_sym_1", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_5", "fullDescription": {"text": "A possible integer underflow exists in the function `init(uint256,uint256)`.\nThe subtraction may result in a value < 0."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}], "listLine": [16], "analysis": {"16": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "map[k] -= v"}, "fullDescription": "A possible integer underflow exists in the function `init(uint256,uint256)`.\nThe subtraction may result in a value < 0.", "name": "ArithmeticVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 1, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "token": {"contract": "token", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_5", "fullDescription": {"text": "A possible integer underflow exists in the function `transfer(address,uint256)`.\nThe subtraction may result in a value < 0."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}], "listLine": [20, 22, 23], "analysis": {"20": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "balances[msg.sender] - _value"}, "fullDescription": "A possible integer underflow exists in the function `transfer(address,uint256)`.\nThe subtraction may result in a value < 0.", "name": "ArithmeticVulnerability"}], "22": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "balances[msg.sender] -= _value"}, "fullDescription": "A possible integer underflow exists in the function `transfer(address,uint256)`.\nThe subtraction may result in a value < 0.", "name": "ArithmeticVulnerability"}], "23": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "balances[_to] += _value"}, "fullDescription": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 3}, "count_leve_vulnerabilities": {"warning": 3, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "governmental_survey": {"contract": "governmental_survey", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 8, "list_vulnerabilities": ["OtherVulnerability", "AccessControlVulnerability", "FrontRunningVulnerability", "UncheckedLowCallsVulnerability", "ArithmeticVulnerability", "TimeManipulationVulnerability"], "rules": [{"id": "Other_7", "fullDescription": {"text": "In the function `resetInvestment()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Dependence on predictable environment variable"}}, {"id": "AccessControl_13", "fullDescription": {"text": "In the function `resetInvestment()` a non-zero amount of Ether is sent to an address taken from storage slot 1.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `resetInvestment()`.\n\nThere is a check on storage index 3. This storage slot can be written to by calling the function `resetInvestment()`."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 708\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function resetInvestment(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "AccessControl_19", "fullDescription": {"text": "Governmental.resetInvestment (/data/demo_analysis/source_code/governmental_survey.sol#30-40) sends eth to arbitrary user\n\tDangerous calls:\n\t- owner.send(this.balance - 1000000000000000000) (/data/demo_analysis/source_code/governmental_survey.sol#35)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "TimeManipulation_4", "fullDescription": {"text": "Governmental.resetInvestment (/data/demo_analysis/source_code/governmental_survey.sol#30-40) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp < lastInvestmentTimestamp + ONE_MINUTE (/data/demo_analysis/source_code/governmental_survey.sol#31-32)\n"}, "name": "TimeManipulationVulnerability", "shortDescription": {"text": "timestamp"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}], "listLine": [34, 35, 30, 31], "analysis": {"34": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "lastInvestor.send(jackpot)"}, "fullDescription": "In the function `resetInvestment()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "In the function `resetInvestment()` a non-zero amount of Ether is sent to an address taken from storage slot 1.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `resetInvestment()`.\n\nThere is a check on storage index 3. This storage slot can be written to by calling the function `resetInvestment()`.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function resetInvestment(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}], "35": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "owner.send(this.balance-1 ether)"}, "fullDescription": "In the function `resetInvestment()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "error", "tool": ["slither"], "fullDescription": "Governmental.resetInvestment (/data/demo_analysis/source_code/governmental_survey.sol#30-40) sends eth to arbitrary user\n\tDangerous calls:\n\t- owner.send(this.balance - 1000000000000000000) (/data/demo_analysis/source_code/governmental_survey.sol#35)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "30": [{"level": "error", "tool": ["slither"], "fullDescription": "Governmental.resetInvestment (/data/demo_analysis/source_code/governmental_survey.sol#30-40) sends eth to arbitrary user\n\tDangerous calls:\n\t- owner.send(this.balance - 1000000000000000000) (/data/demo_analysis/source_code/governmental_survey.sol#35)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Governmental.resetInvestment (/data/demo_analysis/source_code/governmental_survey.sol#30-40) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp < lastInvestmentTimestamp + ONE_MINUTE (/data/demo_analysis/source_code/governmental_survey.sol#31-32)\n", "name": "TimeManipulationVulnerability", "flag": "risk of false positives"}], "31": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "block.timestamp < lastInvestmentTimestamp + ONE_MINUTE"}, "fullDescription": "Governmental.resetInvestment (/data/demo_analysis/source_code/governmental_survey.sol#30-40) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp < lastInvestmentTimestamp + ONE_MINUTE (/data/demo_analysis/source_code/governmental_survey.sol#31-32)\n", "name": "TimeManipulationVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"OtherVulnerability": 2, "AccessControlVulnerability": 3, "FrontRunningVulnerability": 1, "UncheckedLowCallsVulnerability": 2, "ArithmeticVulnerability": 1, "TimeManipulationVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 7, "error": 2, "note": 2, "none": 0}, "false_positives": 0}, "roulette": {"contract": "roulette", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 2, "list_vulnerabilities": ["AccessControlVulnerability", "OtherVulnerability"], "rules": [{"id": "AccessControl_19", "fullDescription": {"text": "Roulette.fallback (/data/demo_analysis/source_code/roulette.sol#15-24) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/roulette.sol#22)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "Other_11", "fullDescription": {"text": "Roulette.fallback (/data/demo_analysis/source_code/roulette.sol#15-24) uses a dangerous strict equality:\n\t- now % 15 == 0\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "incorrect-equality"}}], "listLine": [15, 22, 21], "analysis": {"15": [{"level": "error", "tool": ["slither"], "fullDescription": "Roulette.fallback (/data/demo_analysis/source_code/roulette.sol#15-24) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/roulette.sol#22)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Roulette.fallback (/data/demo_analysis/source_code/roulette.sol#15-24) uses a dangerous strict equality:\n\t- now % 15 == 0\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "22": [{"level": "error", "tool": ["slither"], "snippet": {"text": "msg.sender.transfer(this.balance)"}, "fullDescription": "Roulette.fallback (/data/demo_analysis/source_code/roulette.sol#15-24) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/roulette.sol#22)\n", "name": "AccessControlVulnerability"}], "21": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "now % 15 == 0"}, "fullDescription": "Roulette.fallback (/data/demo_analysis/source_code/roulette.sol#15-24) uses a dangerous strict equality:\n\t- now % 15 == 0\n", "name": "OtherVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 2, "OtherVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 2, "error": 2, "note": 0, "none": 0}, "false_positives": 0}, "0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1": {"contract": "0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 5, "list_vulnerabilities": ["ArithmeticVulnerability", "OtherVulnerability", "ReentrancyVulnerability", "UncheckedLowCallsVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in ACCURAL_DEPOSIT.Collect (/data/demo_analysis/source_code/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol#50-67):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol#57-65)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol#58)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in ACCURAL_DEPOSIT.Collect (/data/demo_analysis/source_code/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol#50-67):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol#57-65\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "Reentrancy_13", "name": "ReentrancyVulnerability", "shortDescription": {"text": "straw_man_contract"}}], "listLine": [91, 3, 88, 79, 50, 57, 55, 84], "analysis": {"91": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "sg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "3": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "an.io \n * @author:"}, "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "88": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "dress _adr,uint _val,str"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "79": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "   string  Data;\n        uint Val;\n        uint  Time;\n    }\n    \n    Message[] public History;\n    \n    Message LastMsg;\n    \n    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "50": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in ACCURAL_DEPOSIT.Collect (/data/demo_analysis/source_code/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol#50-67):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol#57-65)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol#58)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in ACCURAL_DEPOSIT.Collect (/data/demo_analysis/source_code/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol#50-67):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol#57-65\n", "name": "UncheckedLowCallsVulnerability"}], "57": [{"level": "error", "tool": ["slither"], "snippet": {"text": "msg.sender.call.value(_am)()"}, "fullDescription": "Reentrancy in ACCURAL_DEPOSIT.Collect (/data/demo_analysis/source_code/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol#50-67):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol#57-65)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol#58)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in ACCURAL_DEPOSIT.Collect (/data/demo_analysis/source_code/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol#50-67):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol#57-65\n", "name": "UncheckedLowCallsVulnerability"}], "58": [], "55": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ReentrancyVulnerability"}], "84": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 8, "OtherVulnerability": 1, "ReentrancyVulnerability": 2, "UncheckedLowCallsVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 8, "error": 2, "note": 3, "none": 0}, "false_positives": 1}, "spank_chain_payment": {"contract": "spank_chain_payment", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 72, "list_vulnerabilities": ["ArithmeticVulnerability", "AccessControlVulnerability", "OtherVulnerability", "ReentrancyVulnerability", "UncheckedLowCallsVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "AccessControl_19", "fullDescription": {"text": "LedgerChannel.consensusCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#495-546) sends eth to arbitrary user\n\tDangerous calls:\n\t- Channels[_lcID].partyAddresses[0].transfer(_balances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#534)\n\t- Channels[_lcID].partyAddresses[1].transfer(_balances[1]) (/data/demo_analysis/source_code/spank_chain_payment.sol#535)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "Other_11", "fullDescription": {"text": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "incorrect-equality"}}, {"id": "Reentrancy_11", "fullDescription": {"text": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-no-eth"}}, {"id": "Reentrancy_9", "fullDescription": {"text": "Reentrancy in LedgerChannel.byzantineCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#756-817):\n\tExternal calls:\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#803-806)\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#807-810)\n\tExternal calls sending eth:\n\t- channel.partyAddresses[0].transfer(ethbalanceA) (/data/demo_analysis/source_code/spank_chain_payment.sol#798)\n\t- channel.partyAddresses[1].transfer(ethbalanceI) (/data/demo_analysis/source_code/spank_chain_payment.sol#799)\n\tState variables written after the call(s):\n\t- numChannels (/data/demo_analysis/source_code/spank_chain_payment.sol#814)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-benign"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in HumanStandardToken.approveAndCall (/data/demo_analysis/source_code/spank_chain_payment.sol#252-261):\n\t-require(bool)(_spender.call(bytes4(bytes32(keccak256()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)) /data/demo_analysis/source_code/spank_chain_payment.sol#259\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}], "listLine": [198, 189, 495, 534, 535, 420, 430, 426, 436, 756, 803, 807, 798, 799, 813, 421, 819, 833, 725, 737, 743, 506, 509, 510, 528, 529, 380, 390, 465, 466, 467, 471, 481, 615, 643, 439, 441, 442, 406, 407, 410, 414, 411, 415, 473, 487, 474, 483, 484, 449, 456, 454, 450, 453, 814, 539, 540, 543, 457, 252, 259, 62, 91, 116, 139, 98, 167, 233, 236, 235], "analysis": {"198": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "balances[_to] += _value"}, "fullDescription": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "189": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "balances[_to] += _value"}, "fullDescription": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "495": [{"level": "error", "tool": ["slither"], "fullDescription": "LedgerChannel.consensusCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#495-546) sends eth to arbitrary user\n\tDangerous calls:\n\t- Channels[_lcID].partyAddresses[0].transfer(_balances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#534)\n\t- Channels[_lcID].partyAddresses[1].transfer(_balances[1]) (/data/demo_analysis/source_code/spank_chain_payment.sol#535)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in LedgerChannel.byzantineCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#756-817):\n\tExternal calls:\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#803-806)\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#807-810)\n\tExternal calls sending eth:\n\t- channel.partyAddresses[0].transfer(ethbalanceA) (/data/demo_analysis/source_code/spank_chain_payment.sol#798)\n\t- channel.partyAddresses[1].transfer(ethbalanceI) (/data/demo_analysis/source_code/spank_chain_payment.sol#799)\n\tState variables written after the call(s):\n\t- numChannels (/data/demo_analysis/source_code/spank_chain_payment.sol#814)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "534": [{"level": "error", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].partyAddresses[0].transfer(_balances[0])"}, "fullDescription": "LedgerChannel.consensusCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#495-546) sends eth to arbitrary user\n\tDangerous calls:\n\t- Channels[_lcID].partyAddresses[0].transfer(_balances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#534)\n\t- Channels[_lcID].partyAddresses[1].transfer(_balances[1]) (/data/demo_analysis/source_code/spank_chain_payment.sol#535)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in LedgerChannel.byzantineCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#756-817):\n\tExternal calls:\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#803-806)\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#807-810)\n\tExternal calls sending eth:\n\t- channel.partyAddresses[0].transfer(ethbalanceA) (/data/demo_analysis/source_code/spank_chain_payment.sol#798)\n\t- channel.partyAddresses[1].transfer(ethbalanceI) (/data/demo_analysis/source_code/spank_chain_payment.sol#799)\n\tState variables written after the call(s):\n\t- numChannels (/data/demo_analysis/source_code/spank_chain_payment.sol#814)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "535": [{"level": "error", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].partyAddresses[1].transfer(_balances[1])"}, "fullDescription": "LedgerChannel.consensusCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#495-546) sends eth to arbitrary user\n\tDangerous calls:\n\t- Channels[_lcID].partyAddresses[0].transfer(_balances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#534)\n\t- Channels[_lcID].partyAddresses[1].transfer(_balances[1]) (/data/demo_analysis/source_code/spank_chain_payment.sol#535)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in LedgerChannel.byzantineCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#756-817):\n\tExternal calls:\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#803-806)\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#807-810)\n\tExternal calls sending eth:\n\t- channel.partyAddresses[0].transfer(ethbalanceA) (/data/demo_analysis/source_code/spank_chain_payment.sol#798)\n\t- channel.partyAddresses[1].transfer(ethbalanceI) (/data/demo_analysis/source_code/spank_chain_payment.sol#799)\n\tState variables written after the call(s):\n\t- numChannels (/data/demo_analysis/source_code/spank_chain_payment.sol#814)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "420": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["slither"], "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "430": [{"level": "error", "tool": ["slither"], "snippet": {"text": "require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure)"}, "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "426": [{"level": "error", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0])"}, "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "436": [{"level": "error", "tool": ["slither"], "snippet": {"text": "delete Channels[_lcID]"}, "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "756": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "803": [{"level": "error", "tool": ["slither"], "snippet": {"text": "require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure)"}, "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "807": [{"level": "error", "tool": ["slither"], "snippet": {"text": "require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure)"}, "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "798": [{"level": "error", "tool": ["slither"], "snippet": {"text": "channel.partyAddresses[0].transfer(ethbalanceA)"}, "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "799": [{"level": "error", "tool": ["slither"], "snippet": {"text": "channel.partyAddresses[1].transfer(ethbalanceI)"}, "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "813": [{"level": "error", "tool": ["slither"], "snippet": {"text": "channel.isOpen = false"}, "fullDescription": "Reentrancy in LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#430)\n\tExternal calls sending eth:\n\t- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/data/demo_analysis/source_code/spank_chain_payment.sol#426)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#436)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "421": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "819": [{"level": "warning", "tool": ["slither"], "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "833": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "cursor == _root"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "725": [{"level": "warning", "tool": ["slither"], "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "737": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "virtualChannels[_vcID].partyA == Channels[_lcID].partyAddresses[0]"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "743": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "virtualChannels[_vcID].partyB == Channels[_lcID].partyAddresses[0]"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "506": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(Channels[_lcID].isOpen == true)"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "509": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(totalEthDeposit == _balances[0] + _balances[1])"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "510": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(totalTokenDeposit == _balances[2] + _balances[3])"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "528": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(Channels[_lcID].partyAddresses[0] == ECTools.recoverSigner(_state,_sigA))"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "529": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(Channels[_lcID].partyAddresses[1] == ECTools.recoverSigner(_state,_sigI))"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "380": [{"level": "warning", "tool": ["slither"], "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "390": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool,string)(Channels[_lcID].partyAddresses[0] == address(0),Channel has already been created.)"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "465": [{"level": "warning", "tool": ["slither"], "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "466": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool,string)(Channels[_lcID].isOpen == true,Tried adding funds to a closed channel)"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "467": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(recipient == Channels[_lcID].partyAddresses[0] || recipient == Channels[_lcID].partyAddresses[1])"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "471": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].partyAddresses[0] == recipient"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "481": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].partyAddresses[1] == recipient"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "615": [{"level": "warning", "tool": ["slither"], "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "643": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(_isContained(_initState,_proof,Channels[_lcID].VCrootHash) == true)"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "439": [{"level": "warning", "tool": ["slither"], "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "441": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(Channels[_lcID].isOpen == false)"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "442": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(msg.sender == Channels[_lcID].partyAddresses[1])"}, "fullDescription": "LedgerChannel.LCOpenTimeout (/data/demo_analysis/source_code/spank_chain_payment.sol#420-437) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n\t- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "406": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure)"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "407": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].erc20Balances[0] = _balances[1]"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "410": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].sequence = 0"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "414": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].LCopenTimeout = now + _confirmTime"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "411": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].confirmTime = _confirmTime"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "415": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].initialDeposit = _balances"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "473": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balance),deposit: token transfer failure)"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "487": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].ethBalances[3] += msg.value"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "474": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].erc20Balances[2] += _balance"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "483": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balance),deposit: token transfer failure)"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "484": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].erc20Balances[3] += _balance"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "449": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),joinChannel: token transfer failure)"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "456": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].isOpen = true"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "454": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].initialDeposit[1] += _balances[1]"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "450": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].erc20Balances[1] = _balances[1]"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "453": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "Channels[_lcID].initialDeposit[0] += _balances[0]"}, "fullDescription": "Reentrancy in LedgerChannel.createChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#380-418):\n\tExternal calls:\n\t- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#406)\n\tState variables written after the call(s):\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#407)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#410)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#411)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#414)\n\t- Channels (/data/demo_analysis/source_code/spank_chain_payment.sol#415)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "814": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "numChannels --"}, "fullDescription": "Reentrancy in LedgerChannel.byzantineCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#756-817):\n\tExternal calls:\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#803-806)\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#807-810)\n\tExternal calls sending eth:\n\t- channel.partyAddresses[0].transfer(ethbalanceA) (/data/demo_analysis/source_code/spank_chain_payment.sol#798)\n\t- channel.partyAddresses[1].transfer(ethbalanceI) (/data/demo_analysis/source_code/spank_chain_payment.sol#799)\n\tState variables written after the call(s):\n\t- numChannels (/data/demo_analysis/source_code/spank_chain_payment.sol#814)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "539": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],_balances[2]),happyCloseChannel: token transfer failure)"}, "fullDescription": "Reentrancy in LedgerChannel.byzantineCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#756-817):\n\tExternal calls:\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#803-806)\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#807-810)\n\tExternal calls sending eth:\n\t- channel.partyAddresses[0].transfer(ethbalanceA) (/data/demo_analysis/source_code/spank_chain_payment.sol#798)\n\t- channel.partyAddresses[1].transfer(ethbalanceI) (/data/demo_analysis/source_code/spank_chain_payment.sol#799)\n\tState variables written after the call(s):\n\t- numChannels (/data/demo_analysis/source_code/spank_chain_payment.sol#814)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "540": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[1],_balances[3]),happyCloseChannel: token transfer failure)"}, "fullDescription": "Reentrancy in LedgerChannel.byzantineCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#756-817):\n\tExternal calls:\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#803-806)\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#807-810)\n\tExternal calls sending eth:\n\t- channel.partyAddresses[0].transfer(ethbalanceA) (/data/demo_analysis/source_code/spank_chain_payment.sol#798)\n\t- channel.partyAddresses[1].transfer(ethbalanceI) (/data/demo_analysis/source_code/spank_chain_payment.sol#799)\n\tState variables written after the call(s):\n\t- numChannels (/data/demo_analysis/source_code/spank_chain_payment.sol#814)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "543": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "numChannels --"}, "fullDescription": "Reentrancy in LedgerChannel.byzantineCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#756-817):\n\tExternal calls:\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#803-806)\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#807-810)\n\tExternal calls sending eth:\n\t- channel.partyAddresses[0].transfer(ethbalanceA) (/data/demo_analysis/source_code/spank_chain_payment.sol#798)\n\t- channel.partyAddresses[1].transfer(ethbalanceI) (/data/demo_analysis/source_code/spank_chain_payment.sol#799)\n\tState variables written after the call(s):\n\t- numChannels (/data/demo_analysis/source_code/spank_chain_payment.sol#814)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "457": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "numChannels ++"}, "fullDescription": "Reentrancy in LedgerChannel.byzantineCloseChannel (/data/demo_analysis/source_code/spank_chain_payment.sol#756-817):\n\tExternal calls:\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#803-806)\n\t- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/data/demo_analysis/source_code/spank_chain_payment.sol#807-810)\n\tExternal calls sending eth:\n\t- channel.partyAddresses[0].transfer(ethbalanceA) (/data/demo_analysis/source_code/spank_chain_payment.sol#798)\n\t- channel.partyAddresses[1].transfer(ethbalanceI) (/data/demo_analysis/source_code/spank_chain_payment.sol#799)\n\tState variables written after the call(s):\n\t- numChannels (/data/demo_analysis/source_code/spank_chain_payment.sol#814)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "252": [{"level": "note", "tool": ["slither"], "fullDescription": "Low level call in HumanStandardToken.approveAndCall (/data/demo_analysis/source_code/spank_chain_payment.sol#252-261):\n\t-require(bool)(_spender.call(bytes4(bytes32(keccak256()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)) /data/demo_analysis/source_code/spank_chain_payment.sol#259\n", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "259": [{"level": "note", "tool": ["slither"], "snippet": {"text": "require(bool)(_spender.call(bytes4(bytes32(keccak256()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData))"}, "fullDescription": "Low level call in HumanStandardToken.approveAndCall (/data/demo_analysis/source_code/spank_chain_payment.sol#252-261):\n\t-require(bool)(_spender.call(bytes4(bytes32(keccak256()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)) /data/demo_analysis/source_code/spank_chain_payment.sol#259\n", "name": "UncheckedLowCallsVulnerability"}], "62": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "91": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "116": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "139": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "98": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "167": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "233": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "236": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "235": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 12, "AccessControlVulnerability": 3, "OtherVulnerability": 25, "ReentrancyVulnerability": 37, "UncheckedLowCallsVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 64, "error": 13, "note": 2, "none": 0}, "false_positives": 0}, "0x610495793564aed0f9c7fc48dc4c7c9151d34fd6": {"contract": "0x610495793564aed0f9c7fc48dc4c7c9151d34fd6", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 2, "list_vulnerabilities": ["ArithmeticVulnerability", "UncheckedLowCallsVulnerability", "ReentrancyVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in SimpleWallet.sendMoney (/data/demo_analysis/source_code/0x610495793564aed0f9c7fc48dc4c7c9151d34fd6.sol#31-35):\n\t-_target.call.value(_value)(_data) /data/demo_analysis/source_code/0x610495793564aed0f9c7fc48dc4c7c9151d34fd6.sol#33-35\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [21, 31, 33, 20], "analysis": {"21": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "  }\n    \n    fu"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "31": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "rget, uint _value, bytes _data) public onlyOwner {\n        // <yes> <report> UNCHECKED_LL_CALLS\n        _target.call.value(_value)(_data);\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in SimpleWallet.sendMoney (/data/demo_analysis/source_code/0x610495793564aed0f9c7fc48dc4c7c9151d34fd6.sol#31-35):\n\t-_target.call.value(_value)(_data) /data/demo_analysis/source_code/0x610495793564aed0f9c7fc48dc4c7c9151d34fd6.sol#33-35\n", "name": "UncheckedLowCallsVulnerability"}], "33": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": ");\n    }\n}"}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "20": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 3, "UncheckedLowCallsVulnerability": 2, "ReentrancyVulnerability": 1, "DenialServiceVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 5, "error": 0, "note": 2, "none": 0}, "false_positives": 0}, "crypto_roulette": {"contract": "crypto_roulette", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 5, "list_vulnerabilities": ["OtherVulnerability", "ArithmeticVulnerability", "AccessControlVulnerability"], "rules": [{"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `kill()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "AccessControl_19", "fullDescription": {"text": "CryptoRoulette.play (/data/demo_analysis/source_code/crypto_roulette.sol#37-52) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/crypto_roulette.sol#47)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "Other_15", "fullDescription": {"text": "game in CryptoRoulette.play (/data/demo_analysis/source_code/crypto_roulette.sol#40) is a storage variable never initialiazed\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "uninitialized-storage"}}, {"id": "Other_11", "fullDescription": {"text": "CryptoRoulette.play (/data/demo_analysis/source_code/crypto_roulette.sol#37-52) uses a dangerous strict equality:\n\t- number == secretNumber\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "incorrect-equality"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "Other_20", "name": "OtherVulnerability", "shortDescription": {"text": "uninitialised_struct"}}], "listLine": [25, 55, 2, 37, 47, 40, 45, 41], "analysis": {"25": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "Game[] public gamesPlayed"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "55": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "lastPlayed + 1 days"}, "fullDescription": "A possible integer overflow exists in the function `kill()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "2": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "github.com/thec00n"}, "fullDescription": "A possible integer overflow exists in the function `kill()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "37": [{"level": "error", "tool": ["slither"], "fullDescription": "CryptoRoulette.play (/data/demo_analysis/source_code/crypto_roulette.sol#37-52) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/crypto_roulette.sol#47)\n", "name": "AccessControlVulnerability"}, {"level": "error", "tool": ["slither"], "fullDescription": "game in CryptoRoulette.play (/data/demo_analysis/source_code/crypto_roulette.sol#40) is a storage variable never initialiazed\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "47": [{"level": "error", "tool": ["slither"], "snippet": {"text": "msg.sender.transfer(this.balance)"}, "fullDescription": "CryptoRoulette.play (/data/demo_analysis/source_code/crypto_roulette.sol#37-52) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/crypto_roulette.sol#47)\n", "name": "AccessControlVulnerability"}], "40": [{"level": "error", "tool": ["slither"], "fullDescription": "game in CryptoRoulette.play (/data/demo_analysis/source_code/crypto_roulette.sol#40) is a storage variable never initialiazed\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "45": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "number == secretNumber"}, "fullDescription": "CryptoRoulette.play (/data/demo_analysis/source_code/crypto_roulette.sol#37-52) uses a dangerous strict equality:\n\t- number == secretNumber\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "42": [], "41": [{"level": "warning", "tool": ["honeybadger"], "snippet": {}, "name": "OtherVulnerability"}]}, "count_vulnerabilities": {"OtherVulnerability": 4, "ArithmeticVulnerability": 3, "AccessControlVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 4, "error": 4, "note": 1, "none": 0}, "false_positives": 1}, "0x958a8f594101d2c0485a52319f29b2647f2ebc06": {"contract": "0x958a8f594101d2c0485a52319f29b2647f2ebc06", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 11, "list_vulnerabilities": ["ArithmeticVulnerability", "UncheckedLowCallsVulnerability", "ReentrancyVulnerability", "AccessControlVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `execute(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "AccessControl_19", "fullDescription": {"text": "Marriage.sendMessage (/data/demo_analysis/source_code/0x958a8f594101d2c0485a52319f29b2647f2ebc06.sol#138-147) sends eth to arbitrary user\n\tDangerous calls:\n\t- owner.transfer(this.balance) (/data/demo_analysis/source_code/0x958a8f594101d2c0485a52319f29b2647f2ebc06.sol#141-142)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in Owned.execute (/data/demo_analysis/source_code/0x958a8f594101d2c0485a52319f29b2647f2ebc06.sol#53-62):\n\t-_dst.call.value(_value)(_data) /data/demo_analysis/source_code/0x958a8f594101d2c0485a52319f29b2647f2ebc06.sol#60-62\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [53, 60, 138, 141, 64, 70, 67, 66, 69, 63, 106, 130, 136, 123, 55], "analysis": {"53": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "ata) onlyOwner {\n         // <yes> <report> UNCHECKED_LL_CALLS\n        _dst.call.value(_value)(_data);\n    }\n}\n\n\ncontract Marriage is Owned\n{\n    // Marriage data "}, "fullDescription": "A possible integer overflow exists in the function `execute(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Owned.execute (/data/demo_analysis/source_code/0x958a8f594101d2c0485a52319f29b2647f2ebc06.sol#53-62):\n\t-_dst.call.value(_value)(_data) /data/demo_analysis/source_code/0x958a8f594101d2c0485a52319f29b2647f2ebc06.sol#60-62\n", "name": "UncheckedLowCallsVulnerability"}], "60": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "riage is Owned\n{\n    // Marria"}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}], "138": [{"level": "error", "tool": ["slither"], "fullDescription": "Marriage.sendMessage (/data/demo_analysis/source_code/0x958a8f594101d2c0485a52319f29b2647f2ebc06.sol#138-147) sends eth to arbitrary user\n\tDangerous calls:\n\t- owner.transfer(this.balance) (/data/demo_analysis/source_code/0x958a8f594101d2c0485a52319f29b2647f2ebc06.sol#141-142)\n", "name": "AccessControlVulnerability"}], "141": [{"level": "error", "tool": ["slither"], "snippet": {"text": "owner.transfer(this.balance)"}, "fullDescription": "Marriage.sendMessage (/data/demo_analysis/source_code/0x958a8f594101d2c0485a52319f29b2647f2ebc06.sol#138-147) sends eth to arbitrary user\n\tDangerous calls:\n\t- owner.transfer(this.balance) (/data/demo_analysis/source_code/0x958a8f594101d2c0485a52319f29b2647f2ebc06.sol#141-142)\n", "name": "AccessControlVulnerability"}], "64": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "70": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "67": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "66": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "69": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "63": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "106": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "130": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "136": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "123": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "55": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "DenialServiceVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 11, "UncheckedLowCallsVulnerability": 2, "ReentrancyVulnerability": 1, "AccessControlVulnerability": 2, "DenialServiceVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 13, "error": 2, "note": 2, "none": 0}, "false_positives": 0}, "guess_the_random_number": {"contract": "guess_the_random_number", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 4, "list_vulnerabilities": ["AccessControlVulnerability", "OtherVulnerability"], "rules": [{"id": "AccessControl_19", "fullDescription": {"text": "GuessTheRandomNumberChallenge.guess (/data/demo_analysis/source_code/guess_the_random_number.sol#22-28) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(2000000000000000000) (/data/demo_analysis/source_code/guess_the_random_number.sol#26)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "Other_11", "fullDescription": {"text": "GuessTheRandomNumberChallenge.guess (/data/demo_analysis/source_code/guess_the_random_number.sol#22-28) uses a dangerous strict equality:\n\t- n == answer\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "incorrect-equality"}}], "listLine": [22, 26, 25, 18, 19], "analysis": {"22": [{"level": "error", "tool": ["slither"], "fullDescription": "GuessTheRandomNumberChallenge.guess (/data/demo_analysis/source_code/guess_the_random_number.sol#22-28) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(2000000000000000000) (/data/demo_analysis/source_code/guess_the_random_number.sol#26)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "GuessTheRandomNumberChallenge.guess (/data/demo_analysis/source_code/guess_the_random_number.sol#22-28) uses a dangerous strict equality:\n\t- n == answer\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "26": [{"level": "error", "tool": ["slither"], "snippet": {"text": "msg.sender.transfer(2000000000000000000)"}, "fullDescription": "GuessTheRandomNumberChallenge.guess (/data/demo_analysis/source_code/guess_the_random_number.sol#22-28) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(2000000000000000000) (/data/demo_analysis/source_code/guess_the_random_number.sol#26)\n", "name": "AccessControlVulnerability"}], "25": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "n == answer"}, "fullDescription": "GuessTheRandomNumberChallenge.guess (/data/demo_analysis/source_code/guess_the_random_number.sol#22-28) uses a dangerous strict equality:\n\t- n == answer\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "18": [{"level": "warning", "tool": ["slither"], "fullDescription": "GuessTheRandomNumberChallenge.guess (/data/demo_analysis/source_code/guess_the_random_number.sol#22-28) uses a dangerous strict equality:\n\t- n == answer\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "19": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "address(this).balance == 0"}, "fullDescription": "GuessTheRandomNumberChallenge.guess (/data/demo_analysis/source_code/guess_the_random_number.sol#22-28) uses a dangerous strict equality:\n\t- n == answer\n", "name": "OtherVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 2, "OtherVulnerability": 4}, "count_leve_vulnerabilities": {"warning": 4, "error": 2, "note": 0, "none": 0}, "false_positives": 0}, "0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e": {"contract": "0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 9, "list_vulnerabilities": ["AccessControlVulnerability", "OtherVulnerability", "ReentrancyVulnerability", "UncheckedLowCallsVulnerability", "ArithmeticVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "AccessControl_15", "fullDescription": {"text": "Function wager() retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Use of tx.origin"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Reentrancy_4", "fullDescription": {"text": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "State change after external call"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `donate()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "AccessControl_19", "fullDescription": {"text": "PoCGame.payout (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#191-201) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.transfer(ethToTransfer) (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#200)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "Other_11", "fullDescription": {"text": "PoCGame.play (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#147-179) uses a dangerous strict equality:\n\t- winningNumber == difficulty / 2\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "incorrect-equality"}}, {"id": "Reentrancy_9", "fullDescription": {"text": "Reentrancy in PoCGame.donateToWhale (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#202-213):\n\tExternal calls:\n\t- whale.call.value(amount)(bytes4(keccak256()(donate()))) (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#208-210)\n\tState variables written after the call(s):\n\t- totalDonated (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#212)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-benign"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in PoCGame.donateToWhale (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#202-213):\n\t-whale.call.value(amount)(bytes4(keccak256()(donate()))) /data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#208-210\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [33, 156, 297, 222, 227, 208, 212, 191, 200, 215, 147, 161, 202, 153, 201, 213], "analysis": {"33": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "\n    modi"}, "fullDescription": "Function wager() retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "name": "AccessControlVulnerability"}], "156": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "  {\n                payout(msg.sender);\n            }\n            else \n            "}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "297": [{"level": "warning", "tool": ["mythril"], "snippet": {}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}], "222": [{"level": "note", "tool": ["mythril", "slither"], "snippet": {"text": " \n    public \n    view \n    returns (uint256)\n    {\n   "}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "error", "tool": ["slither"], "fullDescription": "PoCGame.payout (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#191-201) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.transfer(ethToTransfer) (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#200)\n", "name": "AccessControlVulnerability"}], "227": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": " address(this).balance"}, "fullDescription": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "name": "ReentrancyVulnerability"}], "208": [{"level": "note", "tool": ["mythril", "slither"], "snippet": {"text": "  */\n    function loseWager(uint256 amount) \n    intern"}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}], "212": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "       // <yes> <repor"}, "fullDescription": "A possible integer overflow exists in the function `donate()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril", "slither"], "fullDescription": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "name": "ReentrancyVulnerability"}], "191": [{"level": "error", "tool": ["slither"], "fullDescription": "PoCGame.payout (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#191-201) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.transfer(ethToTransfer) (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#200)\n", "name": "AccessControlVulnerability"}], "200": [{"level": "error", "tool": ["slither"], "snippet": {"text": "winner.transfer(ethToTransfer)"}, "fullDescription": "PoCGame.payout (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#191-201) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.transfer(ethToTransfer) (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#200)\n", "name": "AccessControlVulnerability"}], "215": [{"level": "error", "tool": ["slither"], "fullDescription": "PoCGame.payout (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#191-201) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.transfer(ethToTransfer) (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#200)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in PoCGame.donateToWhale (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#202-213):\n\tExternal calls:\n\t- whale.call.value(amount)(bytes4(keccak256()(donate()))) (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#208-210)\n\tState variables written after the call(s):\n\t- totalDonated (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#212)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in PoCGame.donateToWhale (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#202-213):\n\t-whale.call.value(amount)(bytes4(keccak256()(donate()))) /data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#208-210\n", "name": "UncheckedLowCallsVulnerability"}], "147": [{"level": "warning", "tool": ["slither"], "fullDescription": "PoCGame.play (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#147-179) uses a dangerous strict equality:\n\t- winningNumber == difficulty / 2\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "161": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "winningNumber == difficulty / 2"}, "fullDescription": "PoCGame.play (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#147-179) uses a dangerous strict equality:\n\t- winningNumber == difficulty / 2\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "202": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in PoCGame.donateToWhale (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#202-213):\n\tExternal calls:\n\t- whale.call.value(amount)(bytes4(keccak256()(donate()))) (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#208-210)\n\tState variables written after the call(s):\n\t- totalDonated (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#212)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in PoCGame.donateToWhale (/data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#202-213):\n\t-whale.call.value(amount)(bytes4(keccak256()(donate()))) /data/demo_analysis/source_code/0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#208-210\n", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "153": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "201": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "213": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "DenialServiceVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 5, "OtherVulnerability": 3, "ReentrancyVulnerability": 7, "UncheckedLowCallsVulnerability": 4, "ArithmeticVulnerability": 3, "DenialServiceVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 13, "error": 4, "note": 7, "none": 0}, "false_positives": 0}, "timed_crowdsale": {"contract": "timed_crowdsale", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 2, "list_vulnerabilities": ["TimeManipulationVulnerability"], "rules": [{"id": "TimeManipulation_4", "fullDescription": {"text": "TimedCrowdsale.isSaleFinished (/data/demo_analysis/source_code/timed_crowdsale.sol#11-14) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= 1546300800 (/data/demo_analysis/source_code/timed_crowdsale.sol#13)\n"}, "name": "TimeManipulationVulnerability", "shortDescription": {"text": "timestamp"}}], "listLine": [11, 13], "analysis": {"11": [{"level": "warning", "tool": ["slither"], "fullDescription": "TimedCrowdsale.isSaleFinished (/data/demo_analysis/source_code/timed_crowdsale.sol#11-14) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= 1546300800 (/data/demo_analysis/source_code/timed_crowdsale.sol#13)\n", "name": "TimeManipulationVulnerability", "flag": "risk of false positives"}], "13": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "block.timestamp >= 1546300800"}, "fullDescription": "TimedCrowdsale.isSaleFinished (/data/demo_analysis/source_code/timed_crowdsale.sol#11-14) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= 1546300800 (/data/demo_analysis/source_code/timed_crowdsale.sol#13)\n", "name": "TimeManipulationVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"TimeManipulationVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 2, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b": {"contract": "0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 6, "list_vulnerabilities": ["ArithmeticVulnerability", "ReentrancyVulnerability", "FrontRunningVulnerability", "OtherVulnerability", "UncheckedLowCallsVulnerability", "TimeManipulationVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "Other_7", "fullDescription": {"text": "In the function `Collect(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Dependence on predictable environment variable"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1401\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in PENNY_BY_PENNY.Collect (/data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#58-76):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#65-74)\n\tState variables written after the call(s):\n\t- Acc (/data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#66-67)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in PENNY_BY_PENNY.Collect (/data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#58-76):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#65-74\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "TimeManipulation_3", "name": "TimeManipulationVulnerability", "shortDescription": {"text": "Timestamp Dependency."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Reentrancy_13", "name": "ReentrancyVulnerability", "shortDescription": {"text": "straw_man_contract"}}], "listLine": [51, 52, 54, 65, 68, 58, 91, 95, 17, 60, 63], "analysis": {"51": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "e>acc.unlockTime)acc.unl"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "52": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "sg.value,\"Put"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "54": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "   \n    function Collect(uint _am)\n    pub"}, "fullDescription": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "65": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "c.balance-=_am;\n            "}, "fullDescription": "In the function `Collect(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["mythril", "slither"], "fullDescription": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in PENNY_BY_PENNY.Collect (/data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#58-76):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#65-74\n", "name": "UncheckedLowCallsVulnerability"}], "68": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "\n    }\n    \n    function() \n    public \n"}, "fullDescription": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "58": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in PENNY_BY_PENNY.Collect (/data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#58-76):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#65-74)\n\tState variables written after the call(s):\n\t- Acc (/data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#66-67)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in PENNY_BY_PENNY.Collect (/data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#58-76):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#65-74\n", "name": "UncheckedLowCallsVulnerability"}], "66": [], "91": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "95": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "17": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "60": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "TimeManipulationVulnerability"}], "63": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ReentrancyVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 5, "ReentrancyVulnerability": 5, "FrontRunningVulnerability": 2, "OtherVulnerability": 1, "UncheckedLowCallsVulnerability": 2, "TimeManipulationVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 13, "error": 1, "note": 2, "none": 0}, "false_positives": 1}, "multiowned_vulnerable": {"contract": "multiowned_vulnerable", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["AccessControlVulnerability"], "rules": [{"id": "AccessControl_19", "fullDescription": {"text": "TestContract.withdrawAll (/data/demo_analysis/source_code/multiowned_vulnerable.sol#56-58) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/multiowned_vulnerable.sol#57)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}], "listLine": [56, 57], "analysis": {"56": [{"level": "error", "tool": ["slither"], "fullDescription": "TestContract.withdrawAll (/data/demo_analysis/source_code/multiowned_vulnerable.sol#56-58) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/multiowned_vulnerable.sol#57)\n", "name": "AccessControlVulnerability"}], "57": [{"level": "error", "tool": ["slither"], "snippet": {"text": "msg.sender.transfer(this.balance)"}, "fullDescription": "TestContract.withdrawAll (/data/demo_analysis/source_code/multiowned_vulnerable.sol#56-58) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/multiowned_vulnerable.sol#57)\n", "name": "AccessControlVulnerability"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 0, "error": 2, "note": 0, "none": 0}, "false_positives": 0}, "send_loop": {"contract": "send_loop", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": [], "rules": [], "listLine": [], "analysis": {}, "count_vulnerabilities": {}, "count_leve_vulnerabilities": {"warning": 0, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "short_address_example": {"contract": "short_address_example", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `sendCoin(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}], "listLine": [21], "analysis": {"21": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "balances[to] += amount"}, "fullDescription": "A possible integer overflow exists in the function `sendCoin(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 1, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "0xe4eabdca81e31d9acbc4af76b30f532b6ed7f3bf": {"contract": "0xe4eabdca81e31d9acbc4af76b30f532b6ed7f3bf", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 3, "list_vulnerabilities": ["ArithmeticVulnerability", "UncheckedLowCallsVulnerability", "FrontRunningVulnerability", "AccessControlVulnerability", "ReentrancyVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `Command(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 922\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "AccessControl_13", "fullDescription": {"text": "In the function `GetFreebie()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "AccessControl_19", "fullDescription": {"text": "Honey.GetFreebie (/data/demo_analysis/source_code/0xe4eabdca81e31d9acbc4af76b30f532b6ed7f3bf.sol#20-30) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/0xe4eabdca81e31d9acbc4af76b30f532b6ed7f3bf.sol#26-27)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in Honey.Command (/data/demo_analysis/source_code/0xe4eabdca81e31d9acbc4af76b30f532b6ed7f3bf.sol#38-46):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0xe4eabdca81e31d9acbc4af76b30f532b6ed7f3bf.sol\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}, {"id": "Other_21", "name": "OtherVulnerability", "shortDescription": {"text": "hidden_transfer"}}], "listLine": [38, 36, 25, 26, 46, 20, 44], "analysis": {"38": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "ta)\n    payable\n    public\n    {\n        require(msg.sender == Owner);\n        // <yes> <report> UNCHECKED_LL_CALLS\n        adr.call.value(msg.value)(data);\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `Command(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Honey.Command (/data/demo_analysis/source_code/0xe4eabdca81e31d9acbc4af76b30f532b6ed7f3bf.sol#38-46):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0xe4eabdca81e31d9acbc4af76b30f532b6ed7f3bf.sol\n", "name": "UncheckedLowCallsVulnerability"}], "36": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "}\n    \n    function Command("}, "fullDescription": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "25": [{"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability"}], "26": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "balance);\n        }              "}, "fullDescription": "In the function `GetFreebie()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions.", "name": "AccessControlVulnerability"}], "46": [{"level": "warning", "tool": ["mythril"], "snippet": {}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}], "20": [{"level": "error", "tool": ["slither"], "fullDescription": "Honey.GetFreebie (/data/demo_analysis/source_code/0xe4eabdca81e31d9acbc4af76b30f532b6ed7f3bf.sol#20-30) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/0xe4eabdca81e31d9acbc4af76b30f532b6ed7f3bf.sol#26-27)\n", "name": "AccessControlVulnerability"}], "44": [{"level": "note", "tool": ["slither"], "snippet": {"text": "adr.call.value(msg.value)(data)"}, "fullDescription": "Low level call in Honey.Command (/data/demo_analysis/source_code/0xe4eabdca81e31d9acbc4af76b30f532b6ed7f3bf.sol#38-46):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0xe4eabdca81e31d9acbc4af76b30f532b6ed7f3bf.sol\n", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1, "UncheckedLowCallsVulnerability": 3, "FrontRunningVulnerability": 1, "AccessControlVulnerability": 2, "ReentrancyVulnerability": 1, "DenialServiceVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 5, "error": 1, "note": 3, "none": 0}, "false_positives": 1}, "0x7a8721a9d64c74da899424c1b52acbf58ddc9782": {"contract": "0x7a8721a9d64c74da899424c1b52acbf58ddc9782", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 5, "list_vulnerabilities": ["AccessControlVulnerability", "ReentrancyVulnerability", "OtherVulnerability", "UncheckedLowCallsVulnerability", "FrontRunningVulnerability", "ArithmeticVulnerability"], "rules": [{"id": "AccessControl_15", "fullDescription": {"text": "Function setLog(address) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Use of tx.origin"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1142\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function CashOut(uint256). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `Deposit()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in PrivateDeposit.CashOut (/data/demo_analysis/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#49-64):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#54-60)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#55)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in PrivateDeposit.CashOut (/data/demo_analysis/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#49-64):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#54-60\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Reentrancy_13", "name": "ReentrancyVulnerability", "shortDescription": {"text": "straw_man_contract"}}], "listLine": [19, 54, 56, 43, 49, 75, 79, 52], "analysis": {"19": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": ");\n      "}, "fullDescription": "Function setLog(address) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "name": "AccessControlVulnerability"}], "54": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "         balances[msg.sender"}, "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1142\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in PrivateDeposit.CashOut (/data/demo_analysis/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#49-64):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#54-60\n", "name": "UncheckedLowCallsVulnerability"}], "56": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "        }\n        }\n    }\n    \n    function() pu"}, "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function CashOut(uint256). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "43": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "    TransferLog.AddMessage(msg."}, "fullDescription": "A possible integer overflow exists in the function `Deposit()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function CashOut(uint256). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "49": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in PrivateDeposit.CashOut (/data/demo_analysis/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#49-64):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#54-60)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#55)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in PrivateDeposit.CashOut (/data/demo_analysis/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#49-64):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#54-60\n", "name": "UncheckedLowCallsVulnerability"}], "55": [], "75": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "79": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "52": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ReentrancyVulnerability"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 1, "ReentrancyVulnerability": 5, "OtherVulnerability": 1, "UncheckedLowCallsVulnerability": 2, "FrontRunningVulnerability": 2, "ArithmeticVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 10, "error": 1, "note": 2, "none": 0}, "false_positives": 1}, "0xf015c35649c82f5467c9c74b7f28ee67665aad68": {"contract": "0xf015c35649c82f5467c9c74b7f28ee67665aad68", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 4, "list_vulnerabilities": ["ArithmeticVulnerability", "ReentrancyVulnerability", "OtherVulnerability", "UncheckedLowCallsVulnerability", "TimeManipulationVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_7", "fullDescription": {"text": "In the function `Collect(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Dependence on predictable environment variable"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1136\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in MY_BANK.Collect (/data/demo_analysis/source_code/0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol#21-39):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol#29-37)\n\tState variables written after the call(s):\n\t- Acc (/data/demo_analysis/source_code/0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol#32)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in MY_BANK.Collect (/data/demo_analysis/source_code/0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol#21-39):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol#29-37\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "TimeManipulation_3", "name": "TimeManipulationVulnerability", "shortDescription": {"text": "Timestamp Dependency."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Reentrancy_13", "name": "ReentrancyVulnerability", "shortDescription": {"text": "straw_man_contract"}}], "listLine": [16, 18, 29, 21, 72, 76, 50, 26], "analysis": {"16": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.value;\n        acc.u"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "18": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "e(msg.sender,msg.value,\"Put\");\n    }\n\n    func"}, "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}], "29": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": ")\n            {\n            "}, "fullDescription": "In the function `Collect(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["mythril", "slither", "oyente"], "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in MY_BANK.Collect (/data/demo_analysis/source_code/0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol#21-39):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol#29-37\n", "name": "UncheckedLowCallsVulnerability"}], "32": [], "21": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in MY_BANK.Collect (/data/demo_analysis/source_code/0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol#21-39):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol#29-37)\n\tState variables written after the call(s):\n\t- Acc (/data/demo_analysis/source_code/0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol#32)\n", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in MY_BANK.Collect (/data/demo_analysis/source_code/0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol#21-39):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol#29-37\n", "name": "UncheckedLowCallsVulnerability"}], "72": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "76": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "50": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "26": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "TimeManipulationVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 4, "ReentrancyVulnerability": 2, "OtherVulnerability": 1, "UncheckedLowCallsVulnerability": 1, "TimeManipulationVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 7, "error": 0, "note": 2, "none": 0}, "false_positives": 1}, "0x93c32845fae42c83a70e5f06214c8433665c2ab5": {"contract": "0x93c32845fae42c83a70e5f06214c8433665c2ab5", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 4, "list_vulnerabilities": ["ArithmeticVulnerability", "ReentrancyVulnerability", "OtherVulnerability", "UncheckedLowCallsVulnerability", "TimeManipulationVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_7", "fullDescription": {"text": "In the function `Collect(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Dependence on predictable environment variable"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1136\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in X_WALLET.Collect (/data/demo_analysis/source_code/0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol#21-39):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol#29-37)\n\tState variables written after the call(s):\n\t- Acc (/data/demo_analysis/source_code/0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol#32)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in X_WALLET.Collect (/data/demo_analysis/source_code/0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol#21-39):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol#29-37\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "TimeManipulation_3", "name": "TimeManipulationVulnerability", "shortDescription": {"text": "Timestamp Dependency."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Reentrancy_13", "name": "ReentrancyVulnerability", "shortDescription": {"text": "straw_man_contract"}}], "listLine": [16, 18, 29, 21, 72, 76, 50, 26], "analysis": {"16": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.value;\n        acc.u"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "18": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "e(msg.sender,msg.value,\"Put\");\n    }\n\n    func"}, "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}], "29": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": ")\n            {\n            "}, "fullDescription": "In the function `Collect(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["mythril", "slither", "oyente"], "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in X_WALLET.Collect (/data/demo_analysis/source_code/0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol#21-39):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol#29-37\n", "name": "UncheckedLowCallsVulnerability"}], "32": [], "21": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in X_WALLET.Collect (/data/demo_analysis/source_code/0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol#21-39):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol#29-37)\n\tState variables written after the call(s):\n\t- Acc (/data/demo_analysis/source_code/0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol#32)\n", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in X_WALLET.Collect (/data/demo_analysis/source_code/0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol#21-39):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol#29-37\n", "name": "UncheckedLowCallsVulnerability"}], "72": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "76": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "50": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "26": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "TimeManipulationVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 4, "ReentrancyVulnerability": 2, "OtherVulnerability": 1, "UncheckedLowCallsVulnerability": 1, "TimeManipulationVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 7, "error": 0, "note": 2, "none": 0}, "false_positives": 1}, "lotto": {"contract": "lotto", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 7, "list_vulnerabilities": ["AccessControlVulnerability", "UncheckedLowCallsVulnerability", "FrontRunningVulnerability", "DenialServiceVulnerability", "OtherVulnerability"], "rules": [{"id": "AccessControl_13", "fullDescription": {"text": "In the function `withdrawLeftOver()` a non-zero amount of Ether is sent to msg.sender.\n\nThere is a check on storage index 0. This storage slot can be written to by calling the function `sendToWinner()`."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function sendToWinner(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "AccessControl_19", "fullDescription": {"text": "Lotto.withdrawLeftOver (/data/demo_analysis/source_code/lotto.sol#24-28) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.send(this.balance) (/data/demo_analysis/source_code/lotto.sol#27)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "Other_14", "fullDescription": {"text": "Lotto.winner (/data/demo_analysis/source_code/lotto.sol#12) is never initialized. It is used in:\n\t- sendToWinner (/data/demo_analysis/source_code/lotto.sol#17-22)\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "uninitialized-state"}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [27, 20, 24, 12, 17, 13], "analysis": {"27": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "msg.sender.send(this.balance)"}, "fullDescription": "In the function `withdrawLeftOver()` a non-zero amount of Ether is sent to msg.sender.\n\nThere is a check on storage index 0. This storage slot can be written to by calling the function `sendToWinner()`.", "name": "AccessControlVulnerability"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}], "20": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "winner.send(winAmount)"}, "fullDescription": "In the function `withdrawLeftOver()` a non-zero amount of Ether is sent to msg.sender.\n\nThere is a check on storage index 0. This storage slot can be written to by calling the function `sendToWinner()`.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function sendToWinner(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "24": [{"level": "error", "tool": ["slither"], "fullDescription": "Lotto.withdrawLeftOver (/data/demo_analysis/source_code/lotto.sol#24-28) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.send(this.balance) (/data/demo_analysis/source_code/lotto.sol#27)\n", "name": "AccessControlVulnerability"}], "12": [{"level": "error", "tool": ["slither"], "fullDescription": "Lotto.winner (/data/demo_analysis/source_code/lotto.sol#12) is never initialized. It is used in:\n\t- sendToWinner (/data/demo_analysis/source_code/lotto.sol#17-22)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "17": [{"level": "error", "tool": ["slither"], "fullDescription": "Lotto.winner (/data/demo_analysis/source_code/lotto.sol#12) is never initialized. It is used in:\n\t- sendToWinner (/data/demo_analysis/source_code/lotto.sol#17-22)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "13": [{"level": "error", "tool": ["slither"], "fullDescription": "Lotto.winner (/data/demo_analysis/source_code/lotto.sol#12) is never initialized. It is used in:\n\t- sendToWinner (/data/demo_analysis/source_code/lotto.sol#17-22)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 3, "UncheckedLowCallsVulnerability": 2, "FrontRunningVulnerability": 1, "DenialServiceVulnerability": 1, "OtherVulnerability": 3}, "count_leve_vulnerabilities": {"warning": 4, "error": 4, "note": 2, "none": 0}, "false_positives": 0}, "integer_overflow_1": {"contract": "integer_overflow_1", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `add(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}], "listLine": [14], "analysis": {"14": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "sellerBalance += value"}, "fullDescription": "A possible integer overflow exists in the function `add(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 1, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4": {"contract": "0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 4, "list_vulnerabilities": ["ReentrancyVulnerability", "OtherVulnerability", "UncheckedLowCallsVulnerability", "ArithmeticVulnerability"], "rules": [{"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 768\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `Deposit()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in PrivateBank.CashOut (/data/demo_analysis/source_code/0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol#34-47):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol#39-46)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol#41)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in PrivateBank.CashOut (/data/demo_analysis/source_code/0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol#34-47):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol#39-46\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Reentrancy_13", "name": "ReentrancyVulnerability", "shortDescription": {"text": "straw_man_contract"}}], "listLine": [39, 28, 29, 34, 61, 65, 38], "analysis": {"39": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "     {\n                balan"}, "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 768\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in PrivateBank.CashOut (/data/demo_analysis/source_code/0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol#34-47):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol#39-46\n", "name": "UncheckedLowCallsVulnerability"}], "41": [], "28": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "alue;\n            TransferLog.A"}, "fullDescription": "A possible integer overflow exists in the function `Deposit()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "29": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "ender,msg.value,\"Deposit\");\n        }\n    }\n    \n    f"}, "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}], "34": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in PrivateBank.CashOut (/data/demo_analysis/source_code/0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol#34-47):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol#39-46)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol#41)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in PrivateBank.CashOut (/data/demo_analysis/source_code/0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol#34-47):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol#39-46\n", "name": "UncheckedLowCallsVulnerability"}], "61": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "65": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "38": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ReentrancyVulnerability"}]}, "count_vulnerabilities": {"ReentrancyVulnerability": 4, "OtherVulnerability": 1, "UncheckedLowCallsVulnerability": 2, "ArithmeticVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 5, "error": 1, "note": 3, "none": 0}, "false_positives": 1}, "0x52d2e0f9b01101a59b38a3d05c80b7618aeed984": {"contract": "0x52d2e0f9b01101a59b38a3d05c80b7618aeed984", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 2, "list_vulnerabilities": ["ReentrancyVulnerability", "OtherVulnerability", "UncheckedLowCallsVulnerability", "AccessControlVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 314\nCall at address: 314\nCall at address: 314\nCall at address: 314\nCall at address: 314\nCall at address: 314\nCall at address: 314\nCall at address: 314\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "AccessControl_19", "fullDescription": {"text": "EtherGet.withdrawEther (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#21-24) sends eth to arbitrary user\n\tDangerous calls:\n\t- owner.transfer(this.balance) (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#22-24)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "UncheckedLowCalls_6", "fullDescription": {"text": "EtherGet.withdrawTokens (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#17-21) does not use the value returned by external calls:\n\t-tc.transfer(owner,tc.balanceOf(this)) (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#19-21)\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "unused-return"}}, {"id": "DenialService_3", "fullDescription": {"text": "EtherGet.getTokens has external calls inside a loop:\n\t- addr.call.value(0)() (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#28-30)\n"}, "name": "DenialServiceVulnerability", "shortDescription": {"text": "calls-loop"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in EtherGet.getTokens (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#24-30):\n\t-addr.call.value(0)() /data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#28-30\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}], "listLine": [28, 19, 21, 22, 24, 17], "analysis": {"28": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "        }\n    }\n}"}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 314\nCall at address: 314\nCall at address: 314\nCall at address: 314\nCall at address: 314\nCall at address: 314\nCall at address: 314\nCall at address: 314\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "error", "tool": ["slither"], "fullDescription": "EtherGet.withdrawEther (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#21-24) sends eth to arbitrary user\n\tDangerous calls:\n\t- owner.transfer(this.balance) (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#22-24)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "EtherGet.getTokens has external calls inside a loop:\n\t- addr.call.value(0)() (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#28-30)\n", "name": "DenialServiceVulnerability"}], "19": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": ");\n    }\n    funct"}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 314\nCall at address: 314\nCall at address: 314\nCall at address: 314\nCall at address: 314\nCall at address: 314\nCall at address: 314\nCall at address: 314\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["slither"], "fullDescription": "EtherGet.withdrawTokens (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#17-21) does not use the value returned by external calls:\n\t-tc.transfer(owner,tc.balanceOf(this)) (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#19-21)\n", "name": "UncheckedLowCallsVulnerability"}], "21": [{"level": "error", "tool": ["slither"], "fullDescription": "EtherGet.withdrawEther (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#21-24) sends eth to arbitrary user\n\tDangerous calls:\n\t- owner.transfer(this.balance) (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#22-24)\n", "name": "AccessControlVulnerability"}], "22": [{"level": "error", "tool": ["slither"], "snippet": {"text": "owner.transfer(this.balance)"}, "fullDescription": "EtherGet.withdrawEther (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#21-24) sends eth to arbitrary user\n\tDangerous calls:\n\t- owner.transfer(this.balance) (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#22-24)\n", "name": "AccessControlVulnerability"}], "24": [{"level": "error", "tool": ["slither"], "fullDescription": "EtherGet.withdrawEther (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#21-24) sends eth to arbitrary user\n\tDangerous calls:\n\t- owner.transfer(this.balance) (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#22-24)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "EtherGet.getTokens has external calls inside a loop:\n\t- addr.call.value(0)() (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#28-30)\n", "name": "DenialServiceVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in EtherGet.getTokens (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#24-30):\n\t-addr.call.value(0)() /data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#28-30\n", "name": "UncheckedLowCallsVulnerability"}], "17": [{"level": "warning", "tool": ["slither"], "fullDescription": "EtherGet.withdrawTokens (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#17-21) does not use the value returned by external calls:\n\t-tc.transfer(owner,tc.balanceOf(this)) (/data/demo_analysis/source_code/0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#19-21)\n", "name": "UncheckedLowCallsVulnerability"}]}, "count_vulnerabilities": {"ReentrancyVulnerability": 2, "OtherVulnerability": 2, "UncheckedLowCallsVulnerability": 4, "AccessControlVulnerability": 4, "DenialServiceVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 8, "error": 4, "note": 2, "none": 0}, "false_positives": 0}, "incorrect_constructor_name2": {"contract": "incorrect_constructor_name2", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 1, "list_vulnerabilities": ["AccessControlVulnerability", "FrontRunningVulnerability"], "rules": [{"id": "AccessControl_13", "fullDescription": {"text": "In the function `withdraw()` a non-zero amount of Ether is sent to an address taken from storage slot 0.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `missing()`.\n\nThere is a check on storage index 0. This storage slot can be written to by calling the function `missing()`."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}], "listLine": [30], "analysis": {"30": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "owner.transfer(this.balance)"}, "fullDescription": "In the function `withdraw()` a non-zero amount of Ether is sent to an address taken from storage slot 0.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `missing()`.\n\nThere is a check on storage index 0. This storage slot can be written to by calling the function `missing()`.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 1, "FrontRunningVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 2, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "unchecked_return_value": {"contract": "unchecked_return_value", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ReentrancyVulnerability", "UncheckedLowCallsVulnerability"], "rules": [{"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in ReturnValue.callchecked (/data/demo_analysis/source_code/unchecked_return_value.sol#11-13):\n\t-require(bool)(callee.call()) /data/demo_analysis/source_code/unchecked_return_value.sol#12\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}], "listLine": [12, 17, 11, 15], "analysis": {"12": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "callee.call()"}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in ReturnValue.callchecked (/data/demo_analysis/source_code/unchecked_return_value.sol#11-13):\n\t-require(bool)(callee.call()) /data/demo_analysis/source_code/unchecked_return_value.sol#12\n", "name": "UncheckedLowCallsVulnerability"}], "17": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "callee.call()"}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}], "11": [{"level": "note", "tool": ["slither"], "fullDescription": "Low level call in ReturnValue.callchecked (/data/demo_analysis/source_code/unchecked_return_value.sol#11-13):\n\t-require(bool)(callee.call()) /data/demo_analysis/source_code/unchecked_return_value.sol#12\n", "name": "UncheckedLowCallsVulnerability"}], "15": [{"level": "note", "tool": ["slither"], "fullDescription": "Low level call in ReturnValue.callchecked (/data/demo_analysis/source_code/unchecked_return_value.sol#11-13):\n\t-require(bool)(callee.call()) /data/demo_analysis/source_code/unchecked_return_value.sol#12\n", "name": "UncheckedLowCallsVulnerability"}]}, "count_vulnerabilities": {"ReentrancyVulnerability": 2, "UncheckedLowCallsVulnerability": 4}, "count_leve_vulnerabilities": {"warning": 2, "error": 0, "note": 4, "none": 0}, "false_positives": 0}, "0xa46edd6a9a93feec36576ee5048146870ea2c3ae": {"contract": "0xa46edd6a9a93feec36576ee5048146870ea2c3ae", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 2, "list_vulnerabilities": ["ArithmeticVulnerability", "DenialServiceVulnerability", "UncheckedLowCallsVulnerability", "OtherVulnerability", "ReentrancyVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `_function_0x11be40e0`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 732\nCall at address: 732\nCall at address: 732\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "DenialService_3", "fullDescription": {"text": "EBU.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v[i]) (/data/demo_analysis/source_code/0xa46edd6a9a93feec36576ee5048146870ea2c3ae.sol#16-18)\n"}, "name": "DenialServiceVulnerability", "shortDescription": {"text": "calls-loop"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in EBU.transfer (/data/demo_analysis/source_code/0xa46edd6a9a93feec36576ee5048146870ea2c3ae.sol#11-20):\n\t-caddress.call(id,from,_tos[i],v[i]) /data/demo_analysis/source_code/0xa46edd6a9a93feec36576ee5048146870ea2c3ae.sol#16-18\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [11, 17, 16], "analysis": {"11": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "ransfer(address from,address caddress,address[] _tos,uint[] v)public returns (bool){\n        require(_tos.length > 0);\n        bytes4 id=bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for(uint i=0;i<_tos.length;i++){\n            // <yes> <report> UNCHECKED_LL_CALLS\n            caddress.call(id,from,_tos[i],v[i]);\n        }\n        return true;\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `_function_0x11be40e0`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "EBU.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v[i]) (/data/demo_analysis/source_code/0xa46edd6a9a93feec36576ee5048146870ea2c3ae.sol#16-18)\n", "name": "DenialServiceVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in EBU.transfer (/data/demo_analysis/source_code/0xa46edd6a9a93feec36576ee5048146870ea2c3ae.sol#11-20):\n\t-caddress.call(id,from,_tos[i],v[i]) /data/demo_analysis/source_code/0xa46edd6a9a93feec36576ee5048146870ea2c3ae.sol#16-18\n", "name": "UncheckedLowCallsVulnerability"}], "17": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "}\n  "}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "16": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "d,from,_tos[i],v[i]);\n        }\n   "}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 732\nCall at address: 732\nCall at address: 732\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["slither", "oyente"], "fullDescription": "EBU.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v[i]) (/data/demo_analysis/source_code/0xa46edd6a9a93feec36576ee5048146870ea2c3ae.sol#16-18)\n", "name": "DenialServiceVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1, "DenialServiceVulnerability": 2, "UncheckedLowCallsVulnerability": 2, "OtherVulnerability": 2, "ReentrancyVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 5, "error": 0, "note": 3, "none": 0}, "false_positives": 0}, "incorrect_constructor_name3": {"contract": "incorrect_constructor_name3", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 1, "list_vulnerabilities": ["AccessControlVulnerability", "FrontRunningVulnerability"], "rules": [{"id": "AccessControl_13", "fullDescription": {"text": "In the function `withdraw()` a non-zero amount of Ether is sent to an address taken from storage slot 0.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `Constructor()`.\n\nThere is a check on storage index 0. This storage slot can be written to by calling the function `Constructor()`."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}], "listLine": [29], "analysis": {"29": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "owner.transfer(this.balance)"}, "fullDescription": "In the function `withdraw()` a non-zero amount of Ether is sent to an address taken from storage slot 0.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `Constructor()`.\n\nThere is a check on storage index 0. This storage slot can be written to by calling the function `Constructor()`.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 1, "FrontRunningVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 2, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "dos_simple": {"contract": "dos_simple", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `ifillArray()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}], "listLine": [10], "analysis": {"10": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "contract DosOneFunc {\n\n    address[] listAddresses;\n\n    function ifillArray() public returns (bool){\n        if(listAddresses.length<1500) {\n            // <yes> <report> DENIAL_OF_SERVICE\n            for(uint i=0;i<350;i++) {\n                listAddresses.push(msg.sender);\n            }\n            return true;\n\n        } else {\n            listAddresses = new address[](0);\n            return false;\n        }\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `ifillArray()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 1, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "ERC20": {"contract": "ERC20", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": [], "rules": [], "listLine": [], "analysis": {}, "count_vulnerabilities": {}, "count_leve_vulnerabilities": {"warning": 0, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "mishandled": {"contract": "mishandled", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 1, "list_vulnerabilities": ["AccessControlVulnerability", "UncheckedLowCallsVulnerability"], "rules": [{"id": "AccessControl_13", "fullDescription": {"text": "In the function `withdrawBalance()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}], "listLine": [14], "analysis": {"14": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.sender.send(amountToWithdraw)"}, "fullDescription": "In the function `withdrawBalance()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions.", "name": "AccessControlVulnerability"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 1, "UncheckedLowCallsVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 1, "error": 0, "note": 1, "none": 0}, "false_positives": 0}, "0x3f2ef511aa6e75231e4deafc7a3d2ecab3741de2": {"contract": "0x3f2ef511aa6e75231e4deafc7a3d2ecab3741de2", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 3, "list_vulnerabilities": ["ArithmeticVulnerability", "UncheckedLowCallsVulnerability", "FrontRunningVulnerability", "ReentrancyVulnerability", "AccessControlVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `Command(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1258\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "AccessControl_13", "fullDescription": {"text": "In the function `redeem()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "AccessControl_19", "fullDescription": {"text": "WhaleGiveaway2.redeem (/data/demo_analysis/source_code/0x3f2ef511aa6e75231e4deafc7a3d2ecab3741de2.sol#22-31) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/0x3f2ef511aa6e75231e4deafc7a3d2ecab3741de2.sol#27-28)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in WhaleGiveaway2.Command (/data/demo_analysis/source_code/0x3f2ef511aa6e75231e4deafc7a3d2ecab3741de2.sol#39-47):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0x3f2ef511aa6e75231e4deafc7a3d2ecab3741de2.sol\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}, {"id": "Other_21", "name": "OtherVulnerability", "shortDescription": {"text": "hidden_transfer"}}], "listLine": [39, 37, 47, 26, 27, 22, 45], "analysis": {"39": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "a)\n    payable\n    public\n    {\n        require(msg.sender == Owner);\n        // <yes> <report> UNCHECKED_LL_CALLS\n        adr.call.value(msg.value)(data);\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `Command(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in WhaleGiveaway2.Command (/data/demo_analysis/source_code/0x3f2ef511aa6e75231e4deafc7a3d2ecab3741de2.sol#39-47):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0x3f2ef511aa6e75231e4deafc7a3d2ecab3741de2.sol\n", "name": "UncheckedLowCallsVulnerability"}], "37": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "\n    \n    function Command(a"}, "fullDescription": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "47": [{"level": "warning", "tool": ["mythril"], "snippet": {}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}], "26": [{"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability"}], "27": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "alance);\n        }               "}, "fullDescription": "In the function `redeem()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions.", "name": "AccessControlVulnerability"}], "22": [{"level": "error", "tool": ["slither"], "fullDescription": "WhaleGiveaway2.redeem (/data/demo_analysis/source_code/0x3f2ef511aa6e75231e4deafc7a3d2ecab3741de2.sol#22-31) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/0x3f2ef511aa6e75231e4deafc7a3d2ecab3741de2.sol#27-28)\n", "name": "AccessControlVulnerability"}], "45": [{"level": "note", "tool": ["slither"], "snippet": {"text": "adr.call.value(msg.value)(data)"}, "fullDescription": "Low level call in WhaleGiveaway2.Command (/data/demo_analysis/source_code/0x3f2ef511aa6e75231e4deafc7a3d2ecab3741de2.sol#39-47):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0x3f2ef511aa6e75231e4deafc7a3d2ecab3741de2.sol\n", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1, "UncheckedLowCallsVulnerability": 3, "FrontRunningVulnerability": 1, "ReentrancyVulnerability": 1, "AccessControlVulnerability": 2, "DenialServiceVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 5, "error": 1, "note": 3, "none": 0}, "false_positives": 1}, "0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01": {"contract": "0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 5, "list_vulnerabilities": ["ArithmeticVulnerability", "ReentrancyVulnerability", "UncheckedLowCallsVulnerability", "OtherVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Other_12", "fullDescription": {"text": "Contract locking ether found in /data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol:\n\tContract TokenBank has payable functions:\n\t - fallback (/data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#67-70)\n\t - Deposit (/data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#70-76)\n\t - WithdrawToHolder (/data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#90-104)\n\tBut does not have a function to withdraw the ether\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "locked-ether"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in Token.WithdrawToken (/data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#39-50):\n\t-token.call(bytes4(sha3()(transfer(address,uint256))),to,amount) /data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#44-50\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}], "listLine": [76, 44, 70, 90, 67, 50, 39, 72], "analysis": {"76": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "awTokenToHolder(address _to,ad"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "44": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "nt256)\")),to,amount); \n    }\n}\n\ncontract TokenBank is Token\n{\n "}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}], "70": [{"level": "warning", "tool": ["slither"], "fullDescription": "Contract locking ether found in /data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol:\n\tContract TokenBank has payable functions:\n\t - fallback (/data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#67-70)\n\t - Deposit (/data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#70-76)\n\t - WithdrawToHolder (/data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#90-104)\n\tBut does not have a function to withdraw the ether\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "90": [{"level": "warning", "tool": ["slither"], "fullDescription": "Contract locking ether found in /data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol:\n\tContract TokenBank has payable functions:\n\t - fallback (/data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#67-70)\n\t - Deposit (/data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#70-76)\n\t - WithdrawToHolder (/data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#90-104)\n\tBut does not have a function to withdraw the ether\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "67": [{"level": "warning", "tool": ["slither"], "fullDescription": "Contract locking ether found in /data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol:\n\tContract TokenBank has payable functions:\n\t - fallback (/data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#67-70)\n\t - Deposit (/data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#70-76)\n\t - WithdrawToHolder (/data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#90-104)\n\tBut does not have a function to withdraw the ether\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "50": [{"level": "warning", "tool": ["slither"], "fullDescription": "Contract locking ether found in /data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol:\n\tContract TokenBank has payable functions:\n\t - fallback (/data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#67-70)\n\t - Deposit (/data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#70-76)\n\t - WithdrawToHolder (/data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#90-104)\n\tBut does not have a function to withdraw the ether\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "39": [{"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Token.WithdrawToken (/data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#39-50):\n\t-token.call(bytes4(sha3()(transfer(address,uint256))),to,amount) /data/demo_analysis/source_code/0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#44-50\n", "name": "UncheckedLowCallsVulnerability"}], "72": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 2, "ReentrancyVulnerability": 1, "UncheckedLowCallsVulnerability": 2, "OtherVulnerability": 4}, "count_leve_vulnerabilities": {"warning": 7, "error": 0, "note": 2, "none": 0}, "false_positives": 0}, "0x561eac93c92360949ab1f1403323e6db345cbf31": {"contract": "0x561eac93c92360949ab1f1403323e6db345cbf31", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 5, "list_vulnerabilities": ["ArithmeticVulnerability", "OtherVulnerability", "ReentrancyVulnerability", "UncheckedLowCallsVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in BANK_SAFE.Collect (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#49-66):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#56-64)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#57)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in BANK_SAFE.Collect (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#49-66):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#56-64\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "Reentrancy_13", "name": "ReentrancyVulnerability", "shortDescription": {"text": "straw_man_contract"}}], "listLine": [90, 2, 87, 78, 49, 56, 54, 83], "analysis": {"90": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "Msg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "2": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "n.io \n * @author: "}, "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "87": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "ddress _adr,uint _val,st"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "78": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "    string  Data;\n        uint Val;\n        uint  Time;\n    }\n    \n    Message[] public History;\n    \n    Message LastMsg;\n    \n    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "49": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in BANK_SAFE.Collect (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#49-66):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#56-64)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#57)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in BANK_SAFE.Collect (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#49-66):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#56-64\n", "name": "UncheckedLowCallsVulnerability"}], "56": [{"level": "error", "tool": ["slither"], "snippet": {"text": "msg.sender.call.value(_am)()"}, "fullDescription": "Reentrancy in BANK_SAFE.Collect (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#49-66):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#56-64)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#57)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in BANK_SAFE.Collect (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#49-66):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#56-64\n", "name": "UncheckedLowCallsVulnerability"}], "57": [], "54": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ReentrancyVulnerability"}], "83": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 8, "OtherVulnerability": 1, "ReentrancyVulnerability": 2, "UncheckedLowCallsVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 8, "error": 2, "note": 3, "none": 0}, "false_positives": 1}, "0xcead721ef5b11f1a7b530171aab69b16c5e66b6e": {"contract": "0xcead721ef5b11f1a7b530171aab69b16c5e66b6e", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 4, "list_vulnerabilities": ["ArithmeticVulnerability", "ReentrancyVulnerability", "OtherVulnerability", "UncheckedLowCallsVulnerability", "TimeManipulationVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_7", "fullDescription": {"text": "In the function `Collect(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Dependence on predictable environment variable"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1136\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in WALLET.Collect (/data/demo_analysis/source_code/0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol#21-39):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol#29-37)\n\tState variables written after the call(s):\n\t- Acc (/data/demo_analysis/source_code/0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol#32)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in WALLET.Collect (/data/demo_analysis/source_code/0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol#21-39):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol#29-37\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "TimeManipulation_3", "name": "TimeManipulationVulnerability", "shortDescription": {"text": "Timestamp Dependency."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Reentrancy_13", "name": "ReentrancyVulnerability", "shortDescription": {"text": "straw_man_contract"}}], "listLine": [16, 18, 29, 21, 72, 76, 50, 26], "analysis": {"16": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.value;\n        acc.u"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "18": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "e(msg.sender,msg.value,\"Put\");\n    }\n\n    func"}, "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}], "29": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": ")\n            {\n            "}, "fullDescription": "In the function `Collect(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["mythril", "slither", "oyente"], "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in WALLET.Collect (/data/demo_analysis/source_code/0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol#21-39):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol#29-37\n", "name": "UncheckedLowCallsVulnerability"}], "32": [], "21": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in WALLET.Collect (/data/demo_analysis/source_code/0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol#21-39):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol#29-37)\n\tState variables written after the call(s):\n\t- Acc (/data/demo_analysis/source_code/0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol#32)\n", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in WALLET.Collect (/data/demo_analysis/source_code/0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol#21-39):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol#29-37\n", "name": "UncheckedLowCallsVulnerability"}], "72": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "76": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "50": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "26": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "TimeManipulationVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 4, "ReentrancyVulnerability": 2, "OtherVulnerability": 1, "UncheckedLowCallsVulnerability": 1, "TimeManipulationVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 7, "error": 0, "note": 2, "none": 0}, "false_positives": 1}, "arbitrary_location_write_simple": {"contract": "arbitrary_location_write_simple", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_5", "fullDescription": {"text": "A possible integer underflow exists in the function `PopBonusCode()`.\nThe subtraction may result in a value < 0."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `PushBonusCode(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}], "listLine": [28, 2, 9], "analysis": {"28": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "bonusCodes.length--"}, "fullDescription": "A possible integer underflow exists in the function `PopBonusCode()`.\nThe subtraction may result in a value < 0.", "name": "ArithmeticVulnerability"}], "2": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "smartcontractsecur"}, "fullDescription": "A possible integer overflow exists in the function `PushBonusCode(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "9": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "contract Wallet {\n     uint[] private bonusCodes;\n     address private owner;\n\n     constructor() public {\n         bonusCodes = new uint[](0);\n         owner = msg.sender;\n     }\n\n     function () public payable {\n     }\n\n     function PushBonusCode(uint c) public {\n         bonusCodes.push(c);\n     }\n\n     function PopBonusCode() public {\n         // <yes> <report> ACCESS_CONTROL\n         require(0 <= bonusCodes.length); // this condition is always true since array lengths are unsigned\n         bonusCodes.length--; // an underflow can be caused here\n     }\n\n     function UpdateBonusCodeAt(uint idx, uint c) public {\n         require(idx < bonusCodes.length);\n         bonusCodes[idx] = c; // write to any index less than bonusCodes.length\n     }\n\n     function Destroy() public {\n         require(msg.sender == owner);\n         selfdestruct(msg.sender);\n     }\n }"}, "fullDescription": "A possible integer overflow exists in the function `PushBonusCode(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `PushBonusCode(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 4}, "count_leve_vulnerabilities": {"warning": 4, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "parity_wallet_bug_1": {"contract": "parity_wallet_bug_1", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": [], "rules": [], "listLine": [], "analysis": {}, "count_vulnerabilities": {}, "count_leve_vulnerabilities": {"warning": 0, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "simple_suicide": {"contract": "simple_suicide", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["AccessControlVulnerability"], "rules": [{"id": "AccessControl_14", "fullDescription": {"text": "The function `sudicideAnyone()` executes the SUICIDE instruction. The remaining Ether is sent to the caller's address.\n\nIt seems that this function can be called without restrictions."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Unchecked SUICIDE"}}, {"id": "AccessControl_21", "fullDescription": {"text": "SimpleSuicide.sudicideAnyone (/data/demo_analysis/source_code/simple_suicide.sol#12-14) allows anyone to destruct the contract\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "suicidal"}}], "listLine": [13, 12], "analysis": {"13": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "selfdestruct(msg.sender)"}, "fullDescription": "The function `sudicideAnyone()` executes the SUICIDE instruction. The remaining Ether is sent to the caller's address.\n\nIt seems that this function can be called without restrictions.", "name": "AccessControlVulnerability"}], "12": [{"level": "error", "tool": ["slither"], "fullDescription": "SimpleSuicide.sudicideAnyone (/data/demo_analysis/source_code/simple_suicide.sol#12-14) allows anyone to destruct the contract\n", "name": "AccessControlVulnerability"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 1, "error": 1, "note": 0, "none": 0}, "false_positives": 0}, "0xa1fceeff3acc57d257b917e30c4df661401d6431": {"contract": "0xa1fceeff3acc57d257b917e30c4df661401d6431", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 1, "list_vulnerabilities": ["ArithmeticVulnerability", "DenialServiceVulnerability", "UncheckedLowCallsVulnerability", "ReentrancyVulnerability", "OtherVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `_function_0x72a503be`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 853\nCall at address: 853\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "DenialService_3", "fullDescription": {"text": "AirDropContract.transfer has external calls inside a loop:\n\t- contract_address.call(id,msg.sender,tos[i],vs[i]) (/data/demo_analysis/source_code/0xa1fceeff3acc57d257b917e30c4df661401d6431.sol#31-33)\n"}, "name": "DenialServiceVulnerability", "shortDescription": {"text": "calls-loop"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in AirDropContract.transfer (/data/demo_analysis/source_code/0xa1fceeff3acc57d257b917e30c4df661401d6431.sol#20-35):\n\t-contract_address.call(id,msg.sender,tos[i],vs[i]) /data/demo_analysis/source_code/0xa1fceeff3acc57d257b917e30c4df661401d6431.sol#31-33\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [20, 31], "analysis": {"20": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "ddress contract_address,address[] tos,uint[] vs)\n        public \n        validAddress(contract_address)\n        returns (bool){\n\n        require(tos.length > 0);\n        require(vs.length > 0);\n        require(tos.length == vs.length);\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for(uint i = 0 ; i < tos.length; i++){\n            // <yes> <report> UNCHECKED_LL_CALLS\n            contract_address.call(id, msg.sender, tos[i], vs[i]);\n        }\n        return true;\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `_function_0x72a503be`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "AirDropContract.transfer has external calls inside a loop:\n\t- contract_address.call(id,msg.sender,tos[i],vs[i]) (/data/demo_analysis/source_code/0xa1fceeff3acc57d257b917e30c4df661401d6431.sol#31-33)\n", "name": "DenialServiceVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in AirDropContract.transfer (/data/demo_analysis/source_code/0xa1fceeff3acc57d257b917e30c4df661401d6431.sol#20-35):\n\t-contract_address.call(id,msg.sender,tos[i],vs[i]) /data/demo_analysis/source_code/0xa1fceeff3acc57d257b917e30c4df661401d6431.sol#31-33\n", "name": "UncheckedLowCallsVulnerability"}], "31": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "sender, tos[i], vs[i]);\n        }\n        return tru"}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 853\nCall at address: 853\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["slither", "oyente"], "fullDescription": "AirDropContract.transfer has external calls inside a loop:\n\t- contract_address.call(id,msg.sender,tos[i],vs[i]) (/data/demo_analysis/source_code/0xa1fceeff3acc57d257b917e30c4df661401d6431.sol#31-33)\n", "name": "DenialServiceVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1, "DenialServiceVulnerability": 2, "UncheckedLowCallsVulnerability": 2, "ReentrancyVulnerability": 1, "OtherVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 5, "error": 0, "note": 2, "none": 0}, "false_positives": 0}, "lucky_doubler": {"contract": "lucky_doubler", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 16, "list_vulnerabilities": ["UncheckedLowCallsVulnerability", "OtherVulnerability", "DenialServiceVulnerability", "ArithmeticVulnerability"], "rules": [{"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3924\nCall at address: 3924\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [60, 74, 102, 119, 170, 180, 183, 184, 185, 175, 174], "analysis": {"60": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "msg.sender.send(msg.value)"}, "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}], "74": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.sender.send(msg.value - 1 ether)"}, "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3924\nCall at address: 3924\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "102": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "theEntry.entryAddress.send(payout)"}, "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3924\nCall at address: 3924\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "119": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "owner.send(fees)"}, "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "170": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "180": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "183": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "184": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "185": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "175": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "174": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"UncheckedLowCallsVulnerability": 4, "OtherVulnerability": 2, "DenialServiceVulnerability": 3, "ArithmeticVulnerability": 7}, "count_leve_vulnerabilities": {"warning": 12, "error": 0, "note": 4, "none": 0}, "false_positives": 0}, "0x39cfd754c85023648bf003bea2dd498c5612abfa": {"contract": "0x39cfd754c85023648bf003bea2dd498c5612abfa", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 5, "list_vulnerabilities": ["ArithmeticVulnerability", "ReentrancyVulnerability", "UncheckedLowCallsVulnerability", "OtherVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Other_12", "fullDescription": {"text": "Contract locking ether found in /data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol:\n\tContract TokenBank has payable functions:\n\t - fallback (/data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol#67-70)\n\t - Deposit (/data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol#70-76)\n\t - WithdrawToHolder (/data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol#90-104)\n\tBut does not have a function to withdraw the ether\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "locked-ether"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in Token.WithdrawToken (/data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol#39-50):\n\t-token.call(bytes4(sha3()(transfer(address,uint256))),to,amount) /data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol#44-50\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}], "listLine": [76, 44, 70, 90, 67, 50, 39, 72], "analysis": {"76": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "awTokenToHolder(address _to,ad"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "44": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "nt256)\")),to,amount); \n    }\n}\n\ncontract TokenBank is Token\n{\n "}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}], "70": [{"level": "warning", "tool": ["slither"], "fullDescription": "Contract locking ether found in /data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol:\n\tContract TokenBank has payable functions:\n\t - fallback (/data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol#67-70)\n\t - Deposit (/data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol#70-76)\n\t - WithdrawToHolder (/data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol#90-104)\n\tBut does not have a function to withdraw the ether\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "90": [{"level": "warning", "tool": ["slither"], "fullDescription": "Contract locking ether found in /data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol:\n\tContract TokenBank has payable functions:\n\t - fallback (/data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol#67-70)\n\t - Deposit (/data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol#70-76)\n\t - WithdrawToHolder (/data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol#90-104)\n\tBut does not have a function to withdraw the ether\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "67": [{"level": "warning", "tool": ["slither"], "fullDescription": "Contract locking ether found in /data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol:\n\tContract TokenBank has payable functions:\n\t - fallback (/data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol#67-70)\n\t - Deposit (/data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol#70-76)\n\t - WithdrawToHolder (/data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol#90-104)\n\tBut does not have a function to withdraw the ether\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "50": [{"level": "warning", "tool": ["slither"], "fullDescription": "Contract locking ether found in /data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol:\n\tContract TokenBank has payable functions:\n\t - fallback (/data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol#67-70)\n\t - Deposit (/data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol#70-76)\n\t - WithdrawToHolder (/data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol#90-104)\n\tBut does not have a function to withdraw the ether\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "39": [{"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Token.WithdrawToken (/data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol#39-50):\n\t-token.call(bytes4(sha3()(transfer(address,uint256))),to,amount) /data/demo_analysis/source_code/0x39cfd754c85023648bf003bea2dd498c5612abfa.sol#44-50\n", "name": "UncheckedLowCallsVulnerability"}], "72": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 2, "ReentrancyVulnerability": 1, "UncheckedLowCallsVulnerability": 2, "OtherVulnerability": 4}, "count_leve_vulnerabilities": {"warning": 7, "error": 0, "note": 2, "none": 0}, "false_positives": 0}, "0xe09b1ab8111c2729a76f16de96bc86a7af837928": {"contract": "0xe09b1ab8111c2729a76f16de96bc86a7af837928", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 19, "list_vulnerabilities": ["UncheckedLowCallsVulnerability", "ArithmeticVulnerability", "OtherVulnerability", "DenialServiceVulnerability", "AccessControlVulnerability", "ReentrancyVulnerability"], "rules": [{"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `wager(bool,uint256,uint256,uint8,bytes32,bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_7", "fullDescription": {"text": "In the function `refund(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.number\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Dependence on predictable environment variable"}}, {"id": "AccessControl_19", "fullDescription": {"text": "FiftyFlip.sendFunds (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#332-340) sends eth to arbitrary user\n\tDangerous calls:\n\t- success = paidUser.send(amount) (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#333-334)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in FiftyFlip.wager (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#130-166):\n\tExternal calls:\n\t- whale.call.value(donate_amount)(bytes4(keccak256()(donate()))) (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#154-156)\n\tState variables written after the call(s):\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#158)\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#158-161)\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#161)\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#161-162)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "Reentrancy_9", "fullDescription": {"text": "Reentrancy in FiftyFlip.wager (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#130-166):\n\tExternal calls:\n\t- whale.call.value(donate_amount)(bytes4(keccak256()(donate()))) (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#154-156)\n\tState variables written after the call(s):\n\t- totalAmountToWhale (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#156-158)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-benign"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in FiftyFlip.wager (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#130-166):\n\t-whale.call.value(donate_amount)(bytes4(keccak256()(donate()))) /data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#154-156\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [145, 148, 149, 292, 220, 323, 324, 332, 333, 130, 154, 161, 158, 156, 171, 287, 270, 168, 142, 354, 344, 213, 340, 169, 150], "analysis": {"145": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "ze += amount * DEV_FEE / 1000;\n  "}, "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}], "148": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "    uint donate_amount = amount * DONATING"}, "fullDescription": "A possible integer overflow exists in the function `wager(bool,uint256,uint256,uint8,bytes32,bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "149": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "        // <yes> <report> UNCHECKED_L"}, "fullDescription": "A possible integer overflow exists in the function `wager(bool,uint256,uint256,uint8,bytes32,bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "292": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "ontract owner.\n    functio"}, "fullDescription": "A possible integer overflow exists in the function `wager(bool,uint256,uint256,uint8,bytes32,bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `wager(bool,uint256,uint256,uint8,bytes32,bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "220": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "e going to withdraw more than you don"}, "fullDescription": "A possible integer overflow exists in the function `wager(bool,uint256,uint256,uint8,bytes32,bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "323": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "amount) private returns (bool){\n "}, "fullDescription": "In the function `refund(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.number\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "324": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "d(amount);\n       "}, "fullDescription": "A possible integer overflow exists in the function `wager(bool,uint256,uint256,uint8,bytes32,bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "332": [{"level": "error", "tool": ["slither"], "fullDescription": "FiftyFlip.sendFunds (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#332-340) sends eth to arbitrary user\n\tDangerous calls:\n\t- success = paidUser.send(amount) (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#333-334)\n", "name": "AccessControlVulnerability"}], "333": [{"level": "error", "tool": ["slither"], "snippet": {"text": "success = paidUser.send(amount)"}, "fullDescription": "FiftyFlip.sendFunds (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#332-340) sends eth to arbitrary user\n\tDangerous calls:\n\t- success = paidUser.send(amount) (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#333-334)\n", "name": "AccessControlVulnerability"}], "130": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in FiftyFlip.wager (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#130-166):\n\tExternal calls:\n\t- whale.call.value(donate_amount)(bytes4(keccak256()(donate()))) (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#154-156)\n\tState variables written after the call(s):\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#158)\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#158-161)\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#161)\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#161-162)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in FiftyFlip.wager (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#130-166):\n\t-whale.call.value(donate_amount)(bytes4(keccak256()(donate()))) /data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#154-156\n", "name": "UncheckedLowCallsVulnerability"}], "154": [{"level": "error", "tool": ["slither"], "snippet": {"text": "whale.call.value(donate_amount)(bytes4(keccak256()(donate())))"}, "fullDescription": "Reentrancy in FiftyFlip.wager (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#130-166):\n\tExternal calls:\n\t- whale.call.value(donate_amount)(bytes4(keccak256()(donate()))) (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#154-156)\n\tState variables written after the call(s):\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#158)\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#158-161)\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#161)\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#161-162)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in FiftyFlip.wager (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#130-166):\n\t-whale.call.value(donate_amount)(bytes4(keccak256()(donate()))) /data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#154-156\n", "name": "UncheckedLowCallsVulnerability"}], "161": [{"level": "error", "tool": ["slither"], "snippet": {"text": "bet.player = player"}, "fullDescription": "Reentrancy in FiftyFlip.wager (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#130-166):\n\tExternal calls:\n\t- whale.call.value(donate_amount)(bytes4(keccak256()(donate()))) (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#154-156)\n\tState variables written after the call(s):\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#158)\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#158-161)\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#161)\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#161-162)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "158": [{"level": "error", "tool": ["slither"], "snippet": {"text": "bet.blockNumber = block.number"}, "fullDescription": "Reentrancy in FiftyFlip.wager (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#130-166):\n\tExternal calls:\n\t- whale.call.value(donate_amount)(bytes4(keccak256()(donate()))) (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#154-156)\n\tState variables written after the call(s):\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#158)\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#158-161)\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#161)\n\t- bets (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#161-162)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "156": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "totalAmountToWhale += donate_amount"}, "fullDescription": "Reentrancy in FiftyFlip.wager (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#130-166):\n\tExternal calls:\n\t- whale.call.value(donate_amount)(bytes4(keccak256()(donate()))) (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#154-156)\n\tState variables written after the call(s):\n\t- totalAmountToWhale (/data/demo_analysis/source_code/0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol#156-158)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "171": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "287": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "270": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "168": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "142": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "354": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "344": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "213": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "340": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "169": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "150": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "DenialServiceVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"UncheckedLowCallsVulnerability": 3, "ArithmeticVulnerability": 16, "OtherVulnerability": 1, "DenialServiceVulnerability": 2, "AccessControlVulnerability": 2, "ReentrancyVulnerability": 5}, "count_leve_vulnerabilities": {"warning": 20, "error": 6, "note": 3, "none": 0}, "false_positives": 0}, "list_dos": {"contract": "list_dos", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 26, "list_vulnerabilities": ["ArithmeticVulnerability", "TimeManipulationVulnerability", "OtherVulnerability", "UncheckedLowCallsVulnerability", "DenialServiceVulnerability", "AccessControlVulnerability", "FrontRunningVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `getCreditorAmounts()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1357\nCall at address: 1468\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Other_7", "fullDescription": {"text": "In the function `fallback` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Dependence on predictable environment variable"}}, {"id": "AccessControl_13", "fullDescription": {"text": "In the function `fallback` a non-zero amount of Ether is sent to an address taken from storage slot 87903029871075914254377627908054574944891091886930582284385770809450030037083.\nThere is a check on storage index 87903029871075914254377627908054574944891091886930582284385770809450030037083. This storage slot can be written to by calling the function `fallback`.\n\nThere is a check on storage index 1. This storage slot can be written to by calling the function `fallback`.\nThere is a check on storage index 3. This storage slot can be written to by calling the function `fallback`."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "TimeManipulation_4", "fullDescription": {"text": "Government.lendGovernmentMoney (/data/demo_analysis/source_code/list_dos.sol#31-86) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- lastTimeOfNewCredit + TWELVE_HOURS < block.timestamp (/data/demo_analysis/source_code/list_dos.sol#35-85)\n"}, "name": "TimeManipulationVulnerability", "shortDescription": {"text": "timestamp"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [121, 117, 35, 37, 39, 40, 62, 70, 75, 82, 101, 122, 16, 118, 17, 10, 31], "analysis": {"121": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "function getCreditorAmounts() returns (uint[]) {\n         return creditorAmounts;\n     }"}, "fullDescription": "A possible integer overflow exists in the function `getCreditorAmounts()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "117": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "function getCreditorAddresses() returns (address[]) {\n         return creditorAddresses;\n     }"}, "fullDescription": "A possible integer overflow exists in the function `getCreditorAmounts()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "35": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "lastTimeOfNewCredit + TWELVE_HOURS"}, "fullDescription": "A possible integer overflow exists in the function `getCreditorAmounts()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Government.lendGovernmentMoney (/data/demo_analysis/source_code/list_dos.sol#31-86) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- lastTimeOfNewCredit + TWELVE_HOURS < block.timestamp (/data/demo_analysis/source_code/list_dos.sol#35-85)\n", "name": "TimeManipulationVulnerability", "flag": "risk of false positives"}], "37": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.sender.send(amount)"}, "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1357\nCall at address: 1468\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "39": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "creditorAddresses[creditorAddresses.length - 1]"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "In the function `fallback` a non-zero amount of Ether is sent to an address taken from storage slot 87903029871075914254377627908054574944891091886930582284385770809450030037083.\nThere is a check on storage index 87903029871075914254377627908054574944891091886930582284385770809450030037083. This storage slot can be written to by calling the function `fallback`.\n\nThere is a check on storage index 1. This storage slot can be written to by calling the function `fallback`.\nThere is a check on storage index 3. This storage slot can be written to by calling the function `fallback`.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "40": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "corruptElite.send(this.balance)"}, "fullDescription": "In the function `fallback` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "62": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "corruptElite.send(amount * 5/100)"}, "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1357\nCall at address: 1468\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "70": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "buddy.send(amount * 5/100)"}, "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "75": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "creditorAddresses[lastCreditorPayedOut].send(creditorAmounts[lastCreditorPayedOut])"}, "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "82": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "msg.sender.send(amount)"}, "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "101": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "creditorAmounts[i]"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "122": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "return creditorAmounts"}, "fullDescription": "A possible integer overflow exists in the function `getCreditorAmounts()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `getCreditorAmounts()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "16": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "address[] public creditorAddresses"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "118": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "return creditorAddresses"}, "fullDescription": "A possible integer overflow exists in the function `getCreditorAmounts()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `getCreditorAmounts()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "17": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "uint[] public creditorAmounts"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "10": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "contract Government {\n\n     // Global Variables\n     uint32 public lastCreditorPayedOut;\n     uint public lastTimeOfNewCredit;\n     uint public profitFromCrash;\n     address[] public creditorAddresses;\n     uint[] public creditorAmounts;\n     address public corruptElite;\n     mapping (address => uint) buddies;\n     uint constant TWELVE_HOURS = 43200;\n     uint8 public round;\n\n     function Government() {\n         // The corrupt elite establishes a new government\n         // this is the commitment of the corrupt Elite - everything that can not be saved from a crash\n         profitFromCrash = msg.value;\n         corruptElite = msg.sender;\n         lastTimeOfNewCredit = block.timestamp;\n     }\n\n     function lendGovernmentMoney(address buddy) returns (bool) {\n         uint amount = msg.value;\n         // check if the system already broke down. If for 12h no new creditor gives new credit to the system it will brake down.\n         // 12h are on average = 60*60*12/12.5 = 3456\n         if (lastTimeOfNewCredit + TWELVE_HOURS < block.timestamp) {\n             // Return money to sender\n             msg.sender.send(amount);\n             // Sends all contract money to the last creditor\n             creditorAddresses[creditorAddresses.length - 1].send(profitFromCrash);\n             corruptElite.send(this.balance);\n             // Reset contract state\n             lastCreditorPayedOut = 0;\n             lastTimeOfNewCredit = block.timestamp;\n             profitFromCrash = 0;\n            // <yes> <report> DENIAL_OF_SERVICE\n             creditorAddresses = new address[](0);\n            // <yes> <report> DENIAL_OF_SERVICE\n             creditorAmounts = new uint[](0);\n             round += 1;\n             return false;\n         }\n         else {\n             // the system needs to collect at least 1% of the profit from a crash to stay alive\n             if (amount >= 10 ** 18) {\n                 // the System has received fresh money, it will survive at leat 12h more\n                 lastTimeOfNewCredit = block.timestamp;\n                 // register the new creditor and his amount with 10% interest rate\n                 creditorAddresses.push(msg.sender);\n                 creditorAmounts.push(amount * 110 / 100);\n                 // now the money is distributed\n                 // first the corrupt elite grabs 5% - thieves!\n                 corruptElite.send(amount * 5/100);\n                 // 5% are going into the economy (they will increase the value for the person seeing the crash comming)\n                 if (profitFromCrash < 10000 * 10**18) {\n                     profitFromCrash += amount * 5/100;\n                 }\n                 // if you have a buddy in the government (and he is in the creditor list) he can get 5% of your credits.\n                 // Make a deal with him.\n                 if(buddies[buddy] >= amount) {\n                     buddy.send(amount * 5/100);\n                 }\n                 buddies[msg.sender] += amount * 110 / 100;\n                 // 90% of the money will be used to pay out old creditors\n                 if (creditorAmounts[lastCreditorPayedOut] <= address(this).balance - profitFromCrash) {\n                     creditorAddresses[lastCreditorPayedOut].send(creditorAmounts[lastCreditorPayedOut]);\n                     buddies[creditorAddresses[lastCreditorPayedOut]] -= creditorAmounts[lastCreditorPayedOut];\n                     lastCreditorPayedOut += 1;\n                 }\n                 return true;\n             }\n             else {\n                 msg.sender.send(amount);\n                 return false;\n             }\n         }\n     }\n\n     // fallback function\n     function() {\n         lendGovernmentMoney(0);\n     }\n\n     function totalDebt() returns (uint debt) {\n         for(uint i=lastCreditorPayedOut; i<creditorAmounts.length; i++){\n             debt += creditorAmounts[i];\n         }\n     }\n\n     function totalPayedOut() returns (uint payout) {\n         for(uint i=0; i<lastCreditorPayedOut; i++){\n             payout += creditorAmounts[i];\n         }\n     }\n\n     // better don't do it (unless you are the corrupt elite and you want to establish trust in the system)\n     function investInTheSystem() {\n         profitFromCrash += msg.value;\n     }\n\n     // From time to time the corrupt elite inherits it's power to the next generation\n     function inheritToNextGeneration(address nextGeneration) {\n         if (msg.sender == corruptElite) {\n             corruptElite = nextGeneration;\n         }\n     }\n\n     function getCreditorAddresses() returns (address[]) {\n         return creditorAddresses;\n     }\n\n     function getCreditorAmounts() returns (uint[]) {\n         return creditorAmounts;\n     }\n }"}, "fullDescription": "A possible integer overflow exists in the function `getCreditorAmounts()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `getCreditorAmounts()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "31": [{"level": "warning", "tool": ["slither"], "fullDescription": "Government.lendGovernmentMoney (/data/demo_analysis/source_code/list_dos.sol#31-86) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- lastTimeOfNewCredit + TWELVE_HOURS < block.timestamp (/data/demo_analysis/source_code/list_dos.sol#35-85)\n", "name": "TimeManipulationVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 10, "TimeManipulationVulnerability": 2, "OtherVulnerability": 7, "UncheckedLowCallsVulnerability": 7, "DenialServiceVulnerability": 7, "AccessControlVulnerability": 1, "FrontRunningVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 25, "error": 0, "note": 11, "none": 0}, "false_positives": 0}, "0x89c1b3807d4c67df034fffb62f3509561218d30b": {"contract": "0x89c1b3807d4c67df034fffb62f3509561218d30b", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 21, "list_vulnerabilities": ["ArithmeticVulnerability", "ReentrancyVulnerability", "UncheckedLowCallsVulnerability", "OtherVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Arithmetic_5", "fullDescription": {"text": "A possible integer underflow exists in the function `upgrade(address)`.\nThe subtraction may result in a value < 0."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Reentrancy_4", "fullDescription": {"text": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "State change after external call"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in TownCrier.cancel (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#205-222):\n\tExternal calls:\n\t- ! msg.sender.call.value(fee - CANCELLATION_FEE)() (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#215-218)\n\tState variables written after the call(s):\n\t- externalCallFlag (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#218)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "Reentrancy_9", "fullDescription": {"text": "Reentrancy in TownCrier.deliver (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#144-205):\n\tExternal calls:\n\t- requests[requestId].requester.call.gas(2300).value(fee)() (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#184-185)\n\tState variables written after the call(s):\n\t- externalCallFlag (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#185)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-benign"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in TownCrier.withdraw (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#93-100):\n\t-! requests[0].requester.call.value(this.balance)() /data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#96-100\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}], "listLine": [100, 67, 97, 168, 172, 173, 179, 184, 215, 218, 110, 115, 122, 125, 131, 138, 43, 205, 121, 144, 185, 192, 193, 202, 93, 96, 169, 65, 164, 186, 162, 180, 94], "analysis": {"100": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "32[] requestData) public payable returns (int) {\n        if (externalCallFlag) {\n            throw;\n        }\n\n        if (killswitch) {\n            externalCallFlag = true;\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return newVersion;\n        }\n\n        if (msg.value < MIN_FEE) {\n            externalCallFlag = true;\n            // If the amount of ether sent by the requester is too little or \n            // too much, refund the requester and discard the request.\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return FAIL_FLAG;\n        } else {\n            // Record the request.\n            uint64 requestId = requestCnt;\n            requestCnt++;\n            unrespondedCnt++;\n\n            bytes32 paramsHash = sha3(requestType, requestData);\n            requests[requestId].requester = msg.sender;\n            requests[requestId].fee = msg.value;\n            requests[requestId].callbackAddr = callbackAddr;\n            requests[requestId].callbackFID = callbackFID;\n            requests[requestId].paramsHash = paramsHash;\n\n            // Log the request for the Town Crier server to process.\n            RequestInfo(requestId, requestType, msg.sender, msg.value, callbackAddr, paramsHash, timestamp, requestData);\n            return requestId;\n        }\n    }\n\n    function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 respData) public {\n        if (msg.sender != SGX_ADDRESS"}, "fullDescription": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril", "oyente"], "fullDescription": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril", "oyente"], "fullDescription": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril", "oyente"], "fullDescription": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in TownCrier.cancel (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#205-222):\n\tExternal calls:\n\t- ! msg.sender.call.value(fee - CANCELLATION_FEE)() (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#215-218)\n\tState variables written after the call(s):\n\t- externalCallFlag (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#218)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in TownCrier.withdraw (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#93-100):\n\t-! requests[0].requester.call.value(this.balance)() /data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#96-100\n", "name": "UncheckedLowCallsVulnerability"}], "67": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "e(newAddr);\n "}, "fullDescription": "A possible integer underflow exists in the function `upgrade(address)`.\nThe subtraction may result in a value < 0.", "name": "ArithmeticVulnerability"}], "97": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "    }\n    }\n\n    function request(uint8 requestT"}, "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}], "168": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "  requests[requestId].fee = DELIVE"}, "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}], "172": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "    // Either no"}, "fullDescription": "A possible integer underflow exists in the function `upgrade(address)`.\nThe subtraction may result in a value < 0.", "name": "ArithmeticVulnerability"}], "173": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "t for its delive"}, "fullDescription": "A possible integer underflow exists in the function `upgrade(address)`.\nThe subtraction may result in a value < 0.", "name": "ArithmeticVulnerability"}], "179": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "D_LL_CALLS\n          "}, "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in TownCrier.deliver (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#144-205):\n\tExternal calls:\n\t- requests[requestId].requester.call.gas(2300).value(fee)() (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#184-185)\n\tState variables written after the call(s):\n\t- externalCallFlag (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#185)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "184": [{"level": "note", "tool": ["mythril", "slither"], "snippet": {"text": "or the callback function\n        DeliverInfo(requestId, f"}, "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in TownCrier.deliver (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#144-205):\n\tExternal calls:\n\t- requests[requestId].requester.call.gas(2300).value(fee)() (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#184-185)\n\tState variables written after the call(s):\n\t- externalCallFlag (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#185)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "215": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "questId].fee, 1);\n            return SUCCESS_FL"}, "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in TownCrier.withdraw (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#93-100):\n\t-! requests[0].requester.call.value(this.balance)() /data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#96-100\n", "name": "UncheckedLowCallsVulnerability"}], "218": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "ender, requests[requestI"}, "fullDescription": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "name": "ReentrancyVulnerability"}], "110": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "false;\n            return newVersi"}, "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in TownCrier.withdraw (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#93-100):\n\t-! requests[0].requester.call.value(this.balance)() /data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#96-100\n", "name": "UncheckedLowCallsVulnerability"}], "115": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "      externalCallFlag ="}, "fullDescription": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "name": "ReentrancyVulnerability"}], "122": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "        return FAIL_FLAG;\n        "}, "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}], "125": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "uint64 requestId = reque"}, "fullDescription": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "name": "ReentrancyVulnerability"}], "131": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "g.value;\n            requests["}, "fullDescription": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "138": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "Id;\n        }\n    }\n\n    function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 respDa"}, "fullDescription": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "43": [{"level": "note", "tool": ["mythril"], "snippet": {"text": " public newVersion = 0;\n\n    /"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "205": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in TownCrier.cancel (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#205-222):\n\tExternal calls:\n\t- ! msg.sender.call.value(fee - CANCELLATION_FEE)() (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#215-218)\n\tState variables written after the call(s):\n\t- externalCallFlag (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#218)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in TownCrier.withdraw (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#93-100):\n\t-! requests[0].requester.call.value(this.balance)() /data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#96-100\n", "name": "UncheckedLowCallsVulnerability"}], "121": [{"level": "error", "tool": ["slither"], "snippet": {"text": "! msg.sender.call.value(msg.value)()"}, "fullDescription": "Reentrancy in TownCrier.cancel (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#205-222):\n\tExternal calls:\n\t- ! msg.sender.call.value(fee - CANCELLATION_FEE)() (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#215-218)\n\tState variables written after the call(s):\n\t- externalCallFlag (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#218)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in TownCrier.withdraw (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#93-100):\n\t-! requests[0].requester.call.value(this.balance)() /data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#96-100\n", "name": "UncheckedLowCallsVulnerability"}], "144": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in TownCrier.deliver (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#144-205):\n\tExternal calls:\n\t- requests[requestId].requester.call.gas(2300).value(fee)() (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#184-185)\n\tState variables written after the call(s):\n\t- externalCallFlag (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#185)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in TownCrier.withdraw (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#93-100):\n\t-! requests[0].requester.call.value(this.balance)() /data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#96-100\n", "name": "UncheckedLowCallsVulnerability"}], "185": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "externalCallFlag = false"}, "fullDescription": "Reentrancy in TownCrier.deliver (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#144-205):\n\tExternal calls:\n\t- requests[requestId].requester.call.gas(2300).value(fee)() (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#184-185)\n\tState variables written after the call(s):\n\t- externalCallFlag (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#185)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "192": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "externalCallFlag = true"}, "fullDescription": "Reentrancy in TownCrier.deliver (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#144-205):\n\tExternal calls:\n\t- requests[requestId].requester.call.gas(2300).value(fee)() (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#184-185)\n\tState variables written after the call(s):\n\t- externalCallFlag (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#185)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "193": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "requests[requestId].callbackAddr.call.gas(callbackGas)(requests[requestId].callbackFID,requestId,error,respData)"}, "fullDescription": "Reentrancy in TownCrier.deliver (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#144-205):\n\tExternal calls:\n\t- requests[requestId].requester.call.gas(2300).value(fee)() (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#184-185)\n\tState variables written after the call(s):\n\t- externalCallFlag (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#185)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in TownCrier.withdraw (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#93-100):\n\t-! requests[0].requester.call.value(this.balance)() /data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#96-100\n", "name": "UncheckedLowCallsVulnerability"}], "202": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "externalCallFlag = false"}, "fullDescription": "Reentrancy in TownCrier.deliver (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#144-205):\n\tExternal calls:\n\t- requests[requestId].requester.call.gas(2300).value(fee)() (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#184-185)\n\tState variables written after the call(s):\n\t- externalCallFlag (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#185)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "93": [{"level": "note", "tool": ["slither"], "fullDescription": "Low level call in TownCrier.withdraw (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#93-100):\n\t-! requests[0].requester.call.value(this.balance)() /data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#96-100\n", "name": "UncheckedLowCallsVulnerability"}], "96": [{"level": "note", "tool": ["slither"], "snippet": {"text": "! requests[0].requester.call.value(this.balance)()"}, "fullDescription": "Low level call in TownCrier.withdraw (/data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#93-100):\n\t-! requests[0].requester.call.value(this.balance)() /data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol#96-100\n", "name": "UncheckedLowCallsVulnerability"}], "169": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "65": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "164": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "186": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "162": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "180": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "94": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ReentrancyVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 14, "ReentrancyVulnerability": 18, "UncheckedLowCallsVulnerability": 12, "OtherVulnerability": 1, "DenialServiceVulnerability": 3}, "count_leve_vulnerabilities": {"warning": 31, "error": 3, "note": 14, "none": 0}, "false_positives": 0}, "0x524960d55174d912768678d8c606b4d50b79d7b1": {"contract": "0x524960d55174d912768678d8c606b4d50b79d7b1", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 1, "list_vulnerabilities": ["ReentrancyVulnerability", "OtherVulnerability", "UncheckedLowCallsVulnerability"], "rules": [{"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 534\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in Centra4.transfer (/data/demo_analysis/source_code/0x524960d55174d912768678d8c606b4d50b79d7b1.sol#11-27):\n\t-contract_address.call(register,CentraToken) /data/demo_analysis/source_code/0x524960d55174d912768678d8c606b4d50b79d7b1.sol#21-22\n\t-! contract_address.call(bytes4(keccak256()(transfer(address,uint256))),c2,k) /data/demo_analysis/source_code/0x524960d55174d912768678d8c606b4d50b79d7b1.sol#22-26\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}], "listLine": [21, 22, 11], "analysis": {"21": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "l(\"register\", \"CentraToken\");\n\t\tif(!contract_add"}, "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 534\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}], "22": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "(bytes4(keccak256(\"transfer(address,uint256)\")),c2,k)) return false;\n\n\t\tre"}, "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Centra4.transfer (/data/demo_analysis/source_code/0x524960d55174d912768678d8c606b4d50b79d7b1.sol#11-27):\n\t-contract_address.call(register,CentraToken) /data/demo_analysis/source_code/0x524960d55174d912768678d8c606b4d50b79d7b1.sol#21-22\n\t-! contract_address.call(bytes4(keccak256()(transfer(address,uint256))),c2,k) /data/demo_analysis/source_code/0x524960d55174d912768678d8c606b4d50b79d7b1.sol#22-26\n", "name": "UncheckedLowCallsVulnerability"}], "11": [{"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Centra4.transfer (/data/demo_analysis/source_code/0x524960d55174d912768678d8c606b4d50b79d7b1.sol#11-27):\n\t-contract_address.call(register,CentraToken) /data/demo_analysis/source_code/0x524960d55174d912768678d8c606b4d50b79d7b1.sol#21-22\n\t-! contract_address.call(bytes4(keccak256()(transfer(address,uint256))),c2,k) /data/demo_analysis/source_code/0x524960d55174d912768678d8c606b4d50b79d7b1.sol#22-26\n", "name": "UncheckedLowCallsVulnerability"}]}, "count_vulnerabilities": {"ReentrancyVulnerability": 2, "OtherVulnerability": 1, "UncheckedLowCallsVulnerability": 3}, "count_leve_vulnerabilities": {"warning": 1, "error": 0, "note": 5, "none": 0}, "false_positives": 0}, "0xbaa3de6504690efb064420d89e871c27065cdd52": {"contract": "0xbaa3de6504690efb064420d89e871c27065cdd52", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 1, "list_vulnerabilities": ["ArithmeticVulnerability", "UncheckedLowCallsVulnerability", "AccessControlVulnerability", "ReentrancyVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `proxy(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "AccessControl_15", "fullDescription": {"text": "Function Vault() retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Use of tx.origin"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in Proxy.proxy (/data/demo_analysis/source_code/0xbaa3de6504690efb064420d89e871c27065cdd52.sol#12-18):\n\t-target.call.value(msg.value)(data) /data/demo_analysis/source_code/0xbaa3de6504690efb064420d89e871c27065cdd52.sol#14-18\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [12, 26, 14, 33], "analysis": {"12": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "oxy(address target, bytes data) public payable {\n        // <yes> <report> UNCHECKED_LL_CALLS\n        target.call.value(msg.value)(data);\n    }\n}\n\ncontract V"}, "fullDescription": "A possible integer overflow exists in the function `proxy(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Proxy.proxy (/data/demo_analysis/source_code/0xbaa3de6504690efb064420d89e871c27065cdd52.sol#12-18):\n\t-target.call.value(msg.value)(data) /data/demo_analysis/source_code/0xbaa3de6504690efb064420d89e871c27065cdd52.sol#14-18\n", "name": "UncheckedLowCallsVulnerability"}], "26": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": " Owner = "}, "fullDescription": "Function Vault() retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "name": "AccessControlVulnerability"}], "14": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "alue(msg.value)(data);\n    }\n}\n\nco"}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "33": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "e;\n        }\n    }\n    \n    funct"}, "fullDescription": "A possible integer overflow exists in the function `proxy(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 2, "UncheckedLowCallsVulnerability": 2, "AccessControlVulnerability": 1, "ReentrancyVulnerability": 1, "DenialServiceVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 5, "error": 0, "note": 2, "none": 0}, "false_positives": 0}, "0x7541b76cb60f4c60af330c208b0623b7f54bf615": {"contract": "0x7541b76cb60f4c60af330c208b0623b7f54bf615", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 4, "list_vulnerabilities": ["ArithmeticVulnerability", "ReentrancyVulnerability", "OtherVulnerability", "UncheckedLowCallsVulnerability", "TimeManipulationVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_7", "fullDescription": {"text": "In the function `Collect(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Dependence on predictable environment variable"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1136\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in U_BANK.Collect (/data/demo_analysis/source_code/0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol#21-39):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol#29-37)\n\tState variables written after the call(s):\n\t- Acc (/data/demo_analysis/source_code/0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol#32)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in U_BANK.Collect (/data/demo_analysis/source_code/0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol#21-39):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol#29-37\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "TimeManipulation_3", "name": "TimeManipulationVulnerability", "shortDescription": {"text": "Timestamp Dependency."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Reentrancy_13", "name": "ReentrancyVulnerability", "shortDescription": {"text": "straw_man_contract"}}], "listLine": [16, 18, 29, 21, 72, 76, 50, 26], "analysis": {"16": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.value;\n        acc.u"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "18": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "e(msg.sender,msg.value,\"Put\");\n    }\n\n    func"}, "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}], "29": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": ")\n            {\n            "}, "fullDescription": "In the function `Collect(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["mythril", "slither", "oyente"], "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in U_BANK.Collect (/data/demo_analysis/source_code/0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol#21-39):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol#29-37\n", "name": "UncheckedLowCallsVulnerability"}], "32": [], "21": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in U_BANK.Collect (/data/demo_analysis/source_code/0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol#21-39):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol#29-37)\n\tState variables written after the call(s):\n\t- Acc (/data/demo_analysis/source_code/0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol#32)\n", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in U_BANK.Collect (/data/demo_analysis/source_code/0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol#21-39):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol#29-37\n", "name": "UncheckedLowCallsVulnerability"}], "72": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "76": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "50": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "26": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "TimeManipulationVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 4, "ReentrancyVulnerability": 2, "OtherVulnerability": 1, "UncheckedLowCallsVulnerability": 1, "TimeManipulationVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 7, "error": 0, "note": 2, "none": 0}, "false_positives": 1}, "FindThisHash": {"contract": "FindThisHash", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ArithmeticVulnerability", "AccessControlVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `solve(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "AccessControl_13", "fullDescription": {"text": "In the function `solve(string)` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "AccessControl_19", "fullDescription": {"text": "FindThisHash.solve (/data/demo_analysis/source_code/FindThisHash.sol#14-19) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(1000000000000000000000) (/data/demo_analysis/source_code/FindThisHash.sol#18)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}], "listLine": [14, 18], "analysis": {"14": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "function solve(string solution) public {\n        // If you can find the pre image of the hash, receive 1000 ether\n         // <yes> <report> FRONT_RUNNING\n        require(hash == sha3(solution));\n        msg.sender.transfer(1000 ether);\n    }"}, "fullDescription": "A possible integer overflow exists in the function `solve(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "error", "tool": ["slither"], "fullDescription": "FindThisHash.solve (/data/demo_analysis/source_code/FindThisHash.sol#14-19) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(1000000000000000000000) (/data/demo_analysis/source_code/FindThisHash.sol#18)\n", "name": "AccessControlVulnerability"}], "18": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "msg.sender.transfer(1000 ether)"}, "fullDescription": "In the function `solve(string)` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions.", "name": "AccessControlVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1, "AccessControlVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 2, "error": 1, "note": 0, "none": 0}, "false_positives": 0}, "0x7a4349a749e59a5736efb7826ee3496a2dfd5489": {"contract": "0x7a4349a749e59a5736efb7826ee3496a2dfd5489", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 3, "list_vulnerabilities": ["ArithmeticVulnerability", "UncheckedLowCallsVulnerability", "FrontRunningVulnerability", "AccessControlVulnerability", "ReentrancyVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `Command(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 922\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "AccessControl_13", "fullDescription": {"text": "In the function `GetFreebie()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "AccessControl_19", "fullDescription": {"text": "WhaleGiveaway1.GetFreebie (/data/demo_analysis/source_code/0x7a4349a749e59a5736efb7826ee3496a2dfd5489.sol#20-30) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/0x7a4349a749e59a5736efb7826ee3496a2dfd5489.sol#26-27)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in WhaleGiveaway1.Command (/data/demo_analysis/source_code/0x7a4349a749e59a5736efb7826ee3496a2dfd5489.sol#38-46):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0x7a4349a749e59a5736efb7826ee3496a2dfd5489.sol\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}, {"id": "Other_21", "name": "OtherVulnerability", "shortDescription": {"text": "hidden_transfer"}}], "listLine": [38, 36, 25, 26, 46, 20, 44], "analysis": {"38": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "ta)\n    payable\n    public\n    {\n        require(msg.sender == Owner);\n        // <yes> <report> UNCHECKED_LL_CALLS\n        adr.call.value(msg.value)(data);\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `Command(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in WhaleGiveaway1.Command (/data/demo_analysis/source_code/0x7a4349a749e59a5736efb7826ee3496a2dfd5489.sol#38-46):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0x7a4349a749e59a5736efb7826ee3496a2dfd5489.sol\n", "name": "UncheckedLowCallsVulnerability"}], "36": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "}\n    \n    function Command("}, "fullDescription": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "25": [{"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability"}], "26": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "balance);\n        }              "}, "fullDescription": "In the function `GetFreebie()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions.", "name": "AccessControlVulnerability"}], "46": [{"level": "warning", "tool": ["mythril"], "snippet": {}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}], "20": [{"level": "error", "tool": ["slither"], "fullDescription": "WhaleGiveaway1.GetFreebie (/data/demo_analysis/source_code/0x7a4349a749e59a5736efb7826ee3496a2dfd5489.sol#20-30) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/0x7a4349a749e59a5736efb7826ee3496a2dfd5489.sol#26-27)\n", "name": "AccessControlVulnerability"}], "44": [{"level": "note", "tool": ["slither"], "snippet": {"text": "adr.call.value(msg.value)(data)"}, "fullDescription": "Low level call in WhaleGiveaway1.Command (/data/demo_analysis/source_code/0x7a4349a749e59a5736efb7826ee3496a2dfd5489.sol#38-46):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0x7a4349a749e59a5736efb7826ee3496a2dfd5489.sol\n", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1, "UncheckedLowCallsVulnerability": 3, "FrontRunningVulnerability": 1, "AccessControlVulnerability": 2, "ReentrancyVulnerability": 1, "DenialServiceVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 5, "error": 1, "note": 3, "none": 0}, "false_positives": 1}, "0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8": {"contract": "0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 5, "list_vulnerabilities": ["ArithmeticVulnerability", "OtherVulnerability", "ReentrancyVulnerability", "UncheckedLowCallsVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in DEP_BANK.Collect (/data/demo_analysis/source_code/0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol#49-66):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol#56-64)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol#57)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in DEP_BANK.Collect (/data/demo_analysis/source_code/0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol#49-66):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol#56-64\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "Reentrancy_13", "name": "ReentrancyVulnerability", "shortDescription": {"text": "straw_man_contract"}}], "listLine": [89, 2, 86, 77, 49, 56, 54, 82], "analysis": {"89": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "tMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "2": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "n.io \n * @author: "}, "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "86": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "address _adr,uint _val,s"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "77": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "     string  Data;\n        uint Val;\n        uint  Time;\n    }\n    \n    Message[] public History;\n    \n    Message LastMsg;\n    \n    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "49": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in DEP_BANK.Collect (/data/demo_analysis/source_code/0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol#49-66):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol#56-64)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol#57)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in DEP_BANK.Collect (/data/demo_analysis/source_code/0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol#49-66):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol#56-64\n", "name": "UncheckedLowCallsVulnerability"}], "56": [{"level": "error", "tool": ["slither"], "snippet": {"text": "msg.sender.call.value(_am)()"}, "fullDescription": "Reentrancy in DEP_BANK.Collect (/data/demo_analysis/source_code/0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol#49-66):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol#56-64)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol#57)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in DEP_BANK.Collect (/data/demo_analysis/source_code/0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol#49-66):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol#56-64\n", "name": "UncheckedLowCallsVulnerability"}], "57": [], "54": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ReentrancyVulnerability"}], "82": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 8, "OtherVulnerability": 1, "ReentrancyVulnerability": 2, "UncheckedLowCallsVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 8, "error": 2, "note": 3, "none": 0}, "false_positives": 1}, "0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12": {"contract": "0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 4, "list_vulnerabilities": ["ReentrancyVulnerability", "OtherVulnerability", "UncheckedLowCallsVulnerability", "ArithmeticVulnerability"], "rules": [{"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 755\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `Deposit()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in Private_Bank.CashOut (/data/demo_analysis/source_code/0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#34-49):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#41-48)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#43)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in Private_Bank.CashOut (/data/demo_analysis/source_code/0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#34-49):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#41-48\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Reentrancy_13", "name": "ReentrancyVulnerability", "shortDescription": {"text": "straw_man_contract"}}], "listLine": [41, 28, 29, 34, 63, 67, 40], "analysis": {"41": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "   {\n                balance"}, "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 755\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Private_Bank.CashOut (/data/demo_analysis/source_code/0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#34-49):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#41-48\n", "name": "UncheckedLowCallsVulnerability"}], "43": [], "28": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "alue;\n            TransferLog.A"}, "fullDescription": "A possible integer overflow exists in the function `Deposit()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "29": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "ender,msg.value,\"Deposit\");\n        }\n    }\n    \n    f"}, "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}], "34": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in Private_Bank.CashOut (/data/demo_analysis/source_code/0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#34-49):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#41-48)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#43)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Private_Bank.CashOut (/data/demo_analysis/source_code/0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#34-49):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#41-48\n", "name": "UncheckedLowCallsVulnerability"}], "63": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "67": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "40": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ReentrancyVulnerability"}]}, "count_vulnerabilities": {"ReentrancyVulnerability": 4, "OtherVulnerability": 1, "UncheckedLowCallsVulnerability": 2, "ArithmeticVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 5, "error": 1, "note": 3, "none": 0}, "false_positives": 1}, "eth_tx_order_dependence_minimal": {"contract": "eth_tx_order_dependence_minimal", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 2, "list_vulnerabilities": ["AccessControlVulnerability", "FrontRunningVulnerability"], "rules": [{"id": "AccessControl_13", "fullDescription": {"text": "In the function `setReward()` a non-zero amount of Ether is sent to an address taken from storage slot 0.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `claimReward(uint256)`.\n\nThere is a check on storage index 0. This storage slot can be written to by calling the function `claimReward(uint256)`.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `claimReward(uint256)`."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function setReward(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}], "listLine": [23, 31], "analysis": {"23": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "owner.transfer(reward)"}, "fullDescription": "In the function `setReward()` a non-zero amount of Ether is sent to an address taken from storage slot 0.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `claimReward(uint256)`.\n\nThere is a check on storage index 0. This storage slot can be written to by calling the function `claimReward(uint256)`.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `claimReward(uint256)`.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function setReward(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "31": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.sender.transfer(reward)"}, "fullDescription": "In the function `setReward()` a non-zero amount of Ether is sent to an address taken from storage slot 0.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `claimReward(uint256)`.\n\nThere is a check on storage index 0. This storage slot can be written to by calling the function `claimReward(uint256)`.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `claimReward(uint256)`.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function setReward(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 2, "FrontRunningVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 4, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "0xf2570186500a46986f3139f65afedc2afe4f445d": {"contract": "0xf2570186500a46986f3139f65afedc2afe4f445d", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 1, "list_vulnerabilities": ["ReentrancyVulnerability", "OtherVulnerability", "UncheckedLowCallsVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 349\nCall at address: 349\nCall at address: 349\nCall at address: 349\nCall at address: 349\nCall at address: 349\nCall at address: 349\nCall at address: 349\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "DenialService_3", "fullDescription": {"text": "RealOldFuckMaker.makeOldFucks has external calls inside a loop:\n\t- fuck.call(bytes4(sha3()(giveBlockReward()))) (/data/demo_analysis/source_code/0xf2570186500a46986f3139f65afedc2afe4f445d.sol#18-20)\n"}, "name": "DenialServiceVulnerability", "shortDescription": {"text": "calls-loop"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in RealOldFuckMaker.makeOldFucks (/data/demo_analysis/source_code/0xf2570186500a46986f3139f65afedc2afe4f445d.sol#14-21):\n\t-fuck.call(bytes4(sha3()(giveBlockReward()))) /data/demo_analysis/source_code/0xf2570186500a46986f3139f65afedc2afe4f445d.sol#18-20\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}], "listLine": [18, 14], "analysis": {"18": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "sha3(\"giveBlockReward()\")));\n        }\n    }"}, "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 349\nCall at address: 349\nCall at address: 349\nCall at address: 349\nCall at address: 349\nCall at address: 349\nCall at address: 349\nCall at address: 349\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "RealOldFuckMaker.makeOldFucks has external calls inside a loop:\n\t- fuck.call(bytes4(sha3()(giveBlockReward()))) (/data/demo_analysis/source_code/0xf2570186500a46986f3139f65afedc2afe4f445d.sol#18-20)\n", "name": "DenialServiceVulnerability"}], "14": [{"level": "warning", "tool": ["slither"], "fullDescription": "RealOldFuckMaker.makeOldFucks has external calls inside a loop:\n\t- fuck.call(bytes4(sha3()(giveBlockReward()))) (/data/demo_analysis/source_code/0xf2570186500a46986f3139f65afedc2afe4f445d.sol#18-20)\n", "name": "DenialServiceVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in RealOldFuckMaker.makeOldFucks (/data/demo_analysis/source_code/0xf2570186500a46986f3139f65afedc2afe4f445d.sol#14-21):\n\t-fuck.call(bytes4(sha3()(giveBlockReward()))) /data/demo_analysis/source_code/0xf2570186500a46986f3139f65afedc2afe4f445d.sol#18-20\n", "name": "UncheckedLowCallsVulnerability"}]}, "count_vulnerabilities": {"ReentrancyVulnerability": 1, "OtherVulnerability": 1, "UncheckedLowCallsVulnerability": 2, "DenialServiceVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 3, "error": 0, "note": 3, "none": 0}, "false_positives": 0}, "0xdb1c55f6926e7d847ddf8678905ad871a68199d2": {"contract": "0xdb1c55f6926e7d847ddf8678905ad871a68199d2", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 2, "list_vulnerabilities": ["ArithmeticVulnerability", "UncheckedLowCallsVulnerability", "FrontRunningVulnerability", "AccessControlVulnerability", "ReentrancyVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `Command(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 922\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "AccessControl_13", "fullDescription": {"text": "In the function `GetFreebie()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "AccessControl_19", "fullDescription": {"text": "FreeEth.GetFreebie (/data/demo_analysis/source_code/0xdb1c55f6926e7d847ddf8678905ad871a68199d2.sol#15-25) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/0xdb1c55f6926e7d847ddf8678905ad871a68199d2.sol#21-22)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in FreeEth.Command (/data/demo_analysis/source_code/0xdb1c55f6926e7d847ddf8678905ad871a68199d2.sol#33-41):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0xdb1c55f6926e7d847ddf8678905ad871a68199d2.sol#40-41\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}, {"id": "Other_21", "name": "OtherVulnerability", "shortDescription": {"text": "hidden_transfer"}}], "listLine": [33, 30, 20, 21, 40, 15, 39], "analysis": {"33": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "es data)\n    payable\n    public\n    {\n        require(msg.sender == Owner);\n        // <yes> <report> UNCHECKED_LL_CALLS\n        adr.call.value(msg.value)(data);\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `Command(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in FreeEth.Command (/data/demo_analysis/source_code/0xdb1c55f6926e7d847ddf8678905ad871a68199d2.sol#33-41):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0xdb1c55f6926e7d847ddf8678905ad871a68199d2.sol#40-41\n", "name": "UncheckedLowCallsVulnerability"}], "30": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "\n    }\n    \n    function Com"}, "fullDescription": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "20": [{"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability"}], "21": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "this.balance);\n        }         "}, "fullDescription": "In the function `GetFreebie()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions.", "name": "AccessControlVulnerability"}], "40": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "\n}"}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}], "15": [{"level": "error", "tool": ["slither"], "fullDescription": "FreeEth.GetFreebie (/data/demo_analysis/source_code/0xdb1c55f6926e7d847ddf8678905ad871a68199d2.sol#15-25) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/0xdb1c55f6926e7d847ddf8678905ad871a68199d2.sol#21-22)\n", "name": "AccessControlVulnerability"}], "39": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "DenialServiceVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1, "UncheckedLowCallsVulnerability": 2, "FrontRunningVulnerability": 1, "AccessControlVulnerability": 2, "ReentrancyVulnerability": 1, "DenialServiceVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 5, "error": 1, "note": 2, "none": 0}, "false_positives": 1}, "ether_lotto": {"contract": "ether_lotto", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 7, "list_vulnerabilities": ["OtherVulnerability", "ArithmeticVulnerability", "AccessControlVulnerability", "FrontRunningVulnerability", "TimeManipulationVulnerability"], "rules": [{"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `play()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_7", "fullDescription": {"text": "In the function `play()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Dependence on predictable environment variable"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 511\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function play(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "AccessControl_19", "fullDescription": {"text": "EtherLotto.play (/data/demo_analysis/source_code/ether_lotto.sol#33-57) sends eth to arbitrary user\n\tDangerous calls:\n\t- bank.transfer(FEE_AMOUNT) (/data/demo_analysis/source_code/ether_lotto.sol#49)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "Other_11", "fullDescription": {"text": "EtherLotto.play (/data/demo_analysis/source_code/ether_lotto.sol#33-57) uses a dangerous strict equality:\n\t- random == 0\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "incorrect-equality"}}, {"id": "TimeManipulation_4", "fullDescription": {"text": "EtherLotto.play (/data/demo_analysis/source_code/ether_lotto.sol#33-57) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- random == 0 (/data/demo_analysis/source_code/ether_lotto.sol#46-56)\n"}, "name": "TimeManipulationVulnerability", "shortDescription": {"text": "timestamp"}}], "listLine": [36, 39, 49, 52, 33, 46], "analysis": {"36": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "assert(msg.value == TICKET_AMOUNT)"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "39": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "pot += msg.value"}, "fullDescription": "A possible integer overflow exists in the function `play()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "49": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "bank.transfer(FEE_AMOUNT)"}, "fullDescription": "In the function `play()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "error", "tool": ["slither"], "fullDescription": "EtherLotto.play (/data/demo_analysis/source_code/ether_lotto.sol#33-57) sends eth to arbitrary user\n\tDangerous calls:\n\t- bank.transfer(FEE_AMOUNT) (/data/demo_analysis/source_code/ether_lotto.sol#49)\n", "name": "AccessControlVulnerability"}], "52": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.sender.transfer(pot - FEE_AMOUNT)"}, "fullDescription": "A possible transaction order independence vulnerability exists in function play(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "33": [{"level": "error", "tool": ["slither"], "fullDescription": "EtherLotto.play (/data/demo_analysis/source_code/ether_lotto.sol#33-57) sends eth to arbitrary user\n\tDangerous calls:\n\t- bank.transfer(FEE_AMOUNT) (/data/demo_analysis/source_code/ether_lotto.sol#49)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "EtherLotto.play (/data/demo_analysis/source_code/ether_lotto.sol#33-57) uses a dangerous strict equality:\n\t- random == 0\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["slither"], "fullDescription": "EtherLotto.play (/data/demo_analysis/source_code/ether_lotto.sol#33-57) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- random == 0 (/data/demo_analysis/source_code/ether_lotto.sol#46-56)\n", "name": "TimeManipulationVulnerability", "flag": "risk of false positives"}], "46": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "random == 0"}, "fullDescription": "EtherLotto.play (/data/demo_analysis/source_code/ether_lotto.sol#33-57) uses a dangerous strict equality:\n\t- random == 0\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["slither"], "fullDescription": "EtherLotto.play (/data/demo_analysis/source_code/ether_lotto.sol#33-57) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- random == 0 (/data/demo_analysis/source_code/ether_lotto.sol#46-56)\n", "name": "TimeManipulationVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"OtherVulnerability": 4, "ArithmeticVulnerability": 1, "AccessControlVulnerability": 2, "FrontRunningVulnerability": 1, "TimeManipulationVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 7, "error": 2, "note": 1, "none": 0}, "false_positives": 0}, "0x70f9eddb3931491aab1aeafbc1e7f1ca2a012db4": {"contract": "0x70f9eddb3931491aab1aeafbc1e7f1ca2a012db4", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 2, "list_vulnerabilities": ["ArithmeticVulnerability", "UncheckedLowCallsVulnerability", "FrontRunningVulnerability", "ReentrancyVulnerability", "DenialServiceVulnerability", "AccessControlVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `Command(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1191\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "AccessControl_13", "fullDescription": {"text": "In the function `GetHoneyFromJar()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "AccessControl_19", "fullDescription": {"text": "HomeyJar.GetHoneyFromJar (/data/demo_analysis/source_code/0x70f9eddb3931491aab1aeafbc1e7f1ca2a012db4.sol#14-21) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/0x70f9eddb3931491aab1aeafbc1e7f1ca2a012db4.sol#17-18)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in HomeyJar.Command (/data/demo_analysis/source_code/0x70f9eddb3931491aab1aeafbc1e7f1ca2a012db4.sol#26-31):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0x70f9eddb3931491aab1aeafbc1e7f1ca2a012db4.sol#29-31\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}, {"id": "Other_21", "name": "OtherVulnerability", "shortDescription": {"text": "hidden_transfer"}}], "listLine": [26, 23, 29, 16, 17, 14], "analysis": {"26": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "adr,bytes data) payable public {\n        require(msg.sender == Owner);\n         // <yes> <report> UNCHECKED_LL_CALLS\n        adr.call.value(msg.value)(data);\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `Command(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in HomeyJar.Command (/data/demo_analysis/source_code/0x70f9eddb3931491aab1aeafbc1e7f1ca2a012db4.sol#26-31):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0x70f9eddb3931491aab1aeafbc1e7f1ca2a012db4.sol#29-31\n", "name": "UncheckedLowCallsVulnerability"}], "23": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "lance);\n    }\n    \n    funct"}, "fullDescription": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "29": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "ta);\n    }\n}"}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "16": [{"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability"}], "17": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "fer(this.balance);\n        }     "}, "fullDescription": "In the function `GetHoneyFromJar()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions.", "name": "AccessControlVulnerability"}], "14": [{"level": "error", "tool": ["slither"], "fullDescription": "HomeyJar.GetHoneyFromJar (/data/demo_analysis/source_code/0x70f9eddb3931491aab1aeafbc1e7f1ca2a012db4.sol#14-21) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/0x70f9eddb3931491aab1aeafbc1e7f1ca2a012db4.sol#17-18)\n", "name": "AccessControlVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1, "UncheckedLowCallsVulnerability": 2, "FrontRunningVulnerability": 1, "ReentrancyVulnerability": 1, "DenialServiceVulnerability": 1, "AccessControlVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 5, "error": 1, "note": 2, "none": 0}, "false_positives": 1}, "auction": {"contract": "auction", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 1, "list_vulnerabilities": ["AccessControlVulnerability", "FrontRunningVulnerability"], "rules": [{"id": "AccessControl_13", "fullDescription": {"text": "In the function `bid()` a non-zero amount of Ether is sent to an address taken from storage slot 0.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `bid()`.\n\nThere is a check on storage index 1. This storage slot can be written to by calling the function `bid()`.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `bid()`."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function bid(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}], "listLine": [23], "analysis": {"23": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "currentFrontrunner.send(currentBid)"}, "fullDescription": "In the function `bid()` a non-zero amount of Ether is sent to an address taken from storage slot 0.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `bid()`.\n\nThere is a check on storage index 1. This storage slot can be written to by calling the function `bid()`.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `bid()`.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function bid(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 1, "FrontRunningVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 2, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "0x941d225236464a25eb18076df7da6a91d0f95e9e": {"contract": "0x941d225236464a25eb18076df7da6a91d0f95e9e", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 7, "list_vulnerabilities": ["ArithmeticVulnerability", "OtherVulnerability", "ReentrancyVulnerability", "UncheckedLowCallsVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in ETH_FUND.CashOut (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#38-55):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#45-52)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#47)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "Reentrancy_9", "fullDescription": {"text": "Reentrancy in ETH_FUND.Deposit (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#26-37):\n\tExternal calls:\n\t- TransferLog.AddMessage(msg.sender,msg.value,Deposit) (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#32-33)\n\tState variables written after the call(s):\n\t- lastBlock (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#34-37)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-benign"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in ETH_FUND.CashOut (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#38-55):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#45-52\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "Reentrancy_13", "name": "ReentrancyVulnerability", "shortDescription": {"text": "straw_man_contract"}}], "listLine": [73, 2, 71, 61, 38, 45, 26, 32, 34, 44, 67], "analysis": {"73": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "  {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "2": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "n.io \n * @author: "}, "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "71": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "ion AddMessage(address _"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "61": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "dress Sender;\n        string  Data;\n        uint Val;\n        uint  Time;\n    }\n    \n    Message[] public History;\n    \n    Message LastMsg;\n    \n    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "38": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in ETH_FUND.CashOut (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#38-55):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#45-52)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#47)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in ETH_FUND.CashOut (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#38-55):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#45-52\n", "name": "UncheckedLowCallsVulnerability"}], "45": [{"level": "error", "tool": ["slither"], "snippet": {"text": "msg.sender.call.value(_am)()"}, "fullDescription": "Reentrancy in ETH_FUND.CashOut (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#38-55):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#45-52)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#47)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in ETH_FUND.CashOut (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#38-55):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#45-52\n", "name": "UncheckedLowCallsVulnerability"}], "47": [], "26": [{"level": "warning", "tool": ["slither"], "fullDescription": "Reentrancy in ETH_FUND.Deposit (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#26-37):\n\tExternal calls:\n\t- TransferLog.AddMessage(msg.sender,msg.value,Deposit) (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#32-33)\n\tState variables written after the call(s):\n\t- lastBlock (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#34-37)\n", "name": "ReentrancyVulnerability"}], "32": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "TransferLog.AddMessage(msg.sender,msg.value,Deposit)"}, "fullDescription": "Reentrancy in ETH_FUND.Deposit (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#26-37):\n\tExternal calls:\n\t- TransferLog.AddMessage(msg.sender,msg.value,Deposit) (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#32-33)\n\tState variables written after the call(s):\n\t- lastBlock (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#34-37)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "34": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "lastBlock = block.number"}, "fullDescription": "Reentrancy in ETH_FUND.Deposit (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#26-37):\n\tExternal calls:\n\t- TransferLog.AddMessage(msg.sender,msg.value,Deposit) (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#32-33)\n\tState variables written after the call(s):\n\t- lastBlock (/data/demo_analysis/source_code/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#34-37)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}], "44": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ReentrancyVulnerability"}], "67": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 8, "OtherVulnerability": 1, "ReentrancyVulnerability": 5, "UncheckedLowCallsVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 11, "error": 2, "note": 3, "none": 0}, "false_positives": 1}, "integer_overflow_multitx_multifunc_feasible": {"contract": "integer_overflow_multitx_multifunc_feasible", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_5", "fullDescription": {"text": "A possible integer underflow exists in the function `run(uint256)`.\nThe subtraction may result in a value < 0."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}], "listLine": [25], "analysis": {"25": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "count -= input"}, "fullDescription": "A possible integer underflow exists in the function `run(uint256)`.\nThe subtraction may result in a value < 0.", "name": "ArithmeticVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 1, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "lottopollo": {"contract": "lottopollo", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 5, "list_vulnerabilities": ["OtherVulnerability", "UncheckedLowCallsVulnerability", "DenialServiceVulnerability", "AccessControlVulnerability"], "rules": [{"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 417\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "AccessControl_19", "fullDescription": {"text": "lottopollo.payOut (/data/demo_analysis/source_code/lottopollo.sol#11-24) sends eth to arbitrary user\n\tDangerous calls:\n\t- leader.send(this.balance) (/data/demo_analysis/source_code/lottopollo.sol#17)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [14, 17, 11], "analysis": {"14": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.sender.send( msg.value )"}, "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 417\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "17": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "leader.send( this.balance )"}, "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "error", "tool": ["slither"], "fullDescription": "lottopollo.payOut (/data/demo_analysis/source_code/lottopollo.sol#11-24) sends eth to arbitrary user\n\tDangerous calls:\n\t- leader.send(this.balance) (/data/demo_analysis/source_code/lottopollo.sol#17)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "11": [{"level": "error", "tool": ["slither"], "fullDescription": "lottopollo.payOut (/data/demo_analysis/source_code/lottopollo.sol#11-24) sends eth to arbitrary user\n\tDangerous calls:\n\t- leader.send(this.balance) (/data/demo_analysis/source_code/lottopollo.sol#17)\n", "name": "AccessControlVulnerability"}]}, "count_vulnerabilities": {"OtherVulnerability": 1, "UncheckedLowCallsVulnerability": 2, "DenialServiceVulnerability": 2, "AccessControlVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 3, "error": 2, "note": 2, "none": 0}, "false_positives": 0}, "old_blockhash": {"contract": "old_blockhash", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 3, "list_vulnerabilities": ["OtherVulnerability", "ArithmeticVulnerability"], "rules": [{"id": "Other_7", "fullDescription": {"text": "In the function `settle()` the following predictable state variables are used to determine Ether recipient:\n- block.number\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Dependence on predictable environment variable"}}, {"id": "Other_8", "fullDescription": {"text": "In the function `settle()` block.blockhash() is calculated using a value from storage at index 1"}, "name": "OtherVulnerability", "shortDescription": {"text": "Dependence on predictable variable"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `lockInGuess(bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}], "listLine": [39, 29, 38, 28], "analysis": {"39": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.sender.transfer(2 ether)"}, "fullDescription": "In the function `settle()` the following predictable state variables are used to determine Ether recipient:\n- block.number\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "29": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "block.number + 1"}, "fullDescription": "A possible integer overflow exists in the function `lockInGuess(bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "38": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "28": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"OtherVulnerability": 1, "ArithmeticVulnerability": 3}, "count_leve_vulnerabilities": {"warning": 4, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "insecure_transfer": {"contract": "insecure_transfer", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}], "listLine": [18], "analysis": {"18": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "balanceOf[_to] += _value"}, "fullDescription": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 1, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "etherstore": {"contract": "etherstore", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 2, "list_vulnerabilities": ["OtherVulnerability", "ReentrancyVulnerability", "UncheckedLowCallsVulnerability", "ArithmeticVulnerability", "TimeManipulationVulnerability"], "rules": [{"id": "Other_7", "fullDescription": {"text": "In the function `_function_0x155dd5ee` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Dependence on predictable environment variable"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Reentrancy_4", "fullDescription": {"text": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "State change after external call"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `depositFunds()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in EtherStore.withdrawFunds (/data/demo_analysis/source_code/etherstore.sol#20-30):\n\tExternal calls:\n\t- require(bool)(msg.sender.call.value(_weiToWithdraw)()) (/data/demo_analysis/source_code/etherstore.sol#27)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/etherstore.sol#28)\n\t- lastWithdrawTime (/data/demo_analysis/source_code/etherstore.sol#29)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in EtherStore.withdrawFunds (/data/demo_analysis/source_code/etherstore.sol#20-30):\n\t-require(bool)(msg.sender.call.value(_weiToWithdraw)()) /data/demo_analysis/source_code/etherstore.sol#27\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "TimeManipulation_3", "name": "TimeManipulationVulnerability", "shortDescription": {"text": "Timestamp Dependency."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}], "listLine": [27, 28, 29, 17, 20, 25], "analysis": {"27": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.sender.call.value(_weiToWithdraw)()"}, "fullDescription": "In the function `_function_0x155dd5ee` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["mythril", "slither", "oyente"], "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in EtherStore.withdrawFunds (/data/demo_analysis/source_code/etherstore.sol#20-30):\n\t-require(bool)(msg.sender.call.value(_weiToWithdraw)()) /data/demo_analysis/source_code/etherstore.sol#27\n", "name": "UncheckedLowCallsVulnerability"}], "28": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "balances[msg.sender] -= _weiToWithdraw"}, "fullDescription": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "name": "ReentrancyVulnerability"}], "29": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "lastWithdrawTime[msg.sender] = now"}, "fullDescription": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "name": "ReentrancyVulnerability"}], "17": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "balances[msg.sender] += msg.value"}, "fullDescription": "A possible integer overflow exists in the function `depositFunds()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "20": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in EtherStore.withdrawFunds (/data/demo_analysis/source_code/etherstore.sol#20-30):\n\tExternal calls:\n\t- require(bool)(msg.sender.call.value(_weiToWithdraw)()) (/data/demo_analysis/source_code/etherstore.sol#27)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/etherstore.sol#28)\n\t- lastWithdrawTime (/data/demo_analysis/source_code/etherstore.sol#29)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in EtherStore.withdrawFunds (/data/demo_analysis/source_code/etherstore.sol#20-30):\n\t-require(bool)(msg.sender.call.value(_weiToWithdraw)()) /data/demo_analysis/source_code/etherstore.sol#27\n", "name": "UncheckedLowCallsVulnerability"}], "25": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "TimeManipulationVulnerability"}]}, "count_vulnerabilities": {"OtherVulnerability": 1, "ReentrancyVulnerability": 4, "UncheckedLowCallsVulnerability": 2, "ArithmeticVulnerability": 1, "TimeManipulationVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 6, "error": 1, "note": 2, "none": 0}, "false_positives": 0}, "wallet_03_wrong_constructor": {"contract": "wallet_03_wrong_constructor", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 2, "list_vulnerabilities": ["AccessControlVulnerability", "OtherVulnerability", "ArithmeticVulnerability"], "rules": [{"id": "AccessControl_13", "fullDescription": {"text": "In the function `migrateTo(address)` a non-zero amount of Ether is sent to an address taken from function arguments.\n\nThere is a check on storage index 0. This storage slot can be written to by calling the function `initWallet()`."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}], "listLine": [38, 24], "analysis": {"38": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "to.transfer(this.balance)"}, "fullDescription": "In the function `migrateTo(address)` a non-zero amount of Ether is sent to an address taken from function arguments.\n\nThere is a check on storage index 0. This storage slot can be written to by calling the function `initWallet()`.", "name": "AccessControlVulnerability"}], "24": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "assert(balances[msg.sender] + msg.value > balances[msg.sender])"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 1, "OtherVulnerability": 1, "ArithmeticVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 2, "error": 0, "note": 1, "none": 0}, "false_positives": 0}, "random_number_generator": {"contract": "random_number_generator", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": [], "rules": [], "listLine": [], "analysis": {}, "count_vulnerabilities": {}, "count_leve_vulnerabilities": {"warning": 0, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "0x806a6bd219f162442d992bdc4ee6eba1f2c5a707": {"contract": "0x806a6bd219f162442d992bdc4ee6eba1f2c5a707", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 3, "list_vulnerabilities": ["ArithmeticVulnerability", "UncheckedLowCallsVulnerability", "FrontRunningVulnerability", "ReentrancyVulnerability", "AccessControlVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `Command(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1191\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "AccessControl_13", "fullDescription": {"text": "In the function `GetPie()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "AccessControl_19", "fullDescription": {"text": "Pie.GetPie (/data/demo_analysis/source_code/0x806a6bd219f162442d992bdc4ee6eba1f2c5a707.sol#21-30) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/0x806a6bd219f162442d992bdc4ee6eba1f2c5a707.sol#26-27)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in Pie.Command (/data/demo_analysis/source_code/0x806a6bd219f162442d992bdc4ee6eba1f2c5a707.sol#38-46):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0x806a6bd219f162442d992bdc4ee6eba1f2c5a707.sol\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}, {"id": "Other_21", "name": "OtherVulnerability", "shortDescription": {"text": "hidden_transfer"}}], "listLine": [38, 36, 46, 25, 26, 21, 44], "analysis": {"38": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "ta)\n    payable\n    public\n    {\n        require(msg.sender == Owner);\n        // <yes> <report> UNCHECKED_LL_CALLS\n        adr.call.value(msg.value)(data);\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `Command(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Pie.Command (/data/demo_analysis/source_code/0x806a6bd219f162442d992bdc4ee6eba1f2c5a707.sol#38-46):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0x806a6bd219f162442d992bdc4ee6eba1f2c5a707.sol\n", "name": "UncheckedLowCallsVulnerability"}], "36": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "}\n    \n    function Command("}, "fullDescription": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "46": [{"level": "warning", "tool": ["mythril"], "snippet": {}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}], "25": [{"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability"}], "26": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "balance);\n        }              "}, "fullDescription": "In the function `GetPie()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions.", "name": "AccessControlVulnerability"}], "21": [{"level": "error", "tool": ["slither"], "fullDescription": "Pie.GetPie (/data/demo_analysis/source_code/0x806a6bd219f162442d992bdc4ee6eba1f2c5a707.sol#21-30) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis/source_code/0x806a6bd219f162442d992bdc4ee6eba1f2c5a707.sol#26-27)\n", "name": "AccessControlVulnerability"}], "44": [{"level": "note", "tool": ["slither"], "snippet": {"text": "adr.call.value(msg.value)(data)"}, "fullDescription": "Low level call in Pie.Command (/data/demo_analysis/source_code/0x806a6bd219f162442d992bdc4ee6eba1f2c5a707.sol#38-46):\n\t-adr.call.value(msg.value)(data) /data/demo_analysis/source_code/0x806a6bd219f162442d992bdc4ee6eba1f2c5a707.sol\n", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1, "UncheckedLowCallsVulnerability": 3, "FrontRunningVulnerability": 1, "ReentrancyVulnerability": 1, "AccessControlVulnerability": 2, "DenialServiceVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 5, "error": 1, "note": 3, "none": 0}, "false_positives": 1}, "integer_overflow_add": {"contract": "integer_overflow_add", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `run(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}], "listLine": [17], "analysis": {"17": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "count += input"}, "fullDescription": "A possible integer overflow exists in the function `run(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 1, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "incorrect_constructor_name1": {"contract": "incorrect_constructor_name1", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 1, "list_vulnerabilities": ["AccessControlVulnerability", "FrontRunningVulnerability"], "rules": [{"id": "AccessControl_13", "fullDescription": {"text": "In the function `withdraw()` a non-zero amount of Ether is sent to an address taken from storage slot 0.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `IamMissing()`.\n\nThere is a check on storage index 0. This storage slot can be written to by calling the function `IamMissing()`."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}], "listLine": [32], "analysis": {"32": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "owner.transfer(this.balance)"}, "fullDescription": "In the function `withdraw()` a non-zero amount of Ether is sent to an address taken from storage slot 0.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `IamMissing()`.\n\nThere is a check on storage index 0. This storage slot can be written to by calling the function `IamMissing()`.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 1, "FrontRunningVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 2, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e": {"contract": "0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 4, "list_vulnerabilities": ["ReentrancyVulnerability", "OtherVulnerability", "UncheckedLowCallsVulnerability", "ArithmeticVulnerability"], "rules": [{"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 768\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `Deposit()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in PrivateBank.CashOut (/data/demo_analysis/source_code/0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol#34-47):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol#39-46)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol#41)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in PrivateBank.CashOut (/data/demo_analysis/source_code/0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol#34-47):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol#39-46\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Reentrancy_13", "name": "ReentrancyVulnerability", "shortDescription": {"text": "straw_man_contract"}}], "listLine": [39, 28, 29, 34, 61, 65, 38], "analysis": {"39": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "     {\n                balan"}, "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 768\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in PrivateBank.CashOut (/data/demo_analysis/source_code/0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol#34-47):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol#39-46\n", "name": "UncheckedLowCallsVulnerability"}], "41": [], "28": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "alue;\n            TransferLog.A"}, "fullDescription": "A possible integer overflow exists in the function `Deposit()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "29": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "ender,msg.value,\"Deposit\");\n        }\n    }\n    \n    f"}, "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}], "34": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in PrivateBank.CashOut (/data/demo_analysis/source_code/0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol#34-47):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol#39-46)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol#41)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in PrivateBank.CashOut (/data/demo_analysis/source_code/0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol#34-47):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol#39-46\n", "name": "UncheckedLowCallsVulnerability"}], "61": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "65": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "38": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ReentrancyVulnerability"}]}, "count_vulnerabilities": {"ReentrancyVulnerability": 4, "OtherVulnerability": 1, "UncheckedLowCallsVulnerability": 2, "ArithmeticVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 5, "error": 1, "note": 3, "none": 0}, "false_positives": 1}, "modifier_reentrancy": {"contract": "modifier_reentrancy", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 4, "list_vulnerabilities": ["ReentrancyVulnerability", "ArithmeticVulnerability"], "rules": [{"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}], "listLine": [42, 47, 33, 32, 44, 39], "analysis": {"42": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "ModifierEntrancy(msg.sender).airDrop()"}, "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}], "47": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "ModifierEntrancy(token).airDrop()"}, "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}], "33": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "32": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "44": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "39": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ReentrancyVulnerability": 2, "ArithmeticVulnerability": 4}, "count_leve_vulnerabilities": {"warning": 6, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f": {"contract": "0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 5, "list_vulnerabilities": ["ArithmeticVulnerability", "ReentrancyVulnerability", "FrontRunningVulnerability", "OtherVulnerability", "UncheckedLowCallsVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1451\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in PERSONAL_BANK.Collect (/data/demo_analysis/source_code/0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol#49-66):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol#56-64)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol#57)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in PERSONAL_BANK.Collect (/data/demo_analysis/source_code/0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol#49-66):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol#56-64\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Reentrancy_13", "name": "ReentrancyVulnerability", "shortDescription": {"text": "straw_man_contract"}}], "listLine": [44, 56, 59, 49, 83, 87, 54], "analysis": {"44": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "Log.AddMessage(msg.sender,msg.va"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "56": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "       balances[msg.sender]-"}, "fullDescription": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1451\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in PERSONAL_BANK.Collect (/data/demo_analysis/source_code/0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol#49-66):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol#56-64\n", "name": "UncheckedLowCallsVulnerability"}], "59": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "        }\n    }\n    \n    function() \n   "}, "fullDescription": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "49": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in PERSONAL_BANK.Collect (/data/demo_analysis/source_code/0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol#49-66):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol#56-64)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol#57)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in PERSONAL_BANK.Collect (/data/demo_analysis/source_code/0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol#49-66):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol#56-64\n", "name": "UncheckedLowCallsVulnerability"}], "57": [], "83": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "87": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "54": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ReentrancyVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 2, "ReentrancyVulnerability": 5, "FrontRunningVulnerability": 2, "OtherVulnerability": 1, "UncheckedLowCallsVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 9, "error": 1, "note": 2, "none": 0}, "false_positives": 1}, "0xb11b2fed6c9354f7aa2f658d3b4d7b31d8a13b77": {"contract": "0xb11b2fed6c9354f7aa2f658d3b4d7b31d8a13b77", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 1, "list_vulnerabilities": ["ArithmeticVulnerability", "UncheckedLowCallsVulnerability", "ReentrancyVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `proxy(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in Proxy.proxy (/data/demo_analysis/source_code/0xb11b2fed6c9354f7aa2f658d3b4d7b31d8a13b77.sol#12-18):\n\t-target.call.value(msg.value)(data) /data/demo_analysis/source_code/0xb11b2fed6c9354f7aa2f658d3b4d7b31d8a13b77.sol#14-18\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [12, 14], "analysis": {"12": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "oxy(address target, bytes data) public payable {\n        // <yes> <report> UNCHECKED_LL_CALLS\n        target.call.value(msg.value)(data);\n    }\n}\n\ncontract D"}, "fullDescription": "A possible integer overflow exists in the function `proxy(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Proxy.proxy (/data/demo_analysis/source_code/0xb11b2fed6c9354f7aa2f658d3b4d7b31d8a13b77.sol#12-18):\n\t-target.call.value(msg.value)(data) /data/demo_analysis/source_code/0xb11b2fed6c9354f7aa2f658d3b4d7b31d8a13b77.sol#14-18\n", "name": "UncheckedLowCallsVulnerability"}], "14": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "alue(msg.value)(data);\n    }\n}\n\nco"}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1, "UncheckedLowCallsVulnerability": 2, "ReentrancyVulnerability": 1, "DenialServiceVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 3, "error": 0, "note": 2, "none": 0}, "false_positives": 0}, "0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888": {"contract": "0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 6, "list_vulnerabilities": ["ArithmeticVulnerability", "ReentrancyVulnerability", "FrontRunningVulnerability", "OtherVulnerability", "UncheckedLowCallsVulnerability", "TimeManipulationVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "Other_7", "fullDescription": {"text": "In the function `Collect(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Dependence on predictable environment variable"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1401\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in MONEY_BOX.Collect (/data/demo_analysis/source_code/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol#58-76):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol#65-74)\n\tState variables written after the call(s):\n\t- Acc (/data/demo_analysis/source_code/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol#66-67)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in MONEY_BOX.Collect (/data/demo_analysis/source_code/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol#58-76):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol#65-74\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "TimeManipulation_3", "name": "TimeManipulationVulnerability", "shortDescription": {"text": "Timestamp Dependency."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Reentrancy_13", "name": "ReentrancyVulnerability", "shortDescription": {"text": "straw_man_contract"}}], "listLine": [51, 52, 53, 65, 68, 58, 91, 95, 17, 60, 63], "analysis": {"51": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "e>acc.unlockTime)acc.unl"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "52": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "er,msg.value,"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "53": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": " }\n    \n    function Collect(uint _am)\n    pub"}, "fullDescription": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "65": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "c.balance-=_am;\n            "}, "fullDescription": "In the function `Collect(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["mythril", "slither"], "fullDescription": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in MONEY_BOX.Collect (/data/demo_analysis/source_code/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol#58-76):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol#65-74\n", "name": "UncheckedLowCallsVulnerability"}], "68": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "   }\n    }\n    \n    function() \n    public \n"}, "fullDescription": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "58": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in MONEY_BOX.Collect (/data/demo_analysis/source_code/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol#58-76):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol#65-74)\n\tState variables written after the call(s):\n\t- Acc (/data/demo_analysis/source_code/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol#66-67)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in MONEY_BOX.Collect (/data/demo_analysis/source_code/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol#58-76):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol#65-74\n", "name": "UncheckedLowCallsVulnerability"}], "66": [], "91": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "95": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "17": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "60": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "TimeManipulationVulnerability"}], "63": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ReentrancyVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 5, "ReentrancyVulnerability": 5, "FrontRunningVulnerability": 2, "OtherVulnerability": 1, "UncheckedLowCallsVulnerability": 2, "TimeManipulationVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 13, "error": 1, "note": 2, "none": 0}, "false_positives": 1}, "wallet_04_confused_sign": {"contract": "wallet_04_confused_sign", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 2, "list_vulnerabilities": ["ArithmeticVulnerability", "OtherVulnerability"], "rules": [{"id": "Arithmetic_5", "fullDescription": {"text": "A possible integer underflow exists in the function `withdraw(uint256)`.\nThe subtraction may result in a value < 0."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}], "listLine": [32, 24], "analysis": {"32": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "balances[msg.sender] -= amount"}, "fullDescription": "A possible integer underflow exists in the function `withdraw(uint256)`.\nThe subtraction may result in a value < 0.", "name": "ArithmeticVulnerability"}], "24": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "assert(balances[msg.sender] + msg.value > balances[msg.sender])"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 2, "OtherVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 2, "error": 0, "note": 1, "none": 0}, "false_positives": 0}, "0xd5967fed03e85d1cce44cab284695b41bc675b5c": {"contract": "0xd5967fed03e85d1cce44cab284695b41bc675b5c", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 1, "list_vulnerabilities": ["ArithmeticVulnerability", "DenialServiceVulnerability", "UncheckedLowCallsVulnerability", "ReentrancyVulnerability", "OtherVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `transfer(address,address,address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 652\nCall at address: 652\nCall at address: 652\nCall at address: 652\nCall at address: 652\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "DenialService_3", "fullDescription": {"text": "demo.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v) (/data/demo_analysis/source_code/0xd5967fed03e85d1cce44cab284695b41bc675b5c.sol#16-18)\n"}, "name": "DenialServiceVulnerability", "shortDescription": {"text": "calls-loop"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in demo.transfer (/data/demo_analysis/source_code/0xd5967fed03e85d1cce44cab284695b41bc675b5c.sol#11-20):\n\t-caddress.call(id,from,_tos[i],v) /data/demo_analysis/source_code/0xd5967fed03e85d1cce44cab284695b41bc675b5c.sol#16-18\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [11, 16], "analysis": {"11": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "ransfer(address from,address caddress,address[] _tos,uint v)public returns (bool){\n        require(_tos.length > 0);\n        bytes4 id=bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for(uint i=0;i<_tos.length;i++){\n            // <yes> <report> UNCHECKED_LL_CALLS\n            caddress.call(id,from,_tos[i],v);\n        }\n        return true;\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `transfer(address,address,address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "demo.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v) (/data/demo_analysis/source_code/0xd5967fed03e85d1cce44cab284695b41bc675b5c.sol#16-18)\n", "name": "DenialServiceVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in demo.transfer (/data/demo_analysis/source_code/0xd5967fed03e85d1cce44cab284695b41bc675b5c.sol#11-20):\n\t-caddress.call(id,from,_tos[i],v) /data/demo_analysis/source_code/0xd5967fed03e85d1cce44cab284695b41bc675b5c.sol#16-18\n", "name": "UncheckedLowCallsVulnerability"}], "16": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "d,from,_tos[i],v);\n        }\n   "}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 652\nCall at address: 652\nCall at address: 652\nCall at address: 652\nCall at address: 652\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["slither", "oyente"], "fullDescription": "demo.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v) (/data/demo_analysis/source_code/0xd5967fed03e85d1cce44cab284695b41bc675b5c.sol#16-18)\n", "name": "DenialServiceVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1, "DenialServiceVulnerability": 2, "UncheckedLowCallsVulnerability": 2, "ReentrancyVulnerability": 1, "OtherVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 5, "error": 0, "note": 2, "none": 0}, "false_positives": 0}, "0xb620cee6b52f96f3c6b253e6eea556aa2d214a99": {"contract": "0xb620cee6b52f96f3c6b253e6eea556aa2d214a99", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 10, "list_vulnerabilities": ["ReentrancyVulnerability", "UncheckedLowCallsVulnerability", "OtherVulnerability", "ArithmeticVulnerability", "FrontRunningVulnerability", "AccessControlVulnerability"], "rules": [{"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `becomePlayer()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function claimPrize(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "AccessControl_13", "fullDescription": {"text": "In the function `winPrize()` a non-zero amount of Ether is sent to an address taken from storage slot 1.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `DranMe()`.\n\nThere is a check on storage index 1. This storage slot can be written to by calling the function `DranMe()`."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "Other_11", "fullDescription": {"text": "DrainMe.unlockSecret (/data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#86-98) uses a dangerous strict equality:\n\t- secret % 5 == 0\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "incorrect-equality"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in DrainMe.callFirstTarget (/data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#99-105):\n\t-firstTarget.call.value(msg.value)() /data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#104\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Other_16", "name": "OtherVulnerability", "shortDescription": {"text": "hidden_state_update"}}], "listLine": [104, 109, 115, 30, 2, 144, 27, 140, 124, 86, 92, 99, 105, 136, 14, 133], "analysis": {"104": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "require (msg.value >= 0.005 ether);"}, "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}], "109": [{"level": "note", "tool": ["mythril"], "snippet": {"text": " onlyPlayers {\n\tseed[_index] = _valu"}, "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}], "115": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "}\n\nfunction "}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "30": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "//constructor\n\nfunction "}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "2": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "n.io \n * @author: "}, "fullDescription": "A possible integer overflow exists in the function `becomePlayer()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "144": [{"level": "warning", "tool": ["mythril"], "snippet": {}, "fullDescription": "A possible transaction order independence vulnerability exists in function claimPrize(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "27": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "51828771,158769871220];\nuint256[] public balance"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "140": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "ck function\n\nfunction() p"}, "fullDescription": "In the function `winPrize()` a non-zero amount of Ether is sent to an address taken from storage slot 1.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `DranMe()`.\n\nThere is a check on storage index 1. This storage slot can be written to by calling the function `DranMe()`.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function claimPrize(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}], "124": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "e onlyP"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "86": [{"level": "warning", "tool": ["slither"], "fullDescription": "DrainMe.unlockSecret (/data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#86-98) uses a dangerous strict equality:\n\t- secret % 5 == 0\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "92": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "secret % 5 == 0"}, "fullDescription": "DrainMe.unlockSecret (/data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#86-98) uses a dangerous strict equality:\n\t- secret % 5 == 0\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "99": [{"level": "note", "tool": ["slither"], "fullDescription": "Low level call in DrainMe.callFirstTarget (/data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#99-105):\n\t-firstTarget.call.value(msg.value)() /data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#104\n", "name": "UncheckedLowCallsVulnerability"}], "105": [{"level": "note", "tool": ["slither"], "fullDescription": "Low level call in DrainMe.callFirstTarget (/data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#99-105):\n\t-firstTarget.call.value(msg.value)() /data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#104\n", "name": "UncheckedLowCallsVulnerability"}], "136": [{"level": "note", "tool": ["slither"], "fullDescription": "Low level call in DrainMe.callFirstTarget (/data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#99-105):\n\t-firstTarget.call.value(msg.value)() /data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#104\n", "name": "UncheckedLowCallsVulnerability"}], "14": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "133": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ReentrancyVulnerability"}], "33": []}, "count_vulnerabilities": {"ReentrancyVulnerability": 4, "UncheckedLowCallsVulnerability": 6, "OtherVulnerability": 6, "ArithmeticVulnerability": 3, "FrontRunningVulnerability": 2, "AccessControlVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 10, "error": 0, "note": 12, "none": 0}, "false_positives": 1}, "open_address_lottery": {"contract": "open_address_lottery", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 2, "list_vulnerabilities": ["ArithmeticVulnerability", "OtherVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Arithmetic_5", "fullDescription": {"text": "A possible integer underflow exists in the function `fallback`.\nThe subtraction may result in a value < 0."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow"}}, {"id": "Other_15", "fullDescription": {"text": "s in OpenAddressLottery.forceReseed (/data/demo_analysis/source_code/open_address_lottery.sol#91) is a storage variable never initialiazed\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "uninitialized-storage"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Other_20", "name": "OtherVulnerability", "shortDescription": {"text": "uninitialised_struct"}}], "listLine": [56, 63, 93, 95, 91, 88], "analysis": {"56": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.value*7"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "63": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "block.number-lastReseed"}, "fullDescription": "A possible integer underflow exists in the function `fallback`.\nThe subtraction may result in a value < 0.", "name": "ArithmeticVulnerability"}], "93": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "block.number - 1"}, "fullDescription": "A possible integer underflow exists in the function `fallback`.\nThe subtraction may result in a value < 0.", "name": "ArithmeticVulnerability"}], "95": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "tx.gasprice * 7"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "91": [{"level": "error", "tool": ["slither"], "fullDescription": "s in OpenAddressLottery.forceReseed (/data/demo_analysis/source_code/open_address_lottery.sol#91) is a storage variable never initialiazed\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "88": [{"level": "error", "tool": ["slither"], "fullDescription": "s in OpenAddressLottery.forceReseed (/data/demo_analysis/source_code/open_address_lottery.sol#91) is a storage variable never initialiazed\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "92": []}, "count_vulnerabilities": {"ArithmeticVulnerability": 4, "OtherVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 4, "error": 2, "note": 0, "none": 0}, "false_positives": 2}, "smart_billions": {"contract": "smart_billions", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 17, "list_vulnerabilities": ["OtherVulnerability", "ArithmeticVulnerability"], "rules": [{"id": "Other_11", "fullDescription": {"text": "SmartBillions.addHashes (/data/demo_analysis/source_code/smart_billions.sol#672-689) uses a dangerous strict equality:\n\t- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "incorrect-equality"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}], "listLine": [672, 673, 513, 515, 527, 482, 485, 735, 737, 540, 542, 546, 566, 344, 345, 364, 723], "analysis": {"672": [{"level": "warning", "tool": ["slither"], "fullDescription": "SmartBillions.addHashes (/data/demo_analysis/source_code/smart_billions.sol#672-689) uses a dangerous strict equality:\n\t- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "673": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)"}, "fullDescription": "SmartBillions.addHashes (/data/demo_analysis/source_code/smart_billions.sol#672-689) uses a dangerous strict equality:\n\t- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "513": [{"level": "warning", "tool": ["slither"], "fullDescription": "SmartBillions.addHashes (/data/demo_analysis/source_code/smart_billions.sol#672-689) uses a dangerous strict equality:\n\t- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "515": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "(player.value == 0) || (player.blockNum <= 1) || (block.number < player.blockNum) || (block.number >= player.blockNum + (10 * hashesSize))"}, "fullDescription": "SmartBillions.addHashes (/data/demo_analysis/source_code/smart_billions.sol#672-689) uses a dangerous strict equality:\n\t- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "527": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "hash == 0x1000000"}, "fullDescription": "SmartBillions.addHashes (/data/demo_analysis/source_code/smart_billions.sol#672-689) uses a dangerous strict equality:\n\t- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "482": [{"level": "warning", "tool": ["slither"], "fullDescription": "SmartBillions.addHashes (/data/demo_analysis/source_code/smart_billions.sol#672-689) uses a dangerous strict equality:\n\t- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "485": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "(hit & 0xF) == 0"}, "fullDescription": "SmartBillions.addHashes (/data/demo_analysis/source_code/smart_billions.sol#672-689) uses a dangerous strict equality:\n\t- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "735": [{"level": "warning", "tool": ["slither"], "fullDescription": "SmartBillions.addHashes (/data/demo_analysis/source_code/smart_billions.sol#672-689) uses a dangerous strict equality:\n\t- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "737": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "lastb == 0 || block.number <= lastb + 10"}, "fullDescription": "SmartBillions.addHashes (/data/demo_analysis/source_code/smart_billions.sol#672-689) uses a dangerous strict equality:\n\t- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "540": [{"level": "warning", "tool": ["slither"], "fullDescription": "SmartBillions.addHashes (/data/demo_analysis/source_code/smart_billions.sol#672-689) uses a dangerous strict equality:\n\t- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "542": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "player.blockNum == 0"}, "fullDescription": "SmartBillions.addHashes (/data/demo_analysis/source_code/smart_billions.sol#672-689) uses a dangerous strict equality:\n\t- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "546": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "(player.value == 0) || (player.blockNum == 1)"}, "fullDescription": "SmartBillions.addHashes (/data/demo_analysis/source_code/smart_billions.sol#672-689) uses a dangerous strict equality:\n\t- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "566": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "hash == 0x1000000"}, "fullDescription": "SmartBillions.addHashes (/data/demo_analysis/source_code/smart_billions.sol#672-689) uses a dangerous strict equality:\n\t- require(bool)(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "344": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "345": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "364": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "723": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"OtherVulnerability": 13, "ArithmeticVulnerability": 4}, "count_leve_vulnerabilities": {"warning": 17, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "overflow_simple_add": {"contract": "overflow_simple_add", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `add(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}], "listLine": [14], "analysis": {"14": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "balance += deposit"}, "fullDescription": "A possible integer overflow exists in the function `add(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 1, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "0x9d06cbafa865037a01d322d3f4222fa3e04e5488": {"contract": "0x9d06cbafa865037a01d322d3f4222fa3e04e5488", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 5, "list_vulnerabilities": ["OtherVulnerability", "ReentrancyVulnerability", "UncheckedLowCallsVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1339\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in Delta.tokens_buy (/data/demo_analysis/source_code/0x9d06cbafa865037a01d322d3f4222fa3e04e5488.sol#39-59):\n\t-! c.call(bytes4(sha3()(transferFrom(address,address,uint256))),owner,msg.sender,tokens_buy) /data/demo_analysis/source_code/0x9d06cbafa865037a01d322d3f4222fa3e04e5488.sol#48-52\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [46, 48, 57, 69, 39, 54], "analysis": {"46": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "ire(tokens_buy > 0);\n\n      "}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "48": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "s,uint256)\")),owner, msg.sender,tokens_buy)){\n        \treturn false;\n        }\n\n        ui"}, "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1339\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Delta.tokens_buy (/data/demo_analysis/source_code/0x9d06cbafa865037a01d322d3f4222fa3e04e5488.sol#39-59):\n\t-! c.call(bytes4(sha3()(transferFrom(address,address,uint256))),owner,msg.sender,tokens_buy) /data/demo_analysis/source_code/0x9d06cbafa865037a01d322d3f4222fa3e04e5488.sol#48-52\n", "name": "UncheckedLowCallsVulnerability"}], "57": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "\n\n      //Withdra"}, "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}], "69": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "nge token\n      fun"}, "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}], "39": [{"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Delta.tokens_buy (/data/demo_analysis/source_code/0x9d06cbafa865037a01d322d3f4222fa3e04e5488.sol#39-59):\n\t-! c.call(bytes4(sha3()(transferFrom(address,address,uint256))),owner,msg.sender,tokens_buy) /data/demo_analysis/source_code/0x9d06cbafa865037a01d322d3f4222fa3e04e5488.sol#48-52\n", "name": "UncheckedLowCallsVulnerability"}], "54": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "DenialServiceVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"OtherVulnerability": 2, "ReentrancyVulnerability": 1, "UncheckedLowCallsVulnerability": 4, "DenialServiceVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 2, "error": 0, "note": 6, "none": 0}, "false_positives": 0}, "integer_overflow_minimal": {"contract": "integer_overflow_minimal", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_5", "fullDescription": {"text": "A possible integer underflow exists in the function `run(uint256)`.\nThe subtraction may result in a value < 0."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}], "listLine": [17], "analysis": {"17": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "count -= input"}, "fullDescription": "A possible integer underflow exists in the function `run(uint256)`.\nThe subtraction may result in a value < 0.", "name": "ArithmeticVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 1, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "integer_overflow_mul": {"contract": "integer_overflow_mul", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `run(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}], "listLine": [17], "analysis": {"17": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "count *= input"}, "fullDescription": "A possible integer overflow exists in the function `run(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 1, "error": 0, "note": 0, "none": 0}, "false_positives": 0}}