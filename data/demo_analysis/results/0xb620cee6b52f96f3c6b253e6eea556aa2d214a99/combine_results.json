{"contract": "0xb620cee6b52f96f3c6b253e6eea556aa2d214a99", "sourceLanguage": "Solidity", "analysis": {"104": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "require (msg.value >= 0.005 ether);"}, "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}], "109": [{"level": "note", "tool": ["mythril"], "snippet": {"text": " onlyPlayers {\n\tseed[_index] = _valu"}, "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}], "115": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "}\n\nfunction "}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability"}], "30": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "//constructor\n\nfunction "}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability"}], "2": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "n.io \n * @author: "}, "fullDescription": "A possible integer overflow exists in the function `becomePlayer()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "144": [{"level": "warning", "tool": ["mythril"], "snippet": {}, "fullDescription": "A possible transaction order independence vulnerability exists in function claimPrize(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability"}], "27": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "51828771,158769871220];\nuint256[] public balance"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability"}], "140": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "ck function\n\nfunction() p"}, "fullDescription": "In the function `winPrize()` a non-zero amount of Ether is sent to an address taken from storage slot 1.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `DranMe()`.\n\nThere is a check on storage index 1. This storage slot can be written to by calling the function `DranMe()`.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function claimPrize(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}], "124": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "e onlyP"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability"}], "86": [{"level": "warning", "tool": ["slither"], "fullDescription": "DrainMe.unlockSecret (/data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#86-98) uses a dangerous strict equality:\n\t- secret % 5 == 0\n", "name": "OtherVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability"}], "92": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "secret % 5 == 0"}, "fullDescription": "DrainMe.unlockSecret (/data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#86-98) uses a dangerous strict equality:\n\t- secret % 5 == 0\n", "name": "OtherVulnerability"}], "99": [{"level": "note", "tool": ["slither"], "fullDescription": "Low level call in DrainMe.callFirstTarget (/data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#99-105):\n\t-firstTarget.call.value(msg.value)() /data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#104\n", "name": "UncheckedLowCallsVulnerability"}], "105": [{"level": "note", "tool": ["slither"], "fullDescription": "Low level call in DrainMe.callFirstTarget (/data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#99-105):\n\t-firstTarget.call.value(msg.value)() /data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#104\n", "name": "UncheckedLowCallsVulnerability"}], "136": [{"level": "note", "tool": ["slither"], "fullDescription": "Low level call in DrainMe.callFirstTarget (/data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#99-105):\n\t-firstTarget.call.value(msg.value)() /data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#104\n", "name": "UncheckedLowCallsVulnerability"}], "14": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "133": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ReentrancyVulnerability"}], "33": [{"level": "warning", "tool": ["honeybadger"], "snippet": {}, "name": "OtherVulnerability"}]}, "listLine": [104, 109, 115, 30, 2, 144, 27, 140, 124, 86, 92, 99, 105, 136, 14, 133, 33], "rules": [{"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `becomePlayer()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function claimPrize(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "AccessControl_13", "fullDescription": {"text": "In the function `winPrize()` a non-zero amount of Ether is sent to an address taken from storage slot 1.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `DranMe()`.\n\nThere is a check on storage index 1. This storage slot can be written to by calling the function `DranMe()`."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "Other_11", "fullDescription": {"text": "DrainMe.unlockSecret (/data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#86-98) uses a dangerous strict equality:\n\t- secret % 5 == 0\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "incorrect-equality"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in DrainMe.callFirstTarget (/data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#99-105):\n\t-firstTarget.call.value(msg.value)() /data/demo_analysis/source_code/0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#104\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Other_16", "name": "OtherVulnerability", "shortDescription": {"text": "hidden_state_update"}}]}