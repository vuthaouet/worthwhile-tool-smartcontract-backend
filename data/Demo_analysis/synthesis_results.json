{"integer_overflow_1": {"contract": "integer_overflow_1", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `add(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}], "listLine": [14], "analysis": {"14": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "sellerBalance += value"}, "fullDescription": "A possible integer overflow exists in the function `add(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 1, "error": 0, "note": 0, "none": 0}, "false_positives": 0}, "auction": {"contract": "auction", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 1, "list_vulnerabilities": ["AccessControlVulnerability", "FrontRunningVulnerability"], "rules": [{"id": "AccessControl_13", "fullDescription": {"text": "In the function `bid()` a non-zero amount of Ether is sent to an address taken from storage slot 0.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `bid()`.\n\nThere is a check on storage index 1. This storage slot can be written to by calling the function `bid()`.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `bid()`."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function bid(). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}], "listLine": [23], "analysis": {"23": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "currentFrontrunner.send(currentBid)"}, "fullDescription": "In the function `bid()` a non-zero amount of Ether is sent to an address taken from storage slot 0.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `bid()`.\n\nThere is a check on storage index 1. This storage slot can be written to by calling the function `bid()`.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `bid()`.", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function bid(). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 1, "FrontRunningVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 2, "error": 0, "note": 0, "none": 0}, "false_positives": 0}}