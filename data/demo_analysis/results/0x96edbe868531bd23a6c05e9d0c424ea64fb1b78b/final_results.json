{"contract": "0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 6, "list_vulnerabilities": ["ArithmeticVulnerability", "ReentrancyVulnerability", "FrontRunningVulnerability", "OtherVulnerability", "UncheckedLowCallsVulnerability", "TimeManipulationVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "Other_7", "fullDescription": {"text": "In the function `Collect(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Dependence on predictable environment variable"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1401\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in PENNY_BY_PENNY.Collect (/data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#58-76):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#65-74)\n\tState variables written after the call(s):\n\t- Acc (/data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#66-67)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in PENNY_BY_PENNY.Collect (/data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#58-76):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#65-74\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "TimeManipulation_3", "name": "TimeManipulationVulnerability", "shortDescription": {"text": "Timestamp Dependency."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Reentrancy_13", "name": "ReentrancyVulnerability", "shortDescription": {"text": "straw_man_contract"}}], "listLine": [51, 52, 54, 65, 68, 58, 91, 95, 17, 60, 63], "analysis": {"51": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "e>acc.unlockTime)acc.unl"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "52": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "sg.value,\"Put"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "54": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "   \n    function Collect(uint _am)\n    pub"}, "fullDescription": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "65": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "c.balance-=_am;\n            "}, "fullDescription": "In the function `Collect(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["mythril", "slither"], "fullDescription": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in PENNY_BY_PENNY.Collect (/data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#58-76):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#65-74\n", "name": "UncheckedLowCallsVulnerability"}], "68": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "\n    }\n    \n    function() \n    public \n"}, "fullDescription": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}], "58": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in PENNY_BY_PENNY.Collect (/data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#58-76):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#65-74)\n\tState variables written after the call(s):\n\t- Acc (/data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#66-67)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in PENNY_BY_PENNY.Collect (/data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#58-76):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#65-74\n", "name": "UncheckedLowCallsVulnerability"}], "66": [], "91": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}], "95": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "17": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "60": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "TimeManipulationVulnerability"}], "63": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ReentrancyVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 5, "ReentrancyVulnerability": 5, "FrontRunningVulnerability": 2, "OtherVulnerability": 1, "UncheckedLowCallsVulnerability": 2, "TimeManipulationVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 13, "error": 1, "note": 2, "none": 0}, "false_positives": 1}