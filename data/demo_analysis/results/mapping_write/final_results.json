{"contract": "mapping_write", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 4, "list_vulnerabilities": ["ArithmeticVulnerability", "OtherVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `set(uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Other_14", "fullDescription": {"text": "Map.owner (/data/demo_analysis/source_code/mapping_write.sol#12) is never initialized. It is used in:\n\t- withdraw (/data/demo_analysis/source_code/mapping_write.sol#26-29)\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "uninitialized-state"}}], "listLine": [17, 20, 24, 11, 12, 26], "analysis": {"17": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "key + 1"}, "fullDescription": "A possible integer overflow exists in the function `set(uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "20": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "map[key]"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "24": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "map[key]"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "11": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "contract Map {\n     address public owner;\n     uint256[] map;\n\n     function set(uint256 key, uint256 value) public {\n         if (map.length <= key) {\n             map.length = key + 1;\n         }\n        // <yes> <report> ACCESS_CONTROL\n         map[key] = value;\n     }\n\n     function get(uint256 key) public view returns (uint256) {\n         return map[key];\n     }\n     function withdraw() public{\n       require(msg.sender == owner);\n       msg.sender.transfer(address(this).balance);\n     }\n }"}, "fullDescription": "A possible integer overflow exists in the function `set(uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "12": [{"level": "error", "tool": ["slither"], "fullDescription": "Map.owner (/data/demo_analysis/source_code/mapping_write.sol#12) is never initialized. It is used in:\n\t- withdraw (/data/demo_analysis/source_code/mapping_write.sol#26-29)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "26": [{"level": "error", "tool": ["slither"], "fullDescription": "Map.owner (/data/demo_analysis/source_code/mapping_write.sol#12) is never initialized. It is used in:\n\t- withdraw (/data/demo_analysis/source_code/mapping_write.sol#26-29)\n", "name": "OtherVulnerability", "flag": "risk of false positives"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 2, "OtherVulnerability": 4}, "count_leve_vulnerabilities": {"warning": 2, "error": 2, "note": 2, "none": 0}, "false_positives": 0}