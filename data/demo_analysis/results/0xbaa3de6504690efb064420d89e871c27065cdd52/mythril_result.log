{"error": null, "issues": [{"address": 482, "code": "oxy(address target, bytes data) public payable {\n        // <yes> <report> UNCHECKED_LL_CALLS\n        target.call.value(msg.value)(data);\n    }\n}\n\ncontract V", "debug": "calldata_VaultProxy_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_VaultProxy_0: 0xbe6d055a00000000000000000000000000000000000000000000000000000000\ncalldatasize_VaultProxy: 0x4\n", "description": "A possible integer overflow exists in the function `proxy(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/data/demo_analysis/source_code/0xbaa3de6504690efb064420d89e871c27065cdd52.sol", "function": "proxy(address,bytes)", "lineno": 12, "title": "Integer Overflow ", "type": "Warning"}, {"address": 564, "code": " Owner = ", "debug": "", "description": "Function Vault() retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "filename": "/data/demo_analysis/source_code/0xbaa3de6504690efb064420d89e871c27065cdd52.sol", "function": "Vault()", "lineno": 26, "title": "Use of tx.origin", "type": "Warning"}, {"address": 1283, "code": "alue(msg.value)(data);\n    }\n}\n\nco", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/data/demo_analysis/source_code/0xbaa3de6504690efb064420d89e871c27065cdd52.sol", "function": "proxy(address,bytes)", "lineno": 14, "title": "Message call to external contract", "type": "Warning"}, {"address": 1283, "code": "alue(msg.value)(data);\n    }\n}\n\nco", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/data/demo_analysis/source_code/0xbaa3de6504690efb064420d89e871c27065cdd52.sol", "function": "proxy(address,bytes)", "lineno": 14, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 1378, "code": "e;\n        }\n    }\n    \n    funct", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xa4caeb77955d86f3c58efbb3dd3fc307a23016846a453f1405090f5ebff9fe27\ncallvalue: 0x8fb88a7411c006fbf63e7fe0dfbffa0fafaf36f572513fa5a1e24f4004042f31\ncalldata_VaultProxy_0: 0xd0e30db000000000000000000000000000000000000000000000000000000000\ncalldatasize_VaultProxy: 0x4\n", "description": "A possible integer overflow exists in the function `deposit()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/data/demo_analysis/source_code/0xbaa3de6504690efb064420d89e871c27065cdd52.sol", "function": "deposit()", "lineno": 33, "title": "Integer Overflow ", "type": "Warning"}], "success": true}