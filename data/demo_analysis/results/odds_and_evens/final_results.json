{"contract": "odds_and_evens", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 9, "list_vulnerabilities": ["AccessControlVulnerability", "UncheckedLowCallsVulnerability", "OtherVulnerability", "ArithmeticVulnerability", "FrontRunningVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "AccessControl_13", "fullDescription": {"text": "In the function `getProfit()` a non-zero amount of Ether is sent to msg.sender.\n\nThere is a check on storage index 4. This storage slot can be written to by calling the function `play(uint256)`."}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Ether send"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `play(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "FrontRunning_1", "fullDescription": {"text": "A possible transaction order independence vulnerability exists in function play(uint256). The value or direction of the call statement is determined from a tainted storage location"}, "name": "FrontRunningVulnerability", "shortDescription": {"text": "Transaction order dependence"}}, {"id": "AccessControl_19", "fullDescription": {"text": "OddsAndEvens.andTheWinnerIs (/data/demo_analysis/source_code/odds_and_evens.sol#34-46) sends eth to arbitrary user\n\tDangerous calls:\n\t- res = players[0].addr.send(1800000000000000000) (/data/demo_analysis/source_code/odds_and_evens.sol#38)\n\t- res = players[1].addr.send(1800000000000000000) (/data/demo_analysis/source_code/odds_and_evens.sol#41)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}, {"id": "Other_20", "name": "OtherVulnerability", "shortDescription": {"text": "uninitialised_struct"}}], "listLine": [50, 28, 16, 36, 38, 41, 34], "analysis": {"50": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.sender.send(this.balance)"}, "fullDescription": "In the function `getProfit()` a non-zero amount of Ether is sent to msg.sender.\n\nThere is a check on storage index 4. This storage slot can be written to by calling the function `play(uint256)`.", "name": "AccessControlVulnerability"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}], "28": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "players[tot]"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "16": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "Player[2] public players"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "36": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "players[0].number+players[1].number"}, "fullDescription": "A possible integer overflow exists in the function `play(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "38": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "players[0].addr.send(1800 finney)"}, "fullDescription": "A possible transaction order independence vulnerability exists in function play(uint256). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "error", "tool": ["slither"], "fullDescription": "OddsAndEvens.andTheWinnerIs (/data/demo_analysis/source_code/odds_and_evens.sol#34-46) sends eth to arbitrary user\n\tDangerous calls:\n\t- res = players[0].addr.send(1800000000000000000) (/data/demo_analysis/source_code/odds_and_evens.sol#38)\n\t- res = players[1].addr.send(1800000000000000000) (/data/demo_analysis/source_code/odds_and_evens.sol#41)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "41": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "players[1].addr.send(1800 finney)"}, "fullDescription": "A possible transaction order independence vulnerability exists in function play(uint256). The value or direction of the call statement is determined from a tainted storage location", "name": "FrontRunningVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability", "flag": "risk of false positives"}, {"level": "error", "tool": ["slither"], "fullDescription": "OddsAndEvens.andTheWinnerIs (/data/demo_analysis/source_code/odds_and_evens.sol#34-46) sends eth to arbitrary user\n\tDangerous calls:\n\t- res = players[0].addr.send(1800000000000000000) (/data/demo_analysis/source_code/odds_and_evens.sol#38)\n\t- res = players[1].addr.send(1800000000000000000) (/data/demo_analysis/source_code/odds_and_evens.sol#41)\n", "name": "AccessControlVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "34": [{"level": "error", "tool": ["slither"], "fullDescription": "OddsAndEvens.andTheWinnerIs (/data/demo_analysis/source_code/odds_and_evens.sol#34-46) sends eth to arbitrary user\n\tDangerous calls:\n\t- res = players[0].addr.send(1800000000000000000) (/data/demo_analysis/source_code/odds_and_evens.sol#38)\n\t- res = players[1].addr.send(1800000000000000000) (/data/demo_analysis/source_code/odds_and_evens.sol#41)\n", "name": "AccessControlVulnerability"}], "29": []}, "count_vulnerabilities": {"AccessControlVulnerability": 4, "UncheckedLowCallsVulnerability": 3, "OtherVulnerability": 2, "ArithmeticVulnerability": 1, "FrontRunningVulnerability": 2, "DenialServiceVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 6, "error": 3, "note": 5, "none": 0}, "false_positives": 1}