{"contract": "0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c", "sourceLanguage": "Solidity", "analysis": {"13": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "nsfer(address[] _tos,uint[] v)public returns (bool){\n        require(msg.sender == 0x9797055B68C5DadDE6b3c7d5D80C9CFE2eecE6c9);\n        require(_tos.length > 0);\n        bytes4 id=bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for(uint i=0;i<_tos.length;i++){\n            // <yes> <report> UNCHECKED_LL_CALLS\n            caddress.call(id,from,_tos[i],v[i]*1000000000000000000);\n        }\n        return true;\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `_function_0xffc3a769`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "EBU.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v[i] * 1000000000000000000) (/data/demo_analysis/source_code/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol#19-21)\n", "name": "DenialServiceVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in EBU.transfer (/data/demo_analysis/source_code/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol#13-23):\n\t-caddress.call(id,from,_tos[i],v[i] * 1000000000000000000) /data/demo_analysis/source_code/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol#19-21\n", "name": "UncheckedLowCallsVulnerability"}], "19": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "0000"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability"}, {"level": "note", "tool": ["mythril"], "fullDescription": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["slither", "oyente"], "fullDescription": "EBU.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v[i] * 1000000000000000000) (/data/demo_analysis/source_code/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol#19-21)\n", "name": "DenialServiceVulnerability"}]}, "listLine": [13, 19], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `_function_0xffc3a769`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1095\nCall at address: 1095\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "DenialService_3", "fullDescription": {"text": "EBU.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v[i] * 1000000000000000000) (/data/demo_analysis/source_code/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol#19-21)\n"}, "name": "DenialServiceVulnerability", "shortDescription": {"text": "calls-loop"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in EBU.transfer (/data/demo_analysis/source_code/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol#13-23):\n\t-caddress.call(id,from,_tos[i],v[i] * 1000000000000000000) /data/demo_analysis/source_code/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol#19-21\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}]}