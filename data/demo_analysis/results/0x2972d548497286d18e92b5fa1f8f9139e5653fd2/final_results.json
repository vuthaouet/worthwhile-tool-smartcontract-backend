{"contract": "0x2972d548497286d18e92b5fa1f8f9139e5653fd2", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 2, "list_vulnerabilities": ["ArithmeticVulnerability", "DenialServiceVulnerability", "UncheckedLowCallsVulnerability", "OtherVulnerability", "ReentrancyVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `_function_0x11be40e0`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Other_10", "fullDescription": {"text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 732\nCall at address: 732\nCall at address: 732\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Multiple Calls"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "DenialService_3", "fullDescription": {"text": "demo.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v[i]) (/data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol#14-16)\n"}, "name": "DenialServiceVulnerability", "shortDescription": {"text": "calls-loop"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in demo.transfer (/data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol#9-18):\n\t-caddress.call(id,from,_tos[i],v[i]) /data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol#14-16\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [9, 15, 14], "analysis": {"9": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": " transfer(address from,address caddress,address[] _tos,uint[] v)public returns (bool){\n        require(_tos.length > 0);\n        bytes4 id=bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for(uint i=0;i<_tos.length;i++){\n             // <yes> <report> UNCHECKED_LL_CALLS\n            caddress.call(id,from,_tos[i],v[i]);\n        }\n        return true;\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `_function_0x11be40e0`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["slither"], "fullDescription": "demo.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v[i]) (/data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol#14-16)\n", "name": "DenialServiceVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in demo.transfer (/data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol#9-18):\n\t-caddress.call(id,from,_tos[i],v[i]) /data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol#14-16\n", "name": "UncheckedLowCallsVulnerability"}], "15": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "  }\n"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}], "14": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "(id,from,_tos[i],v[i]);\n        }\n "}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 732\nCall at address: 732\nCall at address: 732\n", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["slither", "oyente"], "fullDescription": "demo.transfer has external calls inside a loop:\n\t- caddress.call(id,from,_tos[i],v[i]) (/data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol#14-16)\n", "name": "DenialServiceVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1, "DenialServiceVulnerability": 2, "UncheckedLowCallsVulnerability": 2, "OtherVulnerability": 2, "ReentrancyVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 5, "error": 0, "note": 3, "none": 0}, "false_positives": 0}