{"contract": "reentrance", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 2, "list_vulnerabilities": ["ArithmeticVulnerability", "ReentrancyVulnerability", "UncheckedLowCallsVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "Reentrancy_4", "fullDescription": {"text": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "State change after external call"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in Reentrance.withdraw (/data/blockchain-concepts/source_code/reentrance.sol#21-29):\n\tExternal calls:\n\t- msg.sender.call.value(_amount)() (/data/blockchain-concepts/source_code/reentrance.sol#24-26)\n\tState variables written after the call(s):\n\t- balances (/data/blockchain-concepts/source_code/reentrance.sol#27)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in Reentrance.withdraw (/data/blockchain-concepts/source_code/reentrance.sol#21-29):\n\t-msg.sender.call.value(_amount)() /data/blockchain-concepts/source_code/reentrance.sol#24-26\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}], "listLine": [14, 24, 27, 21], "analysis": {"14": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "balances[_to] += msg.value"}, "fullDescription": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "24": [{"level": "warning", "tool": ["mythril", "slither", "oyente"], "snippet": {"text": "msg.sender.call.value(_amount)()"}, "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "27": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "balances[msg.sender] -= _amount"}, "fullDescription": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "name": "ReentrancyVulnerability"}], "21": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in Reentrance.withdraw (/data/blockchain-concepts/source_code/reentrance.sol#21-29):\n\tExternal calls:\n\t- msg.sender.call.value(_amount)() (/data/blockchain-concepts/source_code/reentrance.sol#24-26)\n\tState variables written after the call(s):\n\t- balances (/data/blockchain-concepts/source_code/reentrance.sol#27)\n", "name": "ReentrancyVulnerability", "flag": "risk of false positives"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Reentrance.withdraw (/data/blockchain-concepts/source_code/reentrance.sol#21-29):\n\t-msg.sender.call.value(_amount)() /data/blockchain-concepts/source_code/reentrance.sol#24-26\n", "name": "UncheckedLowCallsVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 1, "ReentrancyVulnerability": 3, "UncheckedLowCallsVulnerability": 2, "DenialServiceVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 4, "error": 1, "note": 2, "none": 0}, "false_positives": 0}