{
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Mythril",
          "fullDescription": {
            "text": "Mythril analyses EVM bytecode using symbolic analysis, taint analysis and control flow checking to detect a variety of security vulnerabilities."
          },
          "informationUri": "https://mythx.io/",
          "rules": [
            {
              "id": "Arithmetic_4",
              "fullDescription": {
                "text": "A possible integer overflow exists in the function `_function_0x11be40e0`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."
              },
              "name": "ArithmeticVulnerability",
              "shortDescription": {
                "text": "Integer Overflow"
              }
            },
            {
              "id": "Other_9",
              "fullDescription": {
                "text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "
              },
              "name": "OtherVulnerability",
              "shortDescription": {
                "text": "Exception state"
              }
            },
            {
              "id": "Reentrancy_3",
              "fullDescription": {
                "text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."
              },
              "name": "ReentrancyVulnerability",
              "shortDescription": {
                "text": "Message call to external contract"
              }
            },
            {
              "id": "Other_10",
              "fullDescription": {
                "text": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 732\nCall at address: 732\nCall at address: 732\n"
              },
              "name": "OtherVulnerability",
              "shortDescription": {
                "text": "Multiple Calls"
              }
            },
            {
              "id": "UncheckedLowCalls_3",
              "fullDescription": {
                "text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."
              },
              "name": "UncheckedLowCallsVulnerability",
              "shortDescription": {
                "text": "Unchecked CALL return value"
              }
            }
          ],
          "version": "0.4.25"
        }
      },
      "artifacts": [
        {
          "location": {
            "uri": "data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol"
          },
          "sourceLanguage": "Solidity"
        }
      ],
      "logicalLocations": [
        {
          "kind": "function",
          "name": "_function_0x11be40e0"
        }
      ],
      "results": [
        {
          "message": {
            "text": "Integer Overflow "
          },
          "level": "warning",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "_function_0x11be40e0"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol"
                },
                "region": {
                  "snippet": {
                    "text": " transfer(address from,address caddress,address[] _tos,uint[] v)public returns (bool){\n        require(_tos.length > 0);\n        bytes4 id=bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for(uint i=0;i<_tos.length;i++){\n             // <yes> <report> UNCHECKED_LL_CALLS\n            caddress.call(id,from,_tos[i],v[i]);\n        }\n        return true;\n    }\n}"
                  },
                  "startLine": 9
                }
              }
            }
          ],
          "ruleId": "Arithmetic_4"
        },
        {
          "message": {
            "text": "Exception state"
          },
          "level": "note",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "_function_0x11be40e0"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol"
                },
                "region": {
                  "snippet": {
                    "text": "  }\n"
                  },
                  "startLine": 15
                }
              }
            }
          ],
          "ruleId": "Other_9"
        },
        {
          "message": {
            "text": "Message call to external contract"
          },
          "level": "warning",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "_function_0x11be40e0"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol"
                },
                "region": {
                  "snippet": {
                    "text": "(id,from,_tos[i],v[i]);\n        }\n "
                  },
                  "startLine": 14
                }
              }
            }
          ],
          "ruleId": "Reentrancy_3"
        },
        {
          "message": {
            "text": "Multiple Calls"
          },
          "level": "warning",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "_function_0x11be40e0"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol"
                },
                "region": {
                  "snippet": {
                    "text": "(id,from,_tos[i],v[i]);\n        }\n "
                  },
                  "startLine": 14
                }
              }
            }
          ],
          "ruleId": "Other_10"
        },
        {
          "message": {
            "text": "Unchecked CALL return value"
          },
          "level": "note",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "_function_0x11be40e0"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol"
                },
                "region": {
                  "snippet": {
                    "text": "(id,from,_tos[i],v[i]);\n        }\n "
                  },
                  "startLine": 14
                }
              }
            }
          ],
          "ruleId": "UncheckedLowCalls_3"
        }
      ]
    }
  ],
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json"
}