{"contract": "0xbaa3de6504690efb064420d89e871c27065cdd52", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 1, "list_vulnerabilities": ["ArithmeticVulnerability", "UncheckedLowCallsVulnerability", "AccessControlVulnerability", "ReentrancyVulnerability", "DenialServiceVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `proxy(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "AccessControl_15", "fullDescription": {"text": "Function Vault() retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "Use of tx.origin"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "UncheckedLowCalls_3", "fullDescription": {"text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "Unchecked CALL return value"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in Proxy.proxy (/data/demo_analysis/source_code/0xbaa3de6504690efb064420d89e871c27065cdd52.sol#12-18):\n\t-target.call.value(msg.value)(data) /data/demo_analysis/source_code/0xbaa3de6504690efb064420d89e871c27065cdd52.sol#14-18\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "DenialService_2", "name": "DenialServiceVulnerability", "shortDescription": {"text": "Callstack Depth Attack Vulnerability."}}], "listLine": [12, 26, 14, 33], "analysis": {"12": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "oxy(address target, bytes data) public payable {\n        // <yes> <report> UNCHECKED_LL_CALLS\n        target.call.value(msg.value)(data);\n    }\n}\n\ncontract V"}, "fullDescription": "A possible integer overflow exists in the function `proxy(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in Proxy.proxy (/data/demo_analysis/source_code/0xbaa3de6504690efb064420d89e871c27065cdd52.sol#12-18):\n\t-target.call.value(msg.value)(data) /data/demo_analysis/source_code/0xbaa3de6504690efb064420d89e871c27065cdd52.sol#14-18\n", "name": "UncheckedLowCallsVulnerability"}], "26": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": " Owner = "}, "fullDescription": "Function Vault() retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "name": "AccessControlVulnerability"}], "14": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "alue(msg.value)(data);\n    }\n}\n\nco"}, "fullDescription": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["mythril", "slither"], "fullDescription": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "name": "UncheckedLowCallsVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "DenialServiceVulnerability", "flag": "risk of false positives"}], "33": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "e;\n        }\n    }\n    \n    funct"}, "fullDescription": "A possible integer overflow exists in the function `proxy(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 2, "UncheckedLowCallsVulnerability": 2, "AccessControlVulnerability": 1, "ReentrancyVulnerability": 1, "DenialServiceVulnerability": 1}, "count_leve_vulnerabilities": {"warning": 5, "error": 0, "note": 2, "none": 0}, "false_positives": 0}