{
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Mythril",
          "fullDescription": {
            "text": "Mythril analyses EVM bytecode using symbolic analysis, taint analysis and control flow checking to detect a variety of security vulnerabilities."
          },
          "informationUri": "https://mythx.io/",
          "rules": [
            {
              "id": "Arithmetic_4",
              "fullDescription": {
                "text": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."
              },
              "name": "ArithmeticVulnerability",
              "shortDescription": {
                "text": "Integer Overflow"
              }
            },
            {
              "id": "Arithmetic_5",
              "fullDescription": {
                "text": "A possible integer underflow exists in the function `upgrade(address)`.\nThe subtraction may result in a value < 0."
              },
              "name": "ArithmeticVulnerability",
              "shortDescription": {
                "text": "Integer Underflow"
              }
            },
            {
              "id": "Reentrancy_3",
              "fullDescription": {
                "text": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code."
              },
              "name": "ReentrancyVulnerability",
              "shortDescription": {
                "text": "Message call to external contract"
              }
            },
            {
              "id": "UncheckedLowCalls_3",
              "fullDescription": {
                "text": "The return value of an external call is not checked. Note that execution continue even if the called contract throws."
              },
              "name": "UncheckedLowCallsVulnerability",
              "shortDescription": {
                "text": "Unchecked CALL return value"
              }
            },
            {
              "id": "Reentrancy_4",
              "fullDescription": {
                "text": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities."
              },
              "name": "ReentrancyVulnerability",
              "shortDescription": {
                "text": "State change after external call"
              }
            },
            {
              "id": "Other_9",
              "fullDescription": {
                "text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "
              },
              "name": "OtherVulnerability",
              "shortDescription": {
                "text": "Exception state"
              }
            }
          ],
          "version": "0.4.25"
        }
      },
      "artifacts": [
        {
          "location": {
            "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
          },
          "sourceLanguage": "Solidity"
        }
      ],
      "logicalLocations": [
        {
          "kind": "function",
          "name": "request(uint8,address,bytes4,uint256,bytes32[])"
        },
        {
          "kind": "function",
          "name": "upgrade(address)"
        },
        {
          "kind": "function",
          "name": "withdraw()"
        },
        {
          "kind": "function",
          "name": "deliver(uint64,bytes32,uint64,bytes32)"
        },
        {
          "kind": "function",
          "name": "cancel(uint64)"
        },
        {
          "kind": "function",
          "name": "_function_0x81d12c58"
        }
      ],
      "results": [
        {
          "message": {
            "text": "Integer Overflow "
          },
          "level": "warning",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "request(uint8,address,bytes4,uint256,bytes32[])"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": "32[] requestData) public payable returns (int) {\n        if (externalCallFlag) {\n            throw;\n        }\n\n        if (killswitch) {\n            externalCallFlag = true;\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return newVersion;\n        }\n\n        if (msg.value < MIN_FEE) {\n            externalCallFlag = true;\n            // If the amount of ether sent by the requester is too little or \n            // too much, refund the requester and discard the request.\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return FAIL_FLAG;\n        } else {\n            // Record the request.\n            uint64 requestId = requestCnt;\n            requestCnt++;\n            unrespondedCnt++;\n\n            bytes32 paramsHash = sha3(requestType, requestData);\n            requests[requestId].requester = msg.sender;\n            requests[requestId].fee = msg.value;\n            requests[requestId].callbackAddr = callbackAddr;\n            requests[requestId].callbackFID = callbackFID;\n            requests[requestId].paramsHash = paramsHash;\n\n            // Log the request for the Town Crier server to process.\n            RequestInfo(requestId, requestType, msg.sender, msg.value, callbackAddr, paramsHash, timestamp, requestData);\n            return requestId;\n        }\n    }\n\n    function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 respData) public {\n        if (msg.sender != SGX_ADDRESS"
                  },
                  "startLine": 100
                }
              }
            }
          ],
          "ruleId": "Arithmetic_4"
        },
        {
          "message": {
            "text": "Integer Overflow "
          },
          "level": "warning",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "request(uint8,address,bytes4,uint256,bytes32[])"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": "32[] requestData) public payable returns (int) {\n        if (externalCallFlag) {\n            throw;\n        }\n\n        if (killswitch) {\n            externalCallFlag = true;\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return newVersion;\n        }\n\n        if (msg.value < MIN_FEE) {\n            externalCallFlag = true;\n            // If the amount of ether sent by the requester is too little or \n            // too much, refund the requester and discard the request.\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return FAIL_FLAG;\n        } else {\n            // Record the request.\n            uint64 requestId = requestCnt;\n            requestCnt++;\n            unrespondedCnt++;\n\n            bytes32 paramsHash = sha3(requestType, requestData);\n            requests[requestId].requester = msg.sender;\n            requests[requestId].fee = msg.value;\n            requests[requestId].callbackAddr = callbackAddr;\n            requests[requestId].callbackFID = callbackFID;\n            requests[requestId].paramsHash = paramsHash;\n\n            // Log the request for the Town Crier server to process.\n            RequestInfo(requestId, requestType, msg.sender, msg.value, callbackAddr, paramsHash, timestamp, requestData);\n            return requestId;\n        }\n    }\n\n    function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 respData) public {\n        if (msg.sender != SGX_ADDRESS"
                  },
                  "startLine": 100
                }
              }
            }
          ],
          "ruleId": "Arithmetic_4"
        },
        {
          "message": {
            "text": "Integer Overflow "
          },
          "level": "warning",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "request(uint8,address,bytes4,uint256,bytes32[])"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": "32[] requestData) public payable returns (int) {\n        if (externalCallFlag) {\n            throw;\n        }\n\n        if (killswitch) {\n            externalCallFlag = true;\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return newVersion;\n        }\n\n        if (msg.value < MIN_FEE) {\n            externalCallFlag = true;\n            // If the amount of ether sent by the requester is too little or \n            // too much, refund the requester and discard the request.\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return FAIL_FLAG;\n        } else {\n            // Record the request.\n            uint64 requestId = requestCnt;\n            requestCnt++;\n            unrespondedCnt++;\n\n            bytes32 paramsHash = sha3(requestType, requestData);\n            requests[requestId].requester = msg.sender;\n            requests[requestId].fee = msg.value;\n            requests[requestId].callbackAddr = callbackAddr;\n            requests[requestId].callbackFID = callbackFID;\n            requests[requestId].paramsHash = paramsHash;\n\n            // Log the request for the Town Crier server to process.\n            RequestInfo(requestId, requestType, msg.sender, msg.value, callbackAddr, paramsHash, timestamp, requestData);\n            return requestId;\n        }\n    }\n\n    function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 respData) public {\n        if (msg.sender != SGX_ADDRESS"
                  },
                  "startLine": 100
                }
              }
            }
          ],
          "ruleId": "Arithmetic_4"
        },
        {
          "message": {
            "text": "Integer Overflow "
          },
          "level": "warning",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "request(uint8,address,bytes4,uint256,bytes32[])"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": "32[] requestData) public payable returns (int) {\n        if (externalCallFlag) {\n            throw;\n        }\n\n        if (killswitch) {\n            externalCallFlag = true;\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return newVersion;\n        }\n\n        if (msg.value < MIN_FEE) {\n            externalCallFlag = true;\n            // If the amount of ether sent by the requester is too little or \n            // too much, refund the requester and discard the request.\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return FAIL_FLAG;\n        } else {\n            // Record the request.\n            uint64 requestId = requestCnt;\n            requestCnt++;\n            unrespondedCnt++;\n\n            bytes32 paramsHash = sha3(requestType, requestData);\n            requests[requestId].requester = msg.sender;\n            requests[requestId].fee = msg.value;\n            requests[requestId].callbackAddr = callbackAddr;\n            requests[requestId].callbackFID = callbackFID;\n            requests[requestId].paramsHash = paramsHash;\n\n            // Log the request for the Town Crier server to process.\n            RequestInfo(requestId, requestType, msg.sender, msg.value, callbackAddr, paramsHash, timestamp, requestData);\n            return requestId;\n        }\n    }\n\n    function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 respData) public {\n        if (msg.sender != SGX_ADDRESS"
                  },
                  "startLine": 100
                }
              }
            }
          ],
          "ruleId": "Arithmetic_4"
        },
        {
          "message": {
            "text": "Integer Underflow"
          },
          "level": "warning",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "upgrade(address)"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": "e(newAddr);\n "
                  },
                  "startLine": 67
                }
              }
            }
          ],
          "ruleId": "Arithmetic_5"
        },
        {
          "message": {
            "text": "Message call to external contract"
          },
          "level": "note",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "withdraw()"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": "    }\n    }\n\n    function request(uint8 requestT"
                  },
                  "startLine": 97
                }
              }
            }
          ],
          "ruleId": "Reentrancy_3"
        },
        {
          "message": {
            "text": "Unchecked CALL return value"
          },
          "level": "note",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "deliver(uint64,bytes32,uint64,bytes32)"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": "  requests[requestId].fee = DELIVE"
                  },
                  "startLine": 168
                }
              }
            }
          ],
          "ruleId": "UncheckedLowCalls_3"
        },
        {
          "message": {
            "text": "Integer Underflow"
          },
          "level": "warning",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "deliver(uint64,bytes32,uint64,bytes32)"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": "    // Either no"
                  },
                  "startLine": 172
                }
              }
            }
          ],
          "ruleId": "Arithmetic_5"
        },
        {
          "message": {
            "text": "Integer Underflow"
          },
          "level": "warning",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "deliver(uint64,bytes32,uint64,bytes32)"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": "t for its delive"
                  },
                  "startLine": 173
                }
              }
            }
          ],
          "ruleId": "Arithmetic_5"
        },
        {
          "message": {
            "text": "Unchecked CALL return value"
          },
          "level": "note",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "deliver(uint64,bytes32,uint64,bytes32)"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": "D_LL_CALLS\n          "
                  },
                  "startLine": 179
                }
              }
            }
          ],
          "ruleId": "UncheckedLowCalls_3"
        },
        {
          "message": {
            "text": "Unchecked CALL return value"
          },
          "level": "note",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "deliver(uint64,bytes32,uint64,bytes32)"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": "or the callback function\n        DeliverInfo(requestId, f"
                  },
                  "startLine": 184
                }
              }
            }
          ],
          "ruleId": "UncheckedLowCalls_3"
        },
        {
          "message": {
            "text": "Message call to external contract"
          },
          "level": "warning",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "cancel(uint64)"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": "questId].fee, 1);\n            return SUCCESS_FL"
                  },
                  "startLine": 215
                }
              }
            }
          ],
          "ruleId": "Reentrancy_3"
        },
        {
          "message": {
            "text": "State change after external call"
          },
          "level": "warning",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "cancel(uint64)"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": "ender, requests[requestI"
                  },
                  "startLine": 218
                }
              }
            }
          ],
          "ruleId": "Reentrancy_4"
        },
        {
          "message": {
            "text": "Message call to external contract"
          },
          "level": "warning",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "request(uint8,address,bytes4,uint256,bytes32[])"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": "false;\n            return newVersi"
                  },
                  "startLine": 110
                }
              }
            }
          ],
          "ruleId": "Reentrancy_3"
        },
        {
          "message": {
            "text": "State change after external call"
          },
          "level": "warning",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "request(uint8,address,bytes4,uint256,bytes32[])"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": "      externalCallFlag ="
                  },
                  "startLine": 115
                }
              }
            }
          ],
          "ruleId": "Reentrancy_4"
        },
        {
          "message": {
            "text": "Message call to external contract"
          },
          "level": "warning",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "request(uint8,address,bytes4,uint256,bytes32[])"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": "        return FAIL_FLAG;\n        "
                  },
                  "startLine": 122
                }
              }
            }
          ],
          "ruleId": "Reentrancy_3"
        },
        {
          "message": {
            "text": "State change after external call"
          },
          "level": "warning",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "request(uint8,address,bytes4,uint256,bytes32[])"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": "uint64 requestId = reque"
                  },
                  "startLine": 125
                }
              }
            }
          ],
          "ruleId": "Reentrancy_4"
        },
        {
          "message": {
            "text": "Integer Overflow "
          },
          "level": "warning",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "request(uint8,address,bytes4,uint256,bytes32[])"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": "g.value;\n            requests["
                  },
                  "startLine": 131
                }
              }
            }
          ],
          "ruleId": "Arithmetic_4"
        },
        {
          "message": {
            "text": "Integer Overflow "
          },
          "level": "warning",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "request(uint8,address,bytes4,uint256,bytes32[])"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": "Id;\n        }\n    }\n\n    function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 respDa"
                  },
                  "startLine": 138
                }
              }
            }
          ],
          "ruleId": "Arithmetic_4"
        },
        {
          "message": {
            "text": "Exception state"
          },
          "level": "note",
          "locations": [
            {
              "logicalLocations": [
                {
                  "kind": "function",
                  "name": "_function_0x81d12c58"
                }
              ],
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/demo_analysis/source_code/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol"
                },
                "region": {
                  "snippet": {
                    "text": " public newVersion = 0;\n\n    /"
                  },
                  "startLine": 43
                }
              }
            }
          ],
          "ruleId": "Other_9"
        }
      ]
    }
  ],
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json"
}