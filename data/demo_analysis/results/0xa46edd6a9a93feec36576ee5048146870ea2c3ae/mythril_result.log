{"error": null, "issues": [{"address": 168, "code": "ransfer(address from,address caddress,address[] _tos,uint[] v)public returns (bool){\n        require(_tos.length > 0);\n        bytes4 id=bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for(uint i=0;i<_tos.length;i++){\n            // <yes> <report> UNCHECKED_LL_CALLS\n            caddress.call(id,from,_tos[i],v[i]);\n        }\n        return true;\n    }\n}", "debug": "calldata_EBU_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_EBU_0: 0x11be40e000000000000000000000000000000000000000000000000000000000\ncalldatasize_EBU: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x11be40e0`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/data/demo_analysis/source_code/0xa46edd6a9a93feec36576ee5048146870ea2c3ae.sol", "function": "_function_0x11be40e0", "lineno": 11, "title": "Integer Overflow ", "type": "Warning"}, {"address": 549, "code": "}\n  ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_EBU_4 + calldata_EBU_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_EBU_0: 0x11be40e000000000000000000000000000000000000000000000000000000000\ncalldatasize_EBU: 0x4\nmem_128 + 32 + 32*calldata_EBU_4 + calldata_EBU_32 + 36: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/data/demo_analysis/source_code/0xa46edd6a9a93feec36576ee5048146870ea2c3ae.sol", "function": "_function_0x11be40e0", "lineno": 17, "title": "Exception state", "type": "Informational"}, {"address": 732, "code": "d,from,_tos[i],v[i]);\n        }\n   ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/data/demo_analysis/source_code/0xa46edd6a9a93feec36576ee5048146870ea2c3ae.sol", "function": "_function_0x11be40e0", "lineno": 16, "title": "Message call to external contract", "type": "Warning"}, {"address": 732, "code": "d,from,_tos[i],v[i]);\n        }\n   ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 732\nCall at address: 732\nCall at address: 732\n", "filename": "/data/demo_analysis/source_code/0xa46edd6a9a93feec36576ee5048146870ea2c3ae.sol", "function": "_function_0x11be40e0", "lineno": 16, "title": "Multiple Calls", "type": "Information"}, {"address": 732, "code": "d,from,_tos[i],v[i]);\n        }\n   ", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/data/demo_analysis/source_code/0xa46edd6a9a93feec36576ee5048146870ea2c3ae.sol", "function": "_function_0x11be40e0", "lineno": 16, "title": "Unchecked CALL return value", "type": "Informational"}], "success": true}