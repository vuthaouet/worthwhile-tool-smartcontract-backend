{"contract": "0x561eac93c92360949ab1f1403323e6db345cbf31", "sourceLanguage": "Solidity", "analysis": {"90": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "Msg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "2": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "n.io \n * @author: "}, "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "87": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "ddress _adr,uint _val,st"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability"}], "78": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "    string  Data;\n        uint Val;\n        uint  Time;\n    }\n    \n    Message[] public History;\n    \n    Message LastMsg;\n    \n    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}, {"level": "warning", "tool": ["mythril"], "fullDescription": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "49": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in BANK_SAFE.Collect (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#49-66):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#56-64)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#57)\n", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in BANK_SAFE.Collect (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#49-66):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#56-64\n", "name": "UncheckedLowCallsVulnerability"}], "56": [{"level": "error", "tool": ["slither"], "snippet": {"text": "msg.sender.call.value(_am)()"}, "fullDescription": "Reentrancy in BANK_SAFE.Collect (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#49-66):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#56-64)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#57)\n", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in BANK_SAFE.Collect (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#49-66):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#56-64\n", "name": "UncheckedLowCallsVulnerability"}], "57": [{"level": "error", "tool": ["slither", "oyente", "honeybadger"], "snippet": {"text": "balances[msg.sender] -= _am"}, "fullDescription": "Reentrancy in BANK_SAFE.Collect (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#49-66):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#56-64)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#57)\n", "name": "ReentrancyVulnerability"}], "54": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ReentrancyVulnerability"}], "83": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "ArithmeticVulnerability"}]}, "listLine": [90, 2, 87, 78, 49, 56, 57, 54, 83], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `AddMessage(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in BANK_SAFE.Collect (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#49-66):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#56-64)\n\tState variables written after the call(s):\n\t- balances (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#57)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in BANK_SAFE.Collect (/data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#49-66):\n\t-msg.sender.call.value(_am)() /data/demo_analysis/source_code/0x561eac93c92360949ab1f1403323e6db345cbf31.sol#56-64\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}, {"id": "Arithmetic_12", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Underflow."}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "Reentrancy_13", "name": "ReentrancyVulnerability", "shortDescription": {"text": "straw_man_contract"}}]}