{"contract": "crypto_roulette", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 5, "list_vulnerabilities": ["AccessControlVulnerability", "OtherVulnerability", "ArithmeticVulnerability"], "rules": [{"id": "AccessControl_19", "fullDescription": {"text": "CryptoRoulette.play (/data/demo_analysis_2/source_code/crypto_roulette.sol#37-52) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis_2/source_code/crypto_roulette.sol#47)\n"}, "name": "AccessControlVulnerability", "shortDescription": {"text": "arbitrary-send"}}, {"id": "Other_15", "fullDescription": {"text": "game in CryptoRoulette.play (/data/demo_analysis_2/source_code/crypto_roulette.sol#40) is a storage variable never initialiazed\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "uninitialized-storage"}}, {"id": "Other_11", "fullDescription": {"text": "CryptoRoulette.play (/data/demo_analysis_2/source_code/crypto_roulette.sol#37-52) uses a dangerous strict equality:\n\t- number == secretNumber\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "incorrect-equality"}}, {"id": "Other_9", "fullDescription": {"text": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. "}, "name": "OtherVulnerability", "shortDescription": {"text": "Exception state"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `kill()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "Other_20", "name": "OtherVulnerability", "shortDescription": {"text": "uninitialised_struct"}}], "listLine": [37, 47, 40, 45, 25, 55, 2, 41], "analysis": {"37": [{"level": "error", "tool": ["slither"], "fullDescription": "CryptoRoulette.play (/data/demo_analysis_2/source_code/crypto_roulette.sol#37-52) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis_2/source_code/crypto_roulette.sol#47)\n", "name": "AccessControlVulnerability"}, {"level": "error", "tool": ["slither"], "fullDescription": "game in CryptoRoulette.play (/data/demo_analysis_2/source_code/crypto_roulette.sol#40) is a storage variable never initialiazed\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "47": [{"level": "error", "tool": ["slither"], "snippet": {"text": "msg.sender.transfer(this.balance)"}, "fullDescription": "CryptoRoulette.play (/data/demo_analysis_2/source_code/crypto_roulette.sol#37-52) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (/data/demo_analysis_2/source_code/crypto_roulette.sol#47)\n", "name": "AccessControlVulnerability"}], "40": [{"level": "error", "tool": ["slither"], "fullDescription": "game in CryptoRoulette.play (/data/demo_analysis_2/source_code/crypto_roulette.sol#40) is a storage variable never initialiazed\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "45": [{"level": "warning", "tool": ["slither"], "snippet": {"text": "number == secretNumber"}, "fullDescription": "CryptoRoulette.play (/data/demo_analysis_2/source_code/crypto_roulette.sol#37-52) uses a dangerous strict equality:\n\t- number == secretNumber\n", "name": "OtherVulnerability", "flag": "risk of false positives"}], "25": [{"level": "note", "tool": ["mythril"], "snippet": {"text": "Game[] public gamesPlayed"}, "fullDescription": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "name": "OtherVulnerability", "flag": "risk of false positives"}, {"level": "warning", "tool": ["oyente"], "name": "ArithmeticVulnerability", "flag": "risk of false positives"}], "55": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "lastPlayed + 1 days"}, "fullDescription": "A possible integer overflow exists in the function `kill()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "2": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "github.com/thec00n"}, "fullDescription": "A possible integer overflow exists in the function `kill()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "42": [], "41": [{"level": "warning", "tool": ["honeybadger"], "snippet": {}, "name": "OtherVulnerability"}]}, "count_vulnerabilities": {"AccessControlVulnerability": 2, "OtherVulnerability": 4, "ArithmeticVulnerability": 3}, "count_leve_vulnerabilities": {"warning": 4, "error": 4, "note": 1, "none": 0}, "false_positives": 1}