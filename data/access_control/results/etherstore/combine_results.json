{"contract": "etherstore", "sourceLanguage": "Solidity", "analysis": {"27": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "msg.sender.call.value(_weiToWithdraw)()"}, "fullDescription": "In the function `_function_0x155dd5ee` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "name": "OtherVulnerability"}, {"level": "warning", "tool": ["mythril", "slither", "oyente"], "fullDescription": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in EtherStore.withdrawFunds (/data/access_control/source_code/etherstore.sol#20-30):\n\t-require(bool)(msg.sender.call.value(_weiToWithdraw)()) /data/access_control/source_code/etherstore.sol#27\n", "name": "UncheckedLowCallsVulnerability"}], "28": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "balances[msg.sender] -= _weiToWithdraw"}, "fullDescription": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "name": "ReentrancyVulnerability"}], "29": [{"level": "warning", "tool": ["mythril", "slither"], "snippet": {"text": "lastWithdrawTime[msg.sender] = now"}, "fullDescription": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "name": "ReentrancyVulnerability"}], "17": [{"level": "warning", "tool": ["mythril", "oyente"], "snippet": {"text": "balances[msg.sender] += msg.value"}, "fullDescription": "A possible integer overflow exists in the function `depositFunds()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "20": [{"level": "error", "tool": ["slither"], "fullDescription": "Reentrancy in EtherStore.withdrawFunds (/data/access_control/source_code/etherstore.sol#20-30):\n\tExternal calls:\n\t- require(bool)(msg.sender.call.value(_weiToWithdraw)()) (/data/access_control/source_code/etherstore.sol#27)\n\tState variables written after the call(s):\n\t- balances (/data/access_control/source_code/etherstore.sol#28)\n\t- lastWithdrawTime (/data/access_control/source_code/etherstore.sol#29)\n", "name": "ReentrancyVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "EtherStore.depositFunds (/data/access_control/source_code/etherstore.sol#16-18) should be declared external\n", "name": "IgnoreVulnerability"}, {"level": "note", "tool": ["slither"], "fullDescription": "Low level call in EtherStore.withdrawFunds (/data/access_control/source_code/etherstore.sol#20-30):\n\t-require(bool)(msg.sender.call.value(_weiToWithdraw)()) /data/access_control/source_code/etherstore.sol#27\n", "name": "UncheckedLowCallsVulnerability"}], "12": [{"level": "note", "tool": ["slither"], "fullDescription": "EtherStore.withdrawalLimit should be constant (/data/access_control/source_code/etherstore.sol#12)\n", "name": "IgnoreVulnerability"}], "16": [{"level": "note", "tool": ["slither"], "fullDescription": "EtherStore.depositFunds (/data/access_control/source_code/etherstore.sol#16-18) should be declared external\n", "name": "IgnoreVulnerability"}], "8": [{"level": "note", "tool": ["slither"], "snippet": {"text": "^0.4.0"}, "fullDescription": "Detected issues with version pragma in /data/access_control/source_code/etherstore.sol:\n\t- pragma solidity^0.4.0 (/data/access_control/source_code/etherstore.sol#8): it allows old versions\n", "name": "IgnoreVulnerability"}], "25": [{"level": "warning", "tool": ["oyente"], "snippet": {}, "name": "TimeManipulationVulnerability"}]}, "listLine": [27, 28, 29, 17, 20, 12, 16, 8, 25], "rules": [{"id": "Other_7", "fullDescription": {"text": "In the function `_function_0x155dd5ee` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n"}, "name": "OtherVulnerability", "shortDescription": {"text": "Dependence on predictable environment variable"}}, {"id": "Reentrancy_3", "fullDescription": {"text": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "Message call to external contract"}}, {"id": "Reentrancy_4", "fullDescription": {"text": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities."}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "State change after external call"}}, {"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `depositFunds()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}, {"id": "Reentrancy_10", "fullDescription": {"text": "Reentrancy in EtherStore.withdrawFunds (/data/access_control/source_code/etherstore.sol#20-30):\n\tExternal calls:\n\t- require(bool)(msg.sender.call.value(_weiToWithdraw)()) (/data/access_control/source_code/etherstore.sol#27)\n\tState variables written after the call(s):\n\t- balances (/data/access_control/source_code/etherstore.sol#28)\n\t- lastWithdrawTime (/data/access_control/source_code/etherstore.sol#29)\n"}, "name": "ReentrancyVulnerability", "shortDescription": {"text": "reentrancy-eth"}}, {"id": "Ignore_6", "fullDescription": {"text": "EtherStore.withdrawalLimit should be constant (/data/access_control/source_code/etherstore.sol#12)\n"}, "name": "IgnoreVulnerability", "shortDescription": {"text": "constable-states"}}, {"id": "Ignore_11", "fullDescription": {"text": "EtherStore.depositFunds (/data/access_control/source_code/etherstore.sol#16-18) should be declared external\n"}, "name": "IgnoreVulnerability", "shortDescription": {"text": "external-function"}}, {"id": "Ignore_17", "fullDescription": {"text": "Detected issues with version pragma in /data/access_control/source_code/etherstore.sol:\n\t- pragma solidity^0.4.0 (/data/access_control/source_code/etherstore.sol#8): it allows old versions\n"}, "name": "IgnoreVulnerability", "shortDescription": {"text": "solc-version"}}, {"id": "UncheckedLowCalls_5", "fullDescription": {"text": "Low level call in EtherStore.withdrawFunds (/data/access_control/source_code/etherstore.sol#20-30):\n\t-require(bool)(msg.sender.call.value(_weiToWithdraw)()) /data/access_control/source_code/etherstore.sol#27\n"}, "name": "UncheckedLowCallsVulnerability", "shortDescription": {"text": "low-level-calls"}}, {"id": "Ignore_12", "fullDescription": {"text": "Parameter '_weiToWithdraw' of EtherStore.withdrawFunds (/data/access_control/source_code/etherstore.sol#20) is not in mixedCase\n"}, "name": "IgnoreVulnerability", "shortDescription": {"text": "naming-convention"}}, {"id": "Arithmetic_11", "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow."}}, {"id": "TimeManipulation_3", "name": "TimeManipulationVulnerability", "shortDescription": {"text": "Timestamp Dependency."}}, {"id": "Reentrancy_6", "name": "ReentrancyVulnerability", "shortDescription": {"text": "Re-Entrancy Vulnerability."}}]}