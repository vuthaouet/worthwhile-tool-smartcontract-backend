{"contract": "dos_address", "sourceLanguage": "Solidity", "count_risk_of_false_positives": 0, "list_vulnerabilities": ["ArithmeticVulnerability"], "rules": [{"id": "Arithmetic_4", "fullDescription": {"text": "A possible integer overflow exists in the function `addCreditors()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer."}, "name": "ArithmeticVulnerability", "shortDescription": {"text": "Integer Overflow"}}], "listLine": [2, 9], "analysis": {"2": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "github.com/SmartCo"}, "fullDescription": "A possible integer overflow exists in the function `addCreditors()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}], "9": [{"level": "warning", "tool": ["mythril"], "snippet": {"text": "contract DosGas {\n\n    address[] creditorAddresses;\n    bool win = false;\n\n    function emptyCreditors() public {\n        // <yes> <report> DENIAL_OF_SERVICE\n        if(creditorAddresses.length>1500) {\n            creditorAddresses = new address[](0);\n            win = true;\n        }\n    }\n\n    function addCreditors() public returns (bool) {\n        for(uint i=0;i<350;i++) {\n          creditorAddresses.push(msg.sender);\n        }\n        return true;\n    }\n\n    function iWin() public view returns (bool) {\n        return win;\n    }\n\n    function numberCreditors() public view returns (uint) {\n        return creditorAddresses.length;\n    }\n}"}, "fullDescription": "A possible integer overflow exists in the function `addCreditors()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "name": "ArithmeticVulnerability"}]}, "count_vulnerabilities": {"ArithmeticVulnerability": 2}, "count_leve_vulnerabilities": {"warning": 2, "error": 0, "note": 0, "none": 0}, "false_positives": 0}